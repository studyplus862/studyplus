[{"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\index.js":"1","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\serviceWorker.js":"2","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\context\\UserContext.js":"3","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\context\\LayoutContext.js":"4","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\App.js":"5","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\themes\\index.js":"6","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\themes\\default.js":"7","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Layout\\Layout.js":"8","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\error\\Error.js":"9","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\login\\Login.js":"10","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\login\\styles.js":"11","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\error\\styles.js":"12","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Layout\\styles.js":"13","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\charts\\Charts.js":"14","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\tables\\Tables.js":"15","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\maps\\Maps.js":"16","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\icons\\Icons.js":"17","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\notifications\\Notifications.js":"18","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\typography\\Typography.js":"19","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Sidebar\\Sidebar.js":"20","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\dashboard\\Dashboard.js":"21","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Header\\Header.js":"22","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\icons\\styles.js":"23","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\dashboard\\mock.js":"24","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\maps\\styles.js":"25","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\charts\\components\\ApexHeatmap.js":"26","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\charts\\components\\ApexLineChart.js":"27","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\dashboard\\styles.js":"28","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Sidebar\\styles.js":"29","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Header\\styles.js":"30","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Sidebar\\components\\Dot.js":"31","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js":"32","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\typography\\styles.js":"33","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\dashboard\\components\\BigStat\\BigStat.js":"34","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\dashboard\\components\\Table\\Table.js":"35","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\notifications\\styles.js":"36","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\PageTitle\\PageTitle.js":"37","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Widget\\Widget.js":"38","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Wrappers\\Wrappers.js":"39","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\UserAvatar\\UserAvatar.js":"40","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Notification\\Notification.js":"41","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js":"42","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\dashboard\\components\\BigStat\\styles.js":"43","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\PageTitle\\styles.js":"44","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Widget\\styles.js":"45","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\UserAvatar\\styles.js":"46","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Notification\\styles.js":"47","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\quizzes\\Quizzes.jsx":"48","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseCategory\\CourseCategory.jsx":"49","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courses\\Courses.jsx":"50","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\quizQuestions\\QuizQuestions.jsx":"51","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\AddCourse\\AddOrEditCourse.jsx":"52","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\orders\\AllOrders.jsx":"53","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\pushNotification\\PushNotification.jsx":"54","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\CourseContent.jsx":"55","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\classAndSubjects\\ManageClassAndSubject.jsx":"56","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\manageEbooks\\ManageEbooks.jsx":"57","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\AppSlider\\AppSlider.jsx":"58","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\users\\Users.jsx":"59","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\freeVideos\\FreeVideos.jsx":"60","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\firebase\\FirebaseConfig.js":"61","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\freeVideos\\components\\VideoCardItem.jsx":"62","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\freeVideos\\components\\AddOrEditFreeVideoForm.jsx":"63","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\manageEbooks\\components\\EbookCardItem.jsx":"64","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\manageEbooks\\components\\AddOrEditEbookForm.jsx":"65","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\AppSlider\\components\\SlideAddOrEditForm.jsx":"66","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseCategory\\components\\CategoryForm.jsx":"67","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\SectionItem.jsx":"68","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\classAndSubjects\\components\\SubjectForm.jsx":"69","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\SectionForm.jsx":"70","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Dialogs\\PopupDialog.jsx":"71","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Dialogs\\DeleteDialog.jsx":"72","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\AddCourse\\components\\InputCourseForm.jsx":"73","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courses\\components\\CourseItemCard.jsx":"74","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\quizzes\\components\\QuizCardItem.jsx":"75","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\quizzes\\components\\AddOrEditQuizForm.jsx":"76","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\quizQuestions\\components\\AddOrEditQuestionForm.jsx":"77","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\quizQuestions\\components\\QuestionCardItem.jsx":"78","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\helper\\useForm.js":"79","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\controls\\Controls.js":"80","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\freeVideos\\components\\PlayVideo.jsx":"81","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\innerItems\\VideosList.jsx":"82","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\innerItems\\QuizList.jsx":"83","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\innerItems\\PDFList.jsx":"84","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\sectionForms\\AddOrEditVideoForm.jsx":"85","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\sectionForms\\AddOrEditQuizForm.jsx":"86","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\sectionForms\\AddOrEditPDFsForm.jsx":"87","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\ProgressBar\\LinearProgressWithLabel.jsx":"88","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\helper\\TinyMceEditor.jsx":"89","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\controls\\Button.js":"90","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\controls\\ActionButton.js":"91","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\controls\\Checkbox.js":"92","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\controls\\DatePicker.js":"93","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\controls\\Select.js":"94","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\controls\\Input.js":"95","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\controls\\RadioGroup.js":"96","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\innerItems\\QuizSelectItems.jsx":"97","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\innerItems\\PDFListItem.jsx":"98","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\innerItems\\QuizListItem.jsx":"99","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\innerItems\\VideoListItem.jsx":"100","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\services\\Api.js":"101","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\services\\CourseService.js":"102","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\services\\Utils.js":"103"},{"size":896,"mtime":1681187270787,"results":"104","hashOfConfig":"105"},{"size":5083,"mtime":1681187270800,"results":"106","hashOfConfig":"105"},{"size":2053,"mtime":1681187270786,"results":"107","hashOfConfig":"105"},{"size":1444,"mtime":1681187270786,"results":"108","hashOfConfig":"105"},{"size":1787,"mtime":1675004927926,"results":"109","hashOfConfig":"105"},{"size":534,"mtime":1681187270801,"results":"110","hashOfConfig":"105"},{"size":3127,"mtime":1681187270801,"results":"111","hashOfConfig":"105"},{"size":4005,"mtime":1681155871113,"results":"112","hashOfConfig":"105"},{"size":1626,"mtime":1675004927940,"results":"113","hashOfConfig":"105"},{"size":8888,"mtime":1677783268228,"results":"114","hashOfConfig":"105"},{"size":3281,"mtime":1675004927944,"results":"115","hashOfConfig":"105"},{"size":1395,"mtime":1675004927941,"results":"116","hashOfConfig":"105"},{"size":710,"mtime":1675004927928,"results":"117","hashOfConfig":"105"},{"size":5790,"mtime":1675004927936,"results":"118","hashOfConfig":"105"},{"size":2146,"mtime":1675004927947,"results":"119","hashOfConfig":"105"},{"size":1010,"mtime":1675004927944,"results":"120","hashOfConfig":"105"},{"size":391433,"mtime":1675004927943,"results":"121","hashOfConfig":"105"},{"size":13862,"mtime":1675004927945,"results":"122","hashOfConfig":"105"},{"size":4632,"mtime":1675235716779,"results":"123","hashOfConfig":"105"},{"size":4535,"mtime":1681188754480,"results":"124","hashOfConfig":"105"},{"size":17390,"mtime":1677606551392,"results":"125","hashOfConfig":"105"},{"size":10221,"mtime":1681189035117,"results":"126","hashOfConfig":"105"},{"size":812,"mtime":1675004927943,"results":"127","hashOfConfig":"105"},{"size":4288,"mtime":1675004927939,"results":"128","hashOfConfig":"105"},{"size":178,"mtime":1675004927944,"results":"129","hashOfConfig":"105"},{"size":1909,"mtime":1675004927937,"results":"130","hashOfConfig":"105"},{"size":1396,"mtime":1675004927937,"results":"131","hashOfConfig":"105"},{"size":3000,"mtime":1675004927939,"results":"132","hashOfConfig":"105"},{"size":1363,"mtime":1681151185021,"results":"133","hashOfConfig":"105"},{"size":4043,"mtime":1675004927927,"results":"134","hashOfConfig":"105"},{"size":902,"mtime":1675004927930,"results":"135","hashOfConfig":"105"},{"size":4589,"mtime":1675004927930,"results":"136","hashOfConfig":"105"},{"size":389,"mtime":1675004927947,"results":"137","hashOfConfig":"105"},{"size":4160,"mtime":1675004927938,"results":"138","hashOfConfig":"105"},{"size":1323,"mtime":1675004927939,"results":"139","hashOfConfig":"105"},{"size":1943,"mtime":1675004927947,"results":"140","hashOfConfig":"105"},{"size":447,"mtime":1676470992156,"results":"141","hashOfConfig":"105"},{"size":2581,"mtime":1675004927932,"results":"142","hashOfConfig":"105"},{"size":3971,"mtime":1675004927934,"results":"143","hashOfConfig":"105"},{"size":620,"mtime":1675004927931,"results":"144","hashOfConfig":"105"},{"size":3413,"mtime":1675004927928,"results":"145","hashOfConfig":"105"},{"size":1474,"mtime":1675004927931,"results":"146","hashOfConfig":"105"},{"size":1075,"mtime":1675004927938,"results":"147","hashOfConfig":"105"},{"size":482,"mtime":1676470975590,"results":"148","hashOfConfig":"105"},{"size":1015,"mtime":1675004927933,"results":"149","hashOfConfig":"105"},{"size":291,"mtime":1675004927932,"results":"150","hashOfConfig":"105"},{"size":1040,"mtime":1675004927928,"results":"151","hashOfConfig":"105"},{"size":8504,"mtime":1677220381656,"results":"152","hashOfConfig":"105"},{"size":7227,"mtime":1677313628058,"results":"153","hashOfConfig":"105"},{"size":3586,"mtime":1677259177621,"results":"154","hashOfConfig":"105"},{"size":4958,"mtime":1677246699538,"results":"155","hashOfConfig":"105"},{"size":1981,"mtime":1677343203119,"results":"156","hashOfConfig":"105"},{"size":2013,"mtime":1681150628030,"results":"157","hashOfConfig":"105"},{"size":4813,"mtime":1678982428004,"results":"158","hashOfConfig":"105"},{"size":3759,"mtime":1676731521712,"results":"159","hashOfConfig":"105"},{"size":13986,"mtime":1677586116411,"results":"160","hashOfConfig":"105"},{"size":6233,"mtime":1679045038348,"results":"161","hashOfConfig":"105"},{"size":5214,"mtime":1677836047001,"results":"162","hashOfConfig":"105"},{"size":2822,"mtime":1681144275431,"results":"163","hashOfConfig":"105"},{"size":5836,"mtime":1679224023900,"results":"164","hashOfConfig":"105"},{"size":1135,"mtime":1681189103676,"results":"165","hashOfConfig":"105"},{"size":4032,"mtime":1679224080694,"results":"166","hashOfConfig":"105"},{"size":20512,"mtime":1680869669531,"results":"167","hashOfConfig":"105"},{"size":1640,"mtime":1679049461200,"results":"168","hashOfConfig":"105"},{"size":15596,"mtime":1679216911392,"results":"169","hashOfConfig":"105"},{"size":5069,"mtime":1677834871381,"results":"170","hashOfConfig":"105"},{"size":1176,"mtime":1676880750518,"results":"171","hashOfConfig":"105"},{"size":8950,"mtime":1676811455227,"results":"172","hashOfConfig":"105"},{"size":6773,"mtime":1676982463585,"results":"173","hashOfConfig":"105"},{"size":2751,"mtime":1676874033152,"results":"174","hashOfConfig":"105"},{"size":820,"mtime":1677833617843,"results":"175","hashOfConfig":"105"},{"size":785,"mtime":1681150545149,"results":"176","hashOfConfig":"105"},{"size":12282,"mtime":1677518535562,"results":"177","hashOfConfig":"105"},{"size":6167,"mtime":1679224597910,"results":"178","hashOfConfig":"105"},{"size":2245,"mtime":1677167574758,"results":"179","hashOfConfig":"105"},{"size":10407,"mtime":1677261666141,"results":"180","hashOfConfig":"105"},{"size":4056,"mtime":1677246748456,"results":"181","hashOfConfig":"105"},{"size":1992,"mtime":1677246820025,"results":"182","hashOfConfig":"105"},{"size":1159,"mtime":1676451856115,"results":"183","hashOfConfig":"105"},{"size":392,"mtime":1676451302292,"results":"184","hashOfConfig":"105"},{"size":656,"mtime":1677308164083,"results":"185","hashOfConfig":"105"},{"size":1230,"mtime":1676736929526,"results":"186","hashOfConfig":"105"},{"size":1079,"mtime":1676811630293,"results":"187","hashOfConfig":"105"},{"size":1219,"mtime":1681188150823,"results":"188","hashOfConfig":"105"},{"size":13962,"mtime":1679217230020,"results":"189","hashOfConfig":"105"},{"size":5370,"mtime":1677308719341,"results":"190","hashOfConfig":"105"},{"size":4742,"mtime":1676739444686,"results":"191","hashOfConfig":"105"},{"size":552,"mtime":1677564642958,"results":"192","hashOfConfig":"105"},{"size":1188,"mtime":1677589752114,"results":"193","hashOfConfig":"105"},{"size":709,"mtime":1597654707000,"results":"194","hashOfConfig":"105"},{"size":839,"mtime":1597654707000,"results":"195","hashOfConfig":"105"},{"size":725,"mtime":1597654707000,"results":"196","hashOfConfig":"105"},{"size":853,"mtime":1681188310017,"results":"197","hashOfConfig":"105"},{"size":898,"mtime":1676458268480,"results":"198","hashOfConfig":"105"},{"size":458,"mtime":1597654707000,"results":"199","hashOfConfig":"105"},{"size":777,"mtime":1676825410767,"results":"200","hashOfConfig":"105"},{"size":2289,"mtime":1676808867852,"results":"201","hashOfConfig":"105"},{"size":2477,"mtime":1676807724516,"results":"202","hashOfConfig":"105"},{"size":2131,"mtime":1677603993110,"results":"203","hashOfConfig":"105"},{"size":2163,"mtime":1681188440775,"results":"204","hashOfConfig":"105"},{"size":4879,"mtime":1677835971667,"results":"205","hashOfConfig":"105"},{"size":6584,"mtime":1681188227871,"results":"206","hashOfConfig":"105"},{"size":1544,"mtime":1679224546774,"results":"207","hashOfConfig":"105"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},"2zfuyk",{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"210"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"210"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"210"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"210"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"210"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"210"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"210"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"210"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"210"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"210"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"210"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"210"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"210"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"210"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"210"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"210"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"210"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"210"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"210"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"210"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"210"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"210"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"210"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"210"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"210"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"210"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"210"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"210"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"210"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"210"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"210"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"210"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"210"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"210"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"437","usedDeprecatedRules":"438"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"210"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"210"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\index.js",[],["453","454"],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\serviceWorker.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\context\\UserContext.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\context\\LayoutContext.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\App.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\themes\\index.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\themes\\default.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Layout\\Layout.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\error\\Error.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\login\\Login.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\login\\styles.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\error\\styles.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Layout\\styles.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\charts\\Charts.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\tables\\Tables.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\maps\\Maps.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\icons\\Icons.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\notifications\\Notifications.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\typography\\Typography.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Sidebar\\Sidebar.js",["455","456","457","458","459","460","461","462","463","464"],"import { Drawer, IconButton, List } from \"@material-ui/core\";\r\nimport {\r\n  ArrowBack as ArrowBackIcon, BookmarkBorder, FilterNone as UIElementsIcon, FormatSize as TypographyIcon, HelpOutline as FAQIcon, Home as HomeIcon, Image, LaptopChromebook, LibraryBooks as LibraryIcon, LibraryBooksTwoTone, Notifications, NotificationsNone as NotificationsIcon, OndemandVideoOutlined, QuestionAnswer as SupportIcon, School, VerifiedUser\r\n} from \"@material-ui/icons\";\r\n\r\nimport { useTheme } from \"@material-ui/styles\";\r\nimport classNames from \"classnames\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport Dot from \"./components/Dot\";\r\nimport SidebarLink from \"./components/SidebarLink/SidebarLink\";\r\n\r\n// context\r\nimport {\r\n  toggleSidebar, useLayoutDispatch, useLayoutState\r\n} from \"../../context/LayoutContext\";\r\nimport { Person, PictureAsPdf, QuizOutlined, Sell } from \"@mui/icons-material\";\r\n\r\nconst structure = [\r\n  { id: 0, label: \"Dashboard\", link: \"/app/dashboard\", icon: <HomeIcon /> },\r\n\r\n  { id: 1, type: \"divider\" },\r\n  { id: 2, type: \"title\", label: \"MANAGE\" },\r\n  {\r\n    id:3,\r\n    label:\"Image Slider\",\r\n    link:\"/app/appSlider\",\r\n    icon:<Image/>\r\n  },\r\n  {\r\n    id:17,\r\n    label:\"Class & Subjects\",\r\n    link:\"/app/manageClassAndSubject\",\r\n    icon:<School/>\r\n  },\r\n  {\r\n    id:4,\r\n    label:\"Quizzes\",\r\n    link:\"/app/quizzes\",\r\n    icon:<QuizOutlined/>\r\n  },\r\n\r\n\r\n  { id: 5, type: \"divider\" },\r\n  { id: 6, type: \"title\", label: \"COURSE\" },\r\n  {\r\n    id:7,\r\n    label:\"Course Category\",\r\n    link:\"/app/courseCategory\",\r\n    icon:<BookmarkBorder/>\r\n  },\r\n  {\r\n    id:8,\r\n    label:\"Courses\",\r\n    link:\"/app/courses\",\r\n    icon:<LaptopChromebook/>\r\n  },\r\n  { id: 9, type: \"divider\" },\r\n  { id: 10, type: \"title\", label: \"EBOOK/NOTES\" },\r\n  {\r\n    id:11,\r\n    label:\"Ebooks/PDFs\",\r\n    link:\"/app/manageEbooks\",\r\n    icon:<PictureAsPdf/>\r\n  },\r\n  { id: 12, type: \"divider\" },\r\n  { id: 13, type: \"title\", label: \"FREE CONTENT\" },\r\n  {\r\n    id:14,\r\n    label:\"Free Videos\",\r\n    link:\"/app/freeVideos\",\r\n    icon:<OndemandVideoOutlined/>\r\n  },\r\n\r\n  { id: 15, type: \"title\", label: \"USERS\" },\r\n  {\r\n    id:16,\r\n    label:\"Users\",\r\n    link:\"/app/users\",\r\n    icon:<Person/>\r\n  },\r\n  { id: 15, type: \"title\", label: \"ORDERS\" },\r\n  {\r\n    id:16,\r\n    label:\"Orders\",\r\n    link:\"/app/orders\",\r\n    icon:<Sell/>\r\n  }\r\n];\r\n\r\nfunction Sidebar({ location }) {\r\n  var classes = useStyles();\r\n  var theme = useTheme();\r\n\r\n  // global\r\n  var { isSidebarOpened } = useLayoutState();\r\n  var layoutDispatch = useLayoutDispatch();\r\n\r\n  // local\r\n  var [isPermanent, setPermanent] = useState(true);\r\n\r\n  useEffect(function() {\r\n    window.addEventListener(\"resize\", handleWindowWidthChange);\r\n    handleWindowWidthChange();\r\n    return function cleanup() {\r\n      window.removeEventListener(\"resize\", handleWindowWidthChange);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Drawer\r\n      variant={isPermanent ? \"permanent\" : \"temporary\"}\r\n      className={classNames(classes.drawer, {\r\n        [classes.drawerOpen]: isSidebarOpened,\r\n        [classes.drawerClose]: !isSidebarOpened,\r\n      })}\r\n      classes={{\r\n        paper: classNames({\r\n          [classes.drawerOpen]: isSidebarOpened,\r\n          [classes.drawerClose]: !isSidebarOpened,\r\n        }),\r\n      }}\r\n      open={isSidebarOpened}\r\n    >\r\n      <div className={classes.toolbar} />\r\n      <div className={classes.mobileBackButton}>\r\n        <IconButton onClick={() => toggleSidebar(layoutDispatch)}>\r\n          <ArrowBackIcon\r\n            classes={{\r\n              root: classNames(classes.headerIcon, classes.headerIconCollapse),\r\n            }}\r\n          />\r\n        </IconButton>\r\n      </div>\r\n      <List className={classes.sidebarList}>\r\n        {structure.map(link => (\r\n          <SidebarLink\r\n            key={link.id}\r\n            location={location}\r\n            isSidebarOpened={isSidebarOpened}\r\n            {...link}\r\n          />\r\n        ))}\r\n      </List>\r\n    </Drawer>\r\n  );\r\n\r\n  // ##################################################################\r\n  function handleWindowWidthChange() {\r\n    var windowWidth = window.innerWidth;\r\n    var breakpointWidth = theme.breakpoints.values.md;\r\n    var isSmallScreen = windowWidth < breakpointWidth;\r\n\r\n    if (isSmallScreen && isPermanent) {\r\n      setPermanent(false);\r\n    } else if (!isSmallScreen && !isPermanent) {\r\n      setPermanent(true);\r\n    }\r\n  }\r\n}\r\n\r\nexport default withRouter(Sidebar);\r\n","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\dashboard\\Dashboard.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Header\\Header.js",["465","466","467"],"import React, { useState } from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  InputBase,\r\n  Menu,\r\n  MenuItem,\r\n  Fab,\r\n  Link\r\n} from \"@material-ui/core\";\r\nimport {\r\n  Menu as MenuIcon,\r\n  MailOutline as MailIcon,\r\n  NotificationsNone as NotificationsIcon,\r\n  Person as AccountIcon,\r\n  Search as SearchIcon,\r\n  Send as SendIcon,\r\n  ArrowBack as ArrowBackIcon,\r\n} from \"@material-ui/icons\";\r\nimport classNames from \"classnames\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport { Badge, Typography, Button } from \"../Wrappers\";\r\nimport Notification from \"../Notification/Notification\";\r\nimport UserAvatar from \"../UserAvatar/UserAvatar\";\r\n\r\n// context\r\nimport {\r\n  useLayoutState,\r\n  useLayoutDispatch,\r\n  toggleSidebar,\r\n} from \"../../context/LayoutContext\";\r\nimport { useUserDispatch, signOut } from \"../../context/UserContext\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport classname from \"classname\";\r\n\r\nconst messages = [\r\n  {\r\n    id: 0,\r\n    variant: \"warning\",\r\n    name: \"Jane Hew\",\r\n    message: \"Hey! How is it going?\",\r\n    time: \"9:32\",\r\n  },\r\n  {\r\n    id: 1,\r\n    variant: \"success\",\r\n    name: \"Lloyd Brown\",\r\n    message: \"Check out my new Dashboard\",\r\n    time: \"9:18\",\r\n  },\r\n  {\r\n    id: 2,\r\n    variant: \"primary\",\r\n    name: \"Mark Winstein\",\r\n    message: \"I want rearrange the appointment\",\r\n    time: \"9:15\",\r\n  },\r\n  {\r\n    id: 3,\r\n    variant: \"secondary\",\r\n    name: \"Liana Dutti\",\r\n    message: \"Good news from sale department\",\r\n    time: \"9:09\",\r\n  },\r\n];\r\n\r\nconst notifications = [\r\n  { id: 0, color: \"warning\", message: \"Check out this awesome ticket\" },\r\n  {\r\n    id: 1,\r\n    color: \"success\",\r\n    type: \"info\",\r\n    message: \"What is the best way to get ...\",\r\n  },\r\n  {\r\n    id: 2,\r\n    color: \"secondary\",\r\n    type: \"notification\",\r\n    message: \"This is just a simple notification\",\r\n  },\r\n  {\r\n    id: 3,\r\n    color: \"primary\",\r\n    type: \"e-commerce\",\r\n    message: \"12 new orders has arrived today\",\r\n  },\r\n];\r\n\r\nexport default function Header(props) {\r\n  var classes = useStyles();\r\n\r\n  // global\r\n  var layoutState = useLayoutState();\r\n  var layoutDispatch = useLayoutDispatch();\r\n  var userDispatch = useUserDispatch();\r\n\r\n  // local\r\n  var [mailMenu, setMailMenu] = useState(null);\r\n  var [isMailsUnread, setIsMailsUnread] = useState(true);\r\n  var [notificationsMenu, setNotificationsMenu] = useState(null);\r\n  var [isNotificationsUnread, setIsNotificationsUnread] = useState(true);\r\n  var [profileMenu, setProfileMenu] = useState(null);\r\n  var [isSearchOpen, setSearchOpen] = useState(false);\r\n\r\n  const auth=getAuth();\r\n  const currentUser=auth.currentUser;\r\n\r\n  return (\r\n    <AppBar position=\"fixed\" className={classes.appBar}>\r\n      <Toolbar className={classes.toolbar}>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          onClick={() => toggleSidebar(layoutDispatch)}\r\n          className={classNames(\r\n            classes.headerMenuButtonSandwich,\r\n            classes.headerMenuButtonCollapse,\r\n          )}\r\n        >\r\n          {layoutState.isSidebarOpened ? (\r\n            <ArrowBackIcon\r\n              classes={{\r\n                root: classNames(\r\n                  classes.headerIcon,\r\n                  classes.headerIconCollapse,\r\n                ),\r\n              }}\r\n            />\r\n          ) : (\r\n            <MenuIcon\r\n              classes={{\r\n                root: classNames(\r\n                  classes.headerIcon,\r\n                  classes.headerIconCollapse,\r\n                ),\r\n              }}\r\n            />\r\n          )}\r\n        </IconButton>\r\n        <Typography variant=\"h6\" weight=\"medium\" className={classes.logotype}>\r\n         Study Plus\r\n        </Typography>\r\n\r\n        <div className={classes.grow} />\r\n    \r\n        <div\r\n          className={classNames(classes.search, {\r\n            [classes.searchFocused]: isSearchOpen,\r\n          })}\r\n        >\r\n          \r\n          <div\r\n            className={classNames(classes.searchIcon, {\r\n              [classes.searchIconOpened]: isSearchOpen,\r\n            })}\r\n            onClick={() => setSearchOpen(!isSearchOpen)}\r\n          >\r\n            <SearchIcon classes={{ root: classes.headerIcon }} />\r\n          </div>\r\n          <InputBase\r\n            placeholder=\"Search…\"\r\n            classes={{\r\n              root: classes.inputRoot,\r\n              input: classes.inputInput,\r\n            }}\r\n          />\r\n        </div>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          aria-haspopup=\"true\"\r\n          aria-controls=\"mail-menu\"\r\n          onClick={e => {\r\n            setNotificationsMenu(e.currentTarget);\r\n            setIsNotificationsUnread(false);\r\n          }}\r\n          className={classes.headerMenuButton}\r\n        >\r\n          <Badge\r\n            badgeContent={isNotificationsUnread ? notifications.length : null}\r\n            color=\"warning\"\r\n          >\r\n            <NotificationsIcon classes={{ root: classes.headerIcon }} />\r\n          </Badge>\r\n        </IconButton>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          aria-haspopup=\"true\"\r\n          aria-controls=\"mail-menu\"\r\n          onClick={e => {\r\n            setMailMenu(e.currentTarget);\r\n            setIsMailsUnread(false);\r\n          }}\r\n          className={classes.headerMenuButton}\r\n        >\r\n          <Badge\r\n            badgeContent={isMailsUnread ? messages.length : null}\r\n            color=\"secondary\"\r\n          >\r\n            <MailIcon classes={{ root: classes.headerIcon }} />\r\n          </Badge>\r\n        </IconButton>\r\n        <IconButton\r\n          aria-haspopup=\"true\"\r\n          color=\"inherit\"\r\n          className={classes.headerMenuButton}\r\n          aria-controls=\"profile-menu\"\r\n          onClick={e => setProfileMenu(e.currentTarget)}\r\n        >\r\n          <AccountIcon classes={{ root: classes.headerIcon }} />\r\n        </IconButton>\r\n        <Menu\r\n          id=\"mail-menu\"\r\n          open={Boolean(mailMenu)}\r\n          anchorEl={mailMenu}\r\n          onClose={() => setMailMenu(null)}\r\n          MenuListProps={{ className: classes.headerMenuList }}\r\n          className={classes.headerMenu}\r\n          classes={{ paper: classes.profileMenu }}\r\n          disableAutoFocusItem\r\n        >\r\n          <div className={classes.profileMenuUser}>\r\n            <Typography variant=\"h4\" weight=\"medium\">\r\n              New Messages\r\n            </Typography>\r\n            <Typography\r\n              className={classes.profileMenuLink}\r\n              component=\"a\"\r\n              color=\"secondary\"\r\n            >\r\n              {messages.length} New Messages\r\n            </Typography>\r\n          </div>\r\n          {messages.map(message => (\r\n            <MenuItem key={message.id} className={classes.messageNotification}>\r\n              <div className={classes.messageNotificationSide}>\r\n                <UserAvatar color={message.variant} name={message.name} />\r\n                <Typography size=\"sm\" color=\"text\" colorBrightness=\"secondary\">\r\n                  {message.time}\r\n                </Typography>\r\n              </div>\r\n              <div\r\n                className={classNames(\r\n                  classes.messageNotificationSide,\r\n                  classes.messageNotificationBodySide,\r\n                )}\r\n              >\r\n                <Typography weight=\"medium\" gutterBottom>\r\n                  {message.name}\r\n                </Typography>\r\n                <Typography color=\"text\" colorBrightness=\"secondary\">\r\n                  {message.message}\r\n                </Typography>\r\n              </div>\r\n            </MenuItem>\r\n          ))}\r\n          <Fab\r\n            variant=\"extended\"\r\n            color=\"primary\"\r\n            aria-label=\"Add\"\r\n            className={classes.sendMessageButton}\r\n          >\r\n            Send New Message\r\n            <SendIcon className={classes.sendButtonIcon} />\r\n          </Fab>\r\n        </Menu>\r\n        <Menu\r\n          id=\"notifications-menu\"\r\n          open={Boolean(notificationsMenu)}\r\n          anchorEl={notificationsMenu}\r\n          onClose={() => setNotificationsMenu(null)}\r\n          className={classes.headerMenu}\r\n          disableAutoFocusItem\r\n        >\r\n          {notifications.map(notification => (\r\n            <MenuItem\r\n              key={notification.id}\r\n              onClick={() => setNotificationsMenu(null)}\r\n              className={classes.headerMenuItem}\r\n            >\r\n              <Notification {...notification} typographyVariant=\"inherit\" />\r\n            </MenuItem>\r\n          ))}\r\n        </Menu>\r\n        <Menu\r\n          id=\"profile-menu\"\r\n          open={Boolean(profileMenu)}\r\n          anchorEl={profileMenu}\r\n          onClose={() => setProfileMenu(null)}\r\n          className={classes.headerMenu}\r\n          classes={{ paper: classes.profileMenu }}\r\n          disableAutoFocusItem\r\n        >\r\n          <div className={classes.profileMenuUser}>\r\n            <Typography variant=\"h4\" weight=\"medium\">\r\n              {\r\n                currentUser?currentUser.email:\"None\"\r\n              }\r\n            </Typography>\r\n\r\n            \r\n\r\n          </div>\r\n          <MenuItem\r\n            className={classNames(\r\n              classes.profileMenuItem,\r\n              classes.headerMenuItem,\r\n            )}\r\n          >\r\n            <AccountIcon className={classes.profileMenuIcon} /> Profile\r\n          </MenuItem>\r\n          <MenuItem\r\n            className={classNames(\r\n              classes.profileMenuItem,\r\n              classes.headerMenuItem,\r\n            )}\r\n          >\r\n            <AccountIcon className={classes.profileMenuIcon} /> Tasks\r\n          </MenuItem>\r\n          <MenuItem\r\n            className={classNames(\r\n              classes.profileMenuItem,\r\n              classes.headerMenuItem,\r\n            )}\r\n          >\r\n            <AccountIcon className={classes.profileMenuIcon} /> Messages\r\n          </MenuItem>\r\n          <div className={classes.profileMenuUser}>\r\n            <Typography\r\n              className={classes.profileMenuLink}\r\n              color=\"primary\"\r\n              onClick={() => signOut(userDispatch, props.history)}\r\n            >\r\n              Sign Out\r\n            </Typography>\r\n          </div>\r\n        </Menu>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\icons\\styles.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\dashboard\\mock.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\maps\\styles.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\charts\\components\\ApexHeatmap.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\charts\\components\\ApexLineChart.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\dashboard\\styles.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Sidebar\\styles.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Header\\styles.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Sidebar\\components\\Dot.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\typography\\styles.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\dashboard\\components\\BigStat\\BigStat.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\dashboard\\components\\Table\\Table.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\notifications\\styles.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\PageTitle\\PageTitle.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Widget\\Widget.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Wrappers\\Wrappers.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\UserAvatar\\UserAvatar.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Notification\\Notification.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\dashboard\\components\\BigStat\\styles.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\PageTitle\\styles.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Widget\\styles.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\UserAvatar\\styles.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Notification\\styles.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\quizzes\\Quizzes.jsx",["468","469","470","471","472"],"import { Add } from '@material-ui/icons'\r\nimport { Button, CircularProgress, FormControl, Grid, InputLabel, MenuItem, Paper, Select, Stack, Typography } from '@mui/material'\r\nimport React, { useState } from 'react'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport PopupDialog from \"../../components/Dialogs/PopupDialog\"\r\nimport DeleteDialog from \"../../components/Dialogs/DeleteDialog\"\r\nimport PageTitle from \"../../components/PageTitle/PageTitle\"\r\nimport { deleteQuiz, editQuiz, insertQuiz } from '../../services/Api'\r\nimport AddOrEditQuizForm from './components/AddOrEditQuizForm'\r\n\r\nimport { child, equalTo, get, onValue, orderByChild, query, ref } from 'firebase/database'\r\nimport { useEffect } from 'react'\r\nimport { dbRealtime } from '../../firebase/FirebaseConfig'\r\nimport QuizCardItem from './components/QuizCardItem'\r\n\r\n\r\nfunction Quizzes() {\r\n  //dialog hooks\r\n  const [addQuizDialog,setAddQuizDialog]=useState(false)\r\n  const [openDeleteDialog,setOpenDeleteDialog]=useState(false);\r\n\r\n //data states\r\n const [categoryData,setCategoryData]=useState([]);\r\n const [subjectData,setSubjectData]=useState([]);\r\n const [quizzesData,setQuizzesData]=useState([]);\r\n const [quizRecordForEdit,setQuizRecordForEdit]=useState(null);\r\n\r\n const [qid,setQid]=useState(\"\");\r\n\r\n //loading hooks\r\n const [loading,setLoading]=useState(false);\r\n const [loading2,setLoading2]=useState(false);\r\n\r\n\r\n\r\n \r\n\r\n  const addOrEditQuiz=(id,data,quizInstruction,resetForm)=>{\r\n    setLoading2(false);\r\n    if(id==\"\" || id==undefined){\r\n      //add\r\n      console.log(data);\r\n      insertQuiz(data,quizInstruction).then(()=>{\r\n        toast.success(\"Quiz created successfully\")\r\n        resetForm();\r\n        setAddQuizDialog(false);\r\n        setLoading2(false);\r\n      }).catch((error)=>{\r\n        toast.error(\"Something went wrong\")\r\n        setLoading2(false);\r\n      })\r\n\r\n    }else {\r\n      //update\r\n      editQuiz(id,data,quizInstruction).then(()=>{\r\n        toast.success(\"Quiz Update successfully\")\r\n        resetForm();\r\n        setAddQuizDialog(false);\r\n        setLoading2(false);\r\n      }).catch((error)=>{\r\n        toast.error(\"Something went wrong\")\r\n        setLoading2(false);\r\n      })\r\n    }\r\n  }\r\n\r\n  //const handle quiz edit click\r\n  const handleAddQuizBtn=()=>{\r\n    setQuizRecordForEdit(null);\r\n    setAddQuizDialog(true)\r\n  }\r\n\r\n  const handleEdit=item=>{\r\n    setQuizRecordForEdit(item);\r\n    setAddQuizDialog(true);\r\n    console.log(item);\r\n   \r\n  }\r\n\r\n  const handleDelete=id=>{\r\n    setOpenDeleteDialog(true)\r\n    setQid(id);\r\n  }\r\n\r\n  const onDelete=()=>{\r\n    if(qid!=\"\"){\r\n      deleteQuiz(qid).then(()=>{\r\n        toast.success(\"Deleted\")\r\n        setOpenDeleteDialog(false);\r\n        setQid(\"\");\r\n      }).catch((error)=>{\r\n        toast.error(\"something went wrong\")\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  //handle filter inputs\r\n  const handleClassFilter=(event)=>{\r\n    const v=event.target.value;\r\n    if(v!=\"\"){\r\n      getSubjects(v);\r\n      //get quiz order by class_id\r\n      getQuizOrderBy(\"class_id\",v)\r\n      console.log(v);\r\n    }\r\n  }\r\n  const handleSubjectFilter=(event)=>{\r\n    const value=event.target.value;\r\n    if(value!=\"\"){\r\n      getQuizOrderBy(\"subject_id\",value)\r\n    }\r\n  }\r\n\r\n\r\n\r\n  //get filter data\r\n  //get board Class\r\n const getBoardClass=()=>{\r\n  const dbRef=ref(dbRealtime);\r\n  get(child(dbRef,\"/boardClass/\")).then((snapshot)=>{\r\n    if(snapshot.exists()){\r\n      const data=snapshot.val();\r\n      setCategoryData(Object.values(data));\r\n      console.log(data)\r\n    }else {\r\n      console.log(\"No data found\");\r\n    }\r\n  }).catch((error)=>{\r\n      console.log(error);\r\n  })\r\n}\r\n\r\n//get subjects\r\nconst getSubjects=(id)=>{\r\n  const qRef=query(ref(dbRealtime,\"/subjects\"),orderByChild(\"class_id\"),equalTo(id))\r\n  onValue(qRef,(snapshot)=>{\r\n    if(snapshot.exists()){\r\n      const data=snapshot.val();\r\n      setSubjectData(Object.values(data))\r\n      console.log(subjectData);\r\n    }else {\r\n      setSubjectData([]);\r\n    }\r\n  })\r\n}\r\n\r\n//get quizzes all\r\nconst getAllQuizzes=()=>{\r\n  setLoading(true);\r\n  const qRef=query(ref(dbRealtime,\"/quizzes\"),orderByChild(\"timestamp\"))\r\n  onValue(qRef,(snapshot)=>{\r\n    if(snapshot.exists()){\r\n      const data=snapshot.val();\r\n      setQuizzesData(Object.values(data))\r\n     \r\n    }else {\r\n      setSubjectData([]);\r\n    }\r\n    setLoading(false);\r\n  })\r\n}\r\n\r\n//get quiz filter by class\r\nconst getQuizOrderBy=(orderBy,id)=>{\r\n  setLoading(true);\r\n  const qRef=query(ref(dbRealtime,\"/quizzes\"),orderByChild(orderBy),equalTo(id))\r\n  onValue(qRef,(snapshot)=>{\r\n    if(snapshot.exists()){\r\n      const data=snapshot.val();\r\n      setQuizzesData(Object.values(data))\r\n     \r\n    }else {\r\n      setQuizzesData([]);\r\n    }\r\n    setLoading(false);\r\n  })\r\n}\r\n\r\n// get quizzes filter by subject\r\n\r\n//use effect hooks\r\nuseEffect(()=>{\r\n  getBoardClass();\r\n  getAllQuizzes();\r\n},[])\r\n\r\nuseEffect(()=>{\r\n  console.log(quizzesData);\r\n},[quizzesData])\r\n\r\n  return (\r\n    <>\r\n    <ToastContainer/>\r\n        <PageTitle title=\"Manage Quizzes\"\r\n            button={\r\n                <Button \r\n                    variant='contained'\r\n                    endIcon={<Add/>}\r\n                    onClick={handleAddQuizBtn}>\r\n                        Add Quiz\r\n                    </Button>\r\n\r\n            }\r\n            />\r\n\r\n            <Paper sx={{p:2}}>\r\n              \r\n              <Stack direction=\"row\" spacing={2}>\r\n                {/* FILTER INPUTS */}\r\n                \r\n              <FormControl fullWidth>\r\n                    <InputLabel id='lbl-select-class'>Filter by Class</InputLabel>\r\n                    <Select\r\n                        labelId='lbl-select-class'\r\n                        id='select-class'\r\n                        label=\"Select Class\"\r\n                        name='class_id'\r\n                        onChange={handleClassFilter}>\r\n                            {\r\n                                categoryData.map((item)=>(\r\n                                    <MenuItem key={item.id} value={item.id}>{item.title}</MenuItem>\r\n                                ))\r\n                            }\r\n                        </Select>\r\n                </FormControl>\r\n                <FormControl fullWidth>\r\n                    <InputLabel id='lbl-select-subject'>Filter by Subject</InputLabel>\r\n                    <Select\r\n                        labelId='lbl-select-subject'\r\n                        id='select-subject'\r\n                        label=\"Select Subject\"\r\n                        name='subject_id'\r\n                       \r\n                        onChange={handleSubjectFilter}>\r\n                            {\r\n                                subjectData.map((item)=>(\r\n                                    <MenuItem key={item.subject_id} value={item.subject_id}>{item.name}</MenuItem>\r\n                                ))\r\n                            }\r\n                        </Select>\r\n                       \r\n                </FormControl>\r\n              </Stack>\r\n            </Paper>\r\n\r\n          {loading && <div style={{display:\"flex\",justifyContent:\"center\",padding:\"24px\"}}>\r\n             <CircularProgress/>\r\n            </div>}\r\n\r\n           {!loading && quizzesData.length===0?<Typography sx={{m:4}} variant='h4'>\r\n                No content found.\r\n           </Typography>:\"\"} \r\n\r\n          <Grid container spacing={2} sx={{mt:2}}>\r\n            {\r\n              quizzesData.map((item)=>(\r\n                <Grid item xs={12} sm={12} md={4} lg={4} xl={4}>\r\n                \r\n                  <QuizCardItem \r\n                    key={item.quiz_id}\r\n                    item={item}\r\n                    handleEdit={handleEdit}\r\n                    handleDelete={handleDelete}\r\n                    />\r\n                </Grid>\r\n              ))\r\n            }         \r\n          </Grid>\r\n\r\n\r\n            <PopupDialog\r\n              title=\"Add / Update Quiz\"\r\n              openDialog={addQuizDialog}\r\n              setOpenDialog={setAddQuizDialog}\r\n              disableBackdropClick={true}\r\n              maxWidth=\"lg\">\r\n                <AddOrEditQuizForm\r\n                  addOrEdit={addOrEditQuiz}\r\n                  recordForEdit={quizRecordForEdit}\r\n                  loading={loading2}\r\n                  />\r\n              </PopupDialog>\r\n\r\n            <DeleteDialog\r\n              title=\"Delete\"\r\n              openDialog={openDeleteDialog}\r\n              setOpenDialog={setOpenDeleteDialog}\r\n              onAction={onDelete}/>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Quizzes","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseCategory\\CourseCategory.jsx",["473"],"import {\r\n    Button,\r\n    Card, CardContent, CircularProgress, Grid, IconButton, Table, TableBody,\r\n    TableCell, TableHead, TableRow, TextField, Typography\r\n} from '@material-ui/core'\r\n\r\nimport { Add, Delete, Edit } from '@material-ui/icons'\r\nimport { Stack } from '@mui/material'\r\nimport { collection, deleteDoc, doc, onSnapshot, orderBy, query, setDoc, Timestamp, updateDoc } from 'firebase/firestore'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport DeleteDialog from '../../components/Dialogs/DeleteDialog'\r\nimport PopupDialog from '../../components/Dialogs/PopupDialog'\r\nimport PageTitle from '../../components/PageTitle/PageTitle'\r\nimport { dbFirestore } from '../../firebase/FirebaseConfig'\r\nimport CategoryForm from './components/CategoryForm'\r\n\r\n\r\n\r\nfunction CourseCategory() {\r\n    const [catName,setCatName]=useState(\"\");\r\n    const [categories,setCategories]=useState([]);\r\n\r\n    const [inputError,setInputError]=useState(false)\r\n    const [progress,setProgress] = useState(false)\r\n\r\n    const [openPopup,setOpenPopup] = useState(false);\r\n    const [catId,setCatId]=useState(null)\r\n\r\n    const [updateDialog,setUpdateDialog]=useState(false)\r\n    const [recordForEdit,setRecordForEdit]=useState(null);\r\n    const [editProgress,setEditProgress]=useState(false)\r\n\r\n    //toast \r\n    const toastSuccess=(msg)=>{\r\n        toast.success(msg,{\r\n            theme:\"colored\"\r\n        });\r\n    }\r\n\r\n    const handleAddCategory=async()=>{\r\n        //check if catName is Not empty\r\n        if(catName==\"\"){\r\n            setInputError(true)\r\n            return\r\n        }\r\n\r\n        //store category\r\n        try {\r\n            setProgress(true);\r\n            const docRef=doc(collection(dbFirestore,\"COURSE_CATEGORIES\"))\r\n            await setDoc(docRef,{\r\n                id:docRef.id,\r\n                title:catName,\r\n                timestamp:Timestamp.now()\r\n            });\r\n    \r\n            console.log(docRef.id);\r\n            setProgress(false);\r\n            toastSuccess(\"Category added successfully\");\r\n            setCatName(\"\"); \r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const handleUpdateDialog=item=>{\r\n        setUpdateDialog(true);\r\n        setRecordForEdit(item)\r\n    }\r\n    const addOrEdit=async (id,title)=>{ \r\n        setEditProgress(true)\r\n        const dcRef=doc(dbFirestore,\"COURSE_CATEGORIES\",id)\r\n        await updateDoc(dcRef,{\r\n            title:title\r\n        })\r\n        setUpdateDialog(false)\r\n        setEditProgress(false)\r\n        toastSuccess(\"Record edit successfully\")\r\n    }\r\n    \r\n    const handleDelete=item=>{\r\n        setOpenPopup(true);\r\n        setCatId(item.id);\r\n    }\r\n\r\n    const deleteCategory=async()=>{\r\n        setOpenPopup(false);\r\n        await deleteDoc(doc(dbFirestore,\"COURSE_CATEGORIES\",catId))      \r\n        toast.success(\"Category has been deleted\",{\r\n            theme:\"colored\"\r\n        })\r\n       \r\n    }\r\n\r\n    useEffect(()=>{\r\n            const qRef=query(collection(dbFirestore,\"COURSE_CATEGORIES\"),orderBy(\"timestamp\",\"asc\"))\r\n            onSnapshot(qRef,(snapshot)=>{\r\n               setCategories(snapshot.docs.map(doc=>({\r\n                id:doc.id,\r\n                data:doc.data()\r\n               })))\r\n            })\r\n        \r\n    },[])\r\n\r\n  return (\r\n   <>\r\n        <PageTitle title=\"Course Categories\" />\r\n        <ToastContainer/>\r\n\r\n          <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={12} md={6} lg={6}>\r\n                 <Card>\r\n                    <CardContent>\r\n                        <Stack spacing={4}>\r\n                            <Typography variant='h5'>New Category</Typography>\r\n                          <TextField\r\n                           error={inputError}\r\n                           variant='outlined' label=\"Category Name\" onChange={(e)=>setCatName\r\n                        (e.target.value)}\r\n                        value={catName}/>\r\n                        \r\n                          {progress? <CircularProgress/> :\r\n                          <Button variant='contained' color='primary' endIcon={<Add/>}  onClick={handleAddCategory}>Add Category</Button>\r\n                          }\r\n                        </Stack>\r\n                    </CardContent>\r\n                 </Card>\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={6} lg={6}>\r\n                 <Card>\r\n                    <CardContent>\r\n                        {categories.length>0?<>         \r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow key=\"header\">\r\n                                        <TableCell>CategoryName</TableCell>\r\n                                        <TableCell>Edit</TableCell>\r\n                                        <TableCell>Delete</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {categories.map((item)=>(\r\n                                        <TableRow key={item.id}>\r\n                                            <TableCell>\r\n                                                {item.data.title}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <IconButton onClick={()=>handleUpdateDialog(item)}>\r\n                                                    <Edit/>\r\n                                                </IconButton>\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <IconButton \r\n                                                  color='secondary' \r\n                                                  label=\"delete\"\r\n                                                  onClick={()=>handleDelete(item)}>\r\n                                                    <Delete/>\r\n                                                </IconButton>\r\n                                            </TableCell>\r\n\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                    \r\n                        </> : \"No category found.\"}\r\n                        \r\n                    </CardContent>\r\n                 </Card>\r\n              </Grid>\r\n          </Grid>\r\n\r\n      <DeleteDialog \r\n       title=\"Delete Category\"\r\n       openDialog={openPopup}\r\n       setOpenDialog={setOpenPopup}\r\n       onAction={deleteCategory}/>\r\n\r\n       <PopupDialog\r\n            title=\"Update\"\r\n            openDialog={updateDialog}\r\n            setOpenDialog={setUpdateDialog}>\r\n            <CategoryForm\r\n               recordForEdit={recordForEdit}\r\n               addOrEdit={addOrEdit}  \r\n               progress={editProgress}\r\n               setProgress={setEditProgress}\r\n             />\r\n        </PopupDialog>\r\n                                        \r\n\r\n\r\n\r\n   </>\r\n  )\r\n}\r\n\r\nexport default CourseCategory","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courses\\Courses.jsx",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\quizQuestions\\QuizQuestions.jsx",["474","475","476","477","478","479","480","481"],"import { Button, CircularProgress, Grid, Typography } from '@mui/material';\r\nimport { child, equalTo, onValue, orderByChild, query, ref } from 'firebase/database';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport DeleteDialog from '../../components/Dialogs/DeleteDialog';\r\nimport PopupDialog from '../../components/Dialogs/PopupDialog';\r\nimport PageTitle from '../../components/PageTitle/PageTitle';\r\nimport { dbRealtime } from '../../firebase/FirebaseConfig';\r\nimport { addQuestion, deleteQuestion, updateQuestion } from '../../services/Api';\r\nimport AddOrEditQuestionForm from './components/AddOrEditQuestionForm';\r\nimport QuestionCardItem from './components/QuestionCardItem';\r\n\r\nfunction QuizQuestions() {\r\n   \r\n    const {qid,title} = useParams();\r\n\r\n    //data hooks\r\n    const [questions,setQuestions]=useState([]);\r\n    const [recordForEdit,setRecordForEdit]=useState(null);\r\n\r\n    const [questionId,setQuestionId]=useState(\"\");\r\n\r\n    //dialog hooks\r\n    const [open,setOpen]=useState(false);\r\n    const [deleteDialog,setDeleteDialog]=useState(false);\r\n\r\n    //loading hooks\r\n    const [progress,setProgress]=useState(false);\r\n    const [loading,setLoading]=useState(false);\r\n\r\n\r\n //crud methods\r\n const addOrEditQn=(id,data,resetForm)=>{\r\n    setProgress(true);\r\n    if(id==undefined || id==\"\" || id==null){\r\n      //add question\r\n      addQuestion(qid,data,resetForm).then(()=>{\r\n        toast.success(\"Question added successfully!\")\r\n        setOpen(false);\r\n        setProgress(false);\r\n      }).catch((error)=>{\r\n        toast.success(\"Something went wrong\"+error)\r\n        setProgress(false);\r\n      })\r\n      console.log(\"add\")\r\n    }else {\r\n      updateQuestion(id,data).then(()=>{\r\n        toast.success(\"Question updated successfully!\")\r\n        setOpen(false);\r\n        setProgress(false);\r\n      }).catch((err)=>{\r\n        toast.success(\"Something went wrong\"+err)\r\n        setProgress(false);\r\n      })\r\n    }\r\n }  \r\n\r\n const handleEdit=item=>{\r\n  setRecordForEdit(item);\r\n  setOpen(true);\r\n  console.log(item);\r\n \r\n}\r\n\r\nconst handleDelete=id=>{\r\n  setDeleteDialog(true)\r\n  setQuestionId(id);\r\n}\r\n\r\nconst onDelete=()=>{\r\n  if(questionId!=null || questionId!=\"\"){\r\n    deleteQuestion(questionId).then(()=>{ \r\n      toast.success(\"Deleted successfully\")\r\n    }).catch((error)=>{\r\n      toast.error(\"Try again!\"+error)\r\n    })\r\n    setDeleteDialog(false);\r\n  }\r\n}\r\n \r\n\r\n\r\n\r\nconst getQuestions=(id)=>{\r\n   setLoading(true)\r\n    const qRef=query(ref(dbRealtime,\"/questions\"),orderByChild(\"quiz_id\"),equalTo(id))\r\n    onValue(qRef,(snapshot)=>{\r\n    if(snapshot.exists()){\r\n      const data=snapshot.val();\r\n      setQuestions(Object.values(data))\r\n      console.log(questions);\r\n      \r\n    }else {\r\n      setQuestions([]);\r\n    }\r\n    setLoading(false)\r\n  })\r\n  \r\n}\r\n\r\n\r\nuseEffect(()=>{\r\n    if(qid!=undefined && qid!=\"\"){\r\n        console.log(qid);\r\n        getQuestions(qid);\r\n    }\r\n},[])\r\n\r\n  return (\r\n    <>\r\n    <ToastContainer/>\r\n        <PageTitle title={title}\r\n            button={\r\n                <Button \r\n                    variant='contained'\r\n                    onClick={()=>{\r\n                      setOpen(true)\r\n                      setRecordForEdit(null);\r\n                    }}>\r\n                        Add question\r\n                    </Button>\r\n            }\r\n            />\r\n\r\n          {loading && <div style={{display:\"flex\",justifyContent:\"center\"}}><CircularProgress /></div>}\r\n          {!loading && questions.length==0? <Typography variant='h5'>\r\n            No Questions found.\r\n          </Typography>\r\n            :\r\n            <Grid container spacing={2}>\r\n              {\r\n                  questions.map((item, index) => (\r\n                      <Grid item key={item.question_id} xs={12} sm={12} md={6} lg={6} xl={6}>\r\n                          <QuestionCardItem\r\n                              item={item}\r\n                              index={index}\r\n                              handleEdit={handleEdit}\r\n                              handleDelete={handleDelete} />\r\n                      </Grid>\r\n                  ))\r\n              }\r\n          </Grid>  \r\n        }\r\n\r\n          <PopupDialog\r\n            title=\"Add / Update Question\"\r\n            openDialog={open}\r\n            setOpenDialog={setOpen}\r\n            disableBackdropClick={true}\r\n            maxWidth=\"lg\">\r\n                <AddOrEditQuestionForm\r\n                   addOrEdit={addOrEditQn}\r\n                   recordForEdit={recordForEdit}\r\n                   progress={progress}\r\n                  />\r\n            </PopupDialog>\r\n\r\n\r\n            <DeleteDialog\r\n              title=\"Delete\"\r\n              openDialog={deleteDialog}\r\n              setOpenDialog={setDeleteDialog}\r\n              onAction={onDelete}/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default QuizQuestions","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\AddCourse\\AddOrEditCourse.jsx",["482"],"import { Card, CardContent, IconButton } from '@material-ui/core';\r\nimport { Close } from '@material-ui/icons';\r\nimport { Alert, AlertTitle, Collapse } from '@mui/material';\r\nimport React, { useRef, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport PageTitle from '../../components/PageTitle/PageTitle';\r\nimport { insertCourse } from '../../services/CourseService';\r\nimport InputCourseForm from './components/InputCourseForm';\r\n\r\n\r\nfunction AddOrEditCourse() {\r\n  const [progress,setProgress] = useState(false);\r\n  const [alert,setAlert]=useState(false);\r\n  const ref=useRef()\r\n\r\n  const addOrEdit = (docId,data,cDescription, resetForm) => {\r\n    setProgress(true);\r\n    if (docId == null){\r\n      insertCourse(data,cDescription)\r\n      resetForm()\r\n      setProgress(false)\r\n      setAlert(true);\r\n      toast.success(\"New Course Created successfully\")\r\n      scrollToTop()\r\n    }\r\n  }\r\n\r\n  const scrollToTop=()=>{\r\n    window.scrollTo({\r\n      top:0,\r\n      behavior:\"smooth\"\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n    <ToastContainer/>\r\n    <PageTitle title=\"Add New Course\"/>\r\n    {/*  ALERT */}\r\n    <Collapse in={alert} >\r\n      <Alert severity=\"success\"\r\n        action={\r\n          <IconButton\r\n          aria-label='close'\r\n          color='inherit'\r\n          size='small'\r\n          onClick={()=>setAlert(false)}>\r\n           <Close fontSize='inherit'/> \r\n          </IconButton>\r\n        }\r\n        style={{marginBottom:\"16px\"}}>\r\n          <AlertTitle>Success</AlertTitle>\r\n          Course has been created — <Link to=\"/app/courses\">Check Courses</Link>\r\n        </Alert>\r\n\r\n    </Collapse>\r\n       <Card>\r\n         <CardContent>\r\n            <InputCourseForm\r\n              addOrEdit={addOrEdit}\r\n              progress={progress}\r\n              setProgress={setProgress}\r\n            />\r\n         </CardContent>\r\n       </Card>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AddOrEditCourse","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\orders\\AllOrders.jsx",["483","484"],"import React, { useEffect, useMemo, useState } from 'react'\r\nimport { dbFirestore } from '../../firebase/FirebaseConfig';\r\nimport PageTitle from '../../components/PageTitle/PageTitle';\r\nimport { collection, onSnapshot, orderBy, query } from 'firebase/firestore'\r\nimport MUIDataTable from 'mui-datatables';\r\n\r\nfunction AllOrders() {\r\n  const [loading,setLoading]=useState(true);\r\n\r\n  //data states\r\n  const [orders,setOrders]=useState([]);\r\n\r\n  useEffect(()=>{\r\n    \r\n    const qRef = query(collection(dbFirestore, \"ALL_ORDERS\"), orderBy(\"timestamp\", \"desc\"))\r\n    const unsubscribe = onSnapshot(qRef, (snapshot) => {\r\n        setOrders(snapshot.docs.map(doc => ({\r\n            id: doc.id,\r\n            productName: doc.data().productName,\r\n            productType: doc.data().productType,\r\n            status: doc.data().status,\r\n            amount: doc.data().amount,\r\n            productId: doc.data().productId,\r\n            purchaseDate: doc.data().purchaseDate.toDate().toLocaleDateString(\"en-In\"),\r\n            mobile:doc.data().mobile,\r\n            email:doc.data().userEmail\r\n        })))\r\n        setLoading(false)\r\n    });\r\n    return unsubscribe\r\n  },[])  \r\n\r\n\r\n  //table columns\r\n  const columns=useMemo(()=>[\r\n    {\r\n        name: 'productName', //access nested data with dot notation\r\n        label: 'Product Name',\r\n    },\r\n    {\r\n        name: 'productType', //access nested data with dot notation\r\n        label: 'Type',\r\n    },\r\n    {\r\n        name: 'status', //access nested data with dot notation\r\n        label: 'Status',\r\n    },\r\n    {\r\n        name: \"purchaseDate\",\r\n        label: 'Purchase Date',\r\n    },\r\n    {\r\n        name: \"mobile\",\r\n        label: 'Mobile No',\r\n    },\r\n    {\r\n        name: \"email\",\r\n        label: 'Email',\r\n    },\r\n  ])\r\n\r\n\r\n  return (\r\n    <>\r\n        <PageTitle title=\"Orders\"/>\r\n\r\n        <MUIDataTable\r\n                columns={columns}\r\n                data={orders}\r\n                title=\"ORDERS\"\r\n            />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AllOrders","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\pushNotification\\PushNotification.jsx",["485","486"],"import { async } from '@firebase/util'\r\nimport { Send } from '@material-ui/icons'\r\nimport { Button, CircularProgress, Grid, Paper, Stack, TextField, Typography } from '@mui/material'\r\nimport React, { useState } from 'react'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport PageTitle from \"../../components/PageTitle\"\r\n\r\nfunction PushNotification() {\r\n    const [title,setTitle]=useState(\"\")\r\n    const [body,setBody]=useState(\"\")\r\n    const [image,setImage]=useState(\"\")\r\n    const [actionUrl,setActionUrl]=useState(\"\")\r\n\r\n    const date=new Date()\r\n    const todayDate=date.getDate() +\"/\" + date.getMonth()+ \"/\" + date.getFullYear()\r\n   \r\n    //progress\r\n    const [progress,setProgress]=useState(false);\r\n\r\n\r\n    const sendNotification=async (title,body,actionUrl)=>{\r\n        setProgress(true);\r\n\r\n        fetch(\"https://fcm.googleapis.com/fcm/send\",{\r\n            method:\"POST\",\r\n            headers:{\r\n                'Content-Type':\"application/json\",\r\n                'Authorization':\"key=AAAA7MDMLb0:APA91bGk3zNFIbhjMvkUcmB_bUIQeXTBOG3PVV_NM4SB6GVbEM8GxpBoYdMp2NiLO8rLn04IQrgb2auw0rGYrnPr-EZ2mYPbDA2bV7tlIcoZcwEikn_pjcdsQAbfnnlq2o7dG8ByLjtC\"\r\n            },\r\n            body:JSON.stringify({\r\n                \"to\":\"/topics/all\",\r\n                \"data\":{\r\n                    title:title,\r\n                    body:body,\r\n                    deeplink:actionUrl,\r\n                    image:image,\r\n                    date:String(todayDate),\r\n                    sound:\"yes\"\r\n                }\r\n            })\r\n        }).then((res)=>{\r\n            if(res.status==200){\r\n                toast.success(\"Notification send successfully\")\r\n                resetForm();\r\n            }else{\r\n                toast.error(\"Failed to send notification! try again.\")\r\n            }\r\n            setProgress(false)\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err)\r\n            setProgress(false)\r\n            toast.error(\"error!- \"+err)\r\n        })\r\n    }\r\n\r\n    const handleSubmit=()=>{\r\n        sendNotification(title,body,actionUrl)\r\n    }\r\n\r\n    const resetForm=()=>{\r\n        setTitle(\"\")\r\n        setBody(\"\")\r\n        setImage(\"\")\r\n        setActionUrl(\"\")\r\n    }\r\n \r\n\r\n\r\n  return (\r\n    <>\r\n    <ToastContainer/>\r\n        <PageTitle title=\"Push Notifications\"/>\r\n            <Typography variant='subtitle2'>Send Notification</Typography>\r\n            <Grid container>\r\n                <Grid item xs={12} sm={12} md={12} lg={6} xl={6}>\r\n                   <Paper sx={{p:2}}>\r\n                      <Stack direction=\"column\" spacing={2}>\r\n                          <TextField\r\n                              fullWidth\r\n                              label=\"Title\"\r\n                              variant='outlined'\r\n                              value={title}\r\n                              onChange={\r\n                                (e)=>setTitle(e.target.value)\r\n                              }\r\n                              \r\n                               />\r\n                          <TextField\r\n                              fullWidth\r\n                              label=\"Body\"\r\n                              variant='outlined'\r\n                              value={body}\r\n                              onChange={\r\n                                (e)=>setBody(e.target.value)\r\n                              } />\r\n                          <TextField\r\n                              fullWidth\r\n                              label=\"Image\"\r\n                              variant='outlined'\r\n                              value={image}\r\n                              onChange={\r\n                                (e)=>setImage(e.target.value)\r\n                              } />\r\n\r\n                          <TextField\r\n                              fullWidth\r\n                              label=\"Click action URL\"\r\n                              variant='outlined'\r\n                              value={actionUrl}\r\n                              onChange={\r\n                                (e)=>setActionUrl(e.target.value)\r\n                              } />\r\n\r\n                       {\r\n                        progress?<CircularProgress/>:\r\n                                  <Button type='submit'\r\n                                      variant='contained'\r\n                                      endIcon={<Send />}\r\n                                      disabled={(title === \"\" || body === \"\")}\r\n                                      onClick={handleSubmit}\r\n                                  >\r\n                                      Send\r\n                                  </Button>\r\n                       }\r\n                      </Stack>\r\n                   </Paper>\r\n                </Grid>\r\n            </Grid>\r\n       \r\n    </>\r\n  )\r\n}\r\n\r\nexport default PushNotification","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\CourseContent.jsx",["487","488","489"],"import { Paper } from '@material-ui/core';\r\nimport { Add } from '@material-ui/icons';\r\nimport { Button, Typography } from '@mui/material';\r\nimport { collection, onSnapshot, orderBy, query, where } from 'firebase/firestore';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport PopupDialog from \"../../components/Dialogs/PopupDialog\";\r\nimport PageTitle from \"../../components/PageTitle/PageTitle\";\r\nimport { dbFirestore } from '../../firebase/FirebaseConfig';\r\nimport { insertSection, updateSection } from '../../services/CourseService';\r\nimport SectionForm from './components/SectionForm';\r\nimport SectionItem from './components/SectionItem';\r\n\r\nfunction CourseContent(props) {\r\n    const location=useLocation()\r\n    // const courseId=\r\n    const courseName=location.state?.title;\r\n    const [courseId,setCourseId]=useState(location.state?.courseId);\r\n    const [sectionData,setSectionData]=useState([]);\r\n    const [openSectionDialog,setOpenSectionDialog]=useState(false)\r\n    const [progress,setProgress]=useState(false)\r\n\r\n    const [sectionRecordForEdit,setSectionRecordForEdit]=useState(null);\r\n   \r\n\r\n\r\n    const addOrEditSection=(id,data,resetForm)=>{\r\n      if(id==null){\r\n        // add record\r\n        insertSection(data,courseId)\r\n        resetForm();\r\n        setOpenSectionDialog(false)\r\n        toast.success(\"Section Added Successfully\")\r\n      }else {\r\n        //update record\r\n        console.log(\"update\"+id);\r\n        updateSection(id,data,onSuccess,onFailed);\r\n        resetForm()\r\n        setOpenSectionDialog(false);\r\n      }\r\n    }\r\n\r\n     //interface methods\r\n const onSuccess=(msg)=>{\r\n  toast.success(msg);\r\n}\r\nconst onFailed=(msg)=>{\r\n  toast.error(msg);\r\n}\r\n  \r\n    useEffect(()=>{\r\n      console.log(courseId)\r\n      if(courseId==undefined){\r\n        window.history.back();\r\n      }\r\n      const qRef=query(collection(dbFirestore,\"COURSE_LESSON_SECTIONS\"),where(\"course_id\",\"==\",courseId),orderBy(\"timestamp\",\"asc\"))\r\n          onSnapshot(qRef,(snapshot)=>{\r\n              setSectionData(snapshot.docs.map(doc=>({\r\n              id:doc.id,\r\n              data:doc.data()\r\n             })))\r\n          });\r\n\r\n    },[])\r\n\r\n    \r\n  return (\r\n    <>\r\n    <ToastContainer/>\r\n      <PageTitle \r\n        title={courseName}\r\n        button={\r\n            <Button \r\n                variant='contained'\r\n                color='primary' \r\n                endIcon={<Add/>}\r\n                onClick={()=>{\r\n                  setSectionRecordForEdit(null);\r\n                  setOpenSectionDialog(true)\r\n                }}\r\n                >\r\n                    Add New Section\r\n            </Button>\r\n        }\r\n      />\r\n\r\n        <div>\r\n          {sectionData.length>0?  \r\n          <>{sectionData.map((item)=>(\r\n            <SectionItem\r\n              key={item.id}\r\n              courseId={courseId}\r\n              sectionData={item}\r\n              setRecordForEdit={setSectionRecordForEdit}\r\n              setOpenSectionDialog={setOpenSectionDialog}\r\n            />\r\n          ))} </> : \r\n            <Paper style={{padding:\"16px\"}}>\r\n              <Typography variant='h6'>No Section Found.</Typography>\r\n            </Paper>\r\n          }\r\n        </div>\r\n\r\n\r\n      <PopupDialog\r\n        title=\"Add New Section\"\r\n        openDialog={openSectionDialog}\r\n        setOpenDialog={setOpenSectionDialog}\r\n        maxWidth=\"lg\">\r\n          <SectionForm\r\n            addOrEditSection={addOrEditSection}\r\n            progress={progress}\r\n            setProgress={setProgress}\r\n            recordForEdit={sectionRecordForEdit}            \r\n          />\r\n      </PopupDialog>\r\n\r\n     \r\n    </>\r\n  )\r\n}\r\n\r\nexport default CourseContent","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\classAndSubjects\\ManageClassAndSubject.jsx",["490","491","492","493","494","495","496"],"import { Add, Delete, Edit } from '@material-ui/icons'\r\nimport { Button, Card, CardContent, CardHeader, FormControl, Grid, IconButton, InputLabel, MenuItem, Select, Table, TableBody, TableCell, TableHead, TableRow, Typography } from '@mui/material'\r\nimport { equalTo, onValue, orderByChild, query, ref } from 'firebase/database'\r\nimport React, { useState } from 'react'\r\nimport { useEffect } from 'react'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport PageTitle from '../../components/PageTitle/PageTitle'\r\nimport PopupDialog from '../../components/Dialogs/PopupDialog'\r\nimport DeleteDialog from '../../components/Dialogs/DeleteDialog'\r\nimport { dbRealtime } from '../../firebase/FirebaseConfig'\r\nimport { deleteItem, deleteSubject, editBoardClass, editSubject, insertBoardClass, insertSubject } from '../../services/Api'\r\nimport CategoryForm from '../courseCategory/components/CategoryForm'\r\nimport SubjectForm from './components/SubjectForm'\r\nimport { CircularProgress } from '@mui/material'\r\n\r\nfunction ManageClassAndSubject() {\r\n\r\n    const [openClassDialog,setOpenClassDialog]=useState(false);\r\n    const [openSubDialog,setOpenSubDialog]=useState(false);\r\n    const [catDeleteDialog,setCatDeleteDialog]=useState(false);\r\n    const [subDelDialog,setDelDialog]=useState(false);\r\n\r\n    const [categoryRecord,setCategoryRecord]=useState(null);\r\n    const [subjectRecord,setSubjectRecord]=useState(null);\r\n\r\n    const [classData,setClassData]=useState([]);\r\n    const [subjectData,setSubjectData]=useState([]);\r\n    const [catId,setCatId]=useState(\"\");\r\n    const [subId,setSubId]=useState(\"\");\r\n\r\n    const [loading1,setLoading1]=useState(false);\r\n    const [loading2,setLoading2]=useState(false);\r\n\r\n    const addOrEditCategory=(id,data)=>{\r\n        if(id==\"\"){\r\n            //add record\r\n            insertBoardClass(data,onSuccess,onFailed);\r\n            setOpenClassDialog(false);\r\n        }else {\r\n            //update record\r\n            console.log(id);\r\n            editBoardClass(id,data,onSuccess,onFailed);\r\n            setOpenClassDialog(false);\r\n        }\r\n    \r\n    }\r\n\r\n    const addOrEditSubject=(id,data,resetForm)=>{\r\n        if(id==\"\" || id==undefined || id==null){\r\n            //add New Data\r\n            insertSubject(data,onSuccess,onFailed);\r\n            resetForm();\r\n            setOpenSubDialog(false)\r\n            \r\n        }else {\r\n            //update data\r\n            editSubject(id,data,onSuccess,onFailed);\r\n            resetForm();\r\n            setOpenSubDialog(false)\r\n        }\r\n        console.log(id);\r\n    }\r\n\r\n    const onDeleteCategory=()=>{\r\n        if(catId!=\"\"){\r\n            deleteItem(catId,onSuccess,onFailed);\r\n            setCatDeleteDialog(false);\r\n        }\r\n    }\r\n    const onDeleteSubject=()=>{\r\n        if(subId!=\"\"){\r\n            deleteSubject(subId,onSuccess,onFailed);\r\n            setDelDialog(false);\r\n        }else {\r\n            toast.error(\"something went wrong.null sub id\")\r\n        }\r\n    }\r\n    const handleDelete=id=>{\r\n        setCatId(id);\r\n        setCatDeleteDialog(true);\r\n    }\r\n\r\n\r\n    const onSuccess=(msg)=>{\r\n        toast.success(msg)\r\n    }\r\n    const onFailed=(msg)=>{\r\n        toast.error(msg)\r\n    }\r\n\r\n    //const get categories\r\n\r\n    const getCategories=()=>{\r\n        setLoading1(true);\r\n        //realtime update\r\n        const docRef=ref(dbRealtime,\"boardClass\")\r\n        onValue(docRef,(snapshot)=>{\r\n            if(snapshot.exists()){\r\n                const data=snapshot.val();\r\n                setClassData(data)\r\n            }else {\r\n                setClassData([]);\r\n            }\r\n            setLoading1(false)\r\n        })\r\n    }\r\n\r\n    const getSubjects=()=>{\r\n        setLoading2(true);\r\n         //realtime update\r\n         const docRef=ref(dbRealtime,\"subjects\")\r\n         onValue(docRef,(snapshot)=>{\r\n             if(snapshot.exists()){\r\n                 const data=snapshot.val();\r\n                 setSubjectData(Object.values(data));\r\n             }else {\r\n                setSubjectData([]);\r\n             }\r\n             setLoading2(false)\r\n         })\r\n    }\r\n    const getSubjectFilterByClass=(subjectId)=>{\r\n         //realtime update\r\n         setLoading2(true);\r\n         const qRef=query(ref(dbRealtime,\"subjects/\"),orderByChild(\"class_id\"),equalTo(subjectId))\r\n         onValue(qRef,(snapshot)=>{\r\n             if(snapshot.exists()){\r\n                 const data=snapshot.val();\r\n                 setSubjectData(Object.values(data));\r\n                 console.log(subjectData)\r\n             }else {\r\n                setSubjectData([]);\r\n             }\r\n             setLoading2(false);\r\n         })\r\n    }\r\n\r\n// class name edit button click action\r\n    const handleEditCat=item=>{\r\n        setCategoryRecord(item);\r\n        setOpenClassDialog(true);\r\n    }\r\n   // subject edit click action\r\n   const handleSubjectEdit=item=>{\r\n        setSubjectRecord(item)\r\n        setOpenSubDialog(true);\r\n   } \r\n\r\n   const handleDeleteSubject=id=>{\r\n    console.log(\"id_\"+id);\r\n    setSubId(id);\r\n    setDelDialog(true);\r\n}\r\n\r\nconst handleClassFilter=(event)=>{\r\n    let id=event.target.value;\r\n    if(id!==\"\")\r\n        getSubjectFilterByClass(id)\r\n}\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n        getCategories();\r\n        getSubjects();\r\n    },[])\r\n\r\n  return (\r\n    <>\r\n    <ToastContainer/>\r\n        <PageTitle title=\"Manage Class & Subjects\"/>\r\n        <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={12} md={12} lg={6} xl={6}>\r\n                <Card>\r\n                    <CardHeader\r\n                        subheader=\"Manage Class\"\r\n                        action={\r\n                            <Button \r\n                                variant='outlined'\r\n                                endIcon={<Add/>}\r\n                                onClick={()=>{\r\n                                    setCategoryRecord(null);\r\n                                    setOpenClassDialog(true)\r\n                                }}\r\n                                >\r\n                               Add New \r\n                            </Button>\r\n                        }\r\n                    />\r\n                    <CardContent>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell><strong>Class Name</strong></TableCell>\r\n                                    <TableCell align=\"right\"><strong>Actions</strong></TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {loading1 && <CircularProgress sx={{m:5}}/>}\r\n                               {\r\n                                Object.values(classData).map((item)=>(\r\n                                <TableRow key={item.id}>\r\n                                    <TableCell>\r\n                                        {item.title}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">\r\n                                       <IconButton\r\n                                            color='primary'\r\n                                            onClick={\r\n                                                ()=>handleEditCat(item)\r\n                                            }\r\n                                        >\r\n                                            <Edit/>\r\n                                       </IconButton>\r\n                                       <IconButton \r\n                                         color='error'\r\n                                          disabled={true}\r\n                                        //   onClick={()=>handleDelete(item.id)}\r\n                                        //   ={item.id==\"subjects_10th\"?true:false}\r\n                                          >\r\n                                            <Delete/>\r\n                                       </IconButton>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                ))\r\n                               }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs={12} sm={12} md={12} lg={6} xl={6}>\r\n                <Card>\r\n                    <CardHeader\r\n                        subheader=\"Manage Subjects\"\r\n                        action={\r\n                            <Button \r\n                                variant='outlined' \r\n                                endIcon={<Add/>}\r\n                                onClick={()=>{\r\n                                    setOpenSubDialog(true)\r\n                                    setSubjectRecord(null);\r\n                                }\r\n                                }>\r\n                                    New Subject\r\n                            </Button>\r\n                        }\r\n                    />\r\n                    <CardContent>\r\n                        {/* filter by category */}\r\n                        <FormControl fullWidth>\r\n                        <InputLabel id=\"select-class-category\">Filter by Class</InputLabel>\r\n                              <Select\r\n                                  labelId=\"select-class-category\"\r\n                                  id=\"simple-select\"\r\n                                  name=\"class_id\"\r\n                                  label=\"Select Class Name\"\r\n                                  \r\n                                  onChange={handleClassFilter}>\r\n                                  <MenuItem value=\"\"><em>none</em></MenuItem>\r\n                                  {\r\n                                       Object.values(classData).map((item) => (\r\n                                          <MenuItem\r\n                                              value={item.id}\r\n                                          >\r\n                                              {item.title}\r\n                                          </MenuItem>\r\n                                      ))\r\n                                  }\r\n\r\n                              </Select>\r\n\r\n                        </FormControl>\r\n                        \r\n                    <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell><strong>Subject Name</strong></TableCell>\r\n                                    <TableCell align=\"right\"><strong>Actions</strong></TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {loading2 && <CircularProgress sx={{m:5}}/>}\r\n                                 { subjectData.length<=0?\r\n                                    <TableRow>\r\n                                        <TableCell colSpan=\"3\">\r\n                                           <Typography variant='body1'>No Data Found</Typography>\r\n                                        </TableCell>\r\n                                    </TableRow> :\"\"\r\n                                 }\r\n                               {\r\n                                subjectData.map((item)=>(\r\n                                <TableRow key={item.subject_id}>\r\n                                    <TableCell>\r\n                                        <Typography variant='subtitle'>{item.name}</Typography>\r\n                                        \r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">\r\n                                       <IconButton\r\n                                            color='primary'\r\n                                            onClick={\r\n                                                ()=>handleSubjectEdit(item)\r\n                                            }\r\n                                        >\r\n                                            <Edit/>\r\n                                       </IconButton>\r\n                                       <IconButton \r\n                                         color='error'\r\n                                          disabled={item.id==\"subjects_10th\"?true:false}\r\n                                          onClick={()=>handleDeleteSubject(item.subject_id)}\r\n                                          >\r\n                                            <Delete/>\r\n                                       </IconButton>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                ))\r\n                               }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </CardContent>\r\n                </Card>\r\n\r\n            </Grid>\r\n        </Grid>\r\n\r\n        <PopupDialog\r\n            title=\"Add/Update Class\"\r\n            openDialog={openClassDialog}\r\n            setOpenDialog={setOpenClassDialog}\r\n            maxWidth=\"lg\">\r\n            <CategoryForm\r\n                addOrEdit={addOrEditCategory}\r\n                recordForEdit={categoryRecord}/>\r\n         </PopupDialog>\r\n        <PopupDialog\r\n            title=\"Add / Update Subject\"\r\n            openDialog={openSubDialog}\r\n            setOpenDialog={setOpenSubDialog}\r\n            maxWidth=\"lg\"\r\n             >\r\n            <SubjectForm\r\n                addOrEdit={addOrEditSubject}\r\n                recordForEdit={subjectRecord}/>\r\n         </PopupDialog>\r\n\r\n         <DeleteDialog\r\n            title=\"Delete\"\r\n            openDialog={catDeleteDialog}\r\n            setOpenDialog={setCatDeleteDialog}\r\n            onAction={onDeleteCategory}/>\r\n\r\n         <DeleteDialog\r\n            title=\"Delete\"\r\n            openDialog={subDelDialog}\r\n            setOpenDialog={setDelDialog}\r\n            onAction={onDeleteSubject}/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ManageClassAndSubject","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\manageEbooks\\ManageEbooks.jsx",["497","498","499"],"import { Add } from '@material-ui/icons'\r\nimport { Button, Grid, Typography } from '@mui/material'\r\nimport { collection,deleteDoc, doc, onSnapshot, query, setDoc, Timestamp, updateDoc } from 'firebase/firestore'\r\nimport React from 'react'\r\nimport { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport PopupDialog from '../../components/Dialogs/PopupDialog'\r\nimport DeleteDialog from '../../components/Dialogs/DeleteDialog'\r\nimport PageTitle from '../../components/PageTitle/PageTitle'\r\nimport { dbFirestore } from '../../firebase/FirebaseConfig'\r\nimport AddOrEditEbookForm from './components/AddOrEditEbookForm'\r\nimport EbookCardItem from './components/EbookCardItem'\r\n\r\nfunction ManageEbooks() {\r\n    //dialog hooks\r\n   const [openDialog,setOpenDialog]=useState(false)\r\n   const [openDeleteDialog,setOpenDeleteDialog]=useState(false);\r\n\r\n   //data hooks\r\n   const [recordForEdit,setRecordForEdit]=useState(null);\r\n   const [ebookData,setEbookData]=useState([]);\r\n   const [ebookId,setEbookId]=useState(\"\");\r\n   \r\n   //progress hooks\r\n   const [loading,setLoading]=useState(false)\r\n   const [submitProgress,setSubmitProgress]=useState(false);\r\n\r\n\r\n\r\n   //methods\r\n   const addOrEdit=async (id,data,resetForm)=>{\r\n    if(id==undefined || id==\"\"){\r\n        //add record\r\n        try {\r\n            setSubmitProgress(true)\r\n            const docRef=doc(collection(dbFirestore,\"PDF_BOOKS\"))\r\n            await setDoc(docRef,{\r\n                id:docRef.id,\r\n                timestamp:Timestamp.now(),\r\n                className:data.className,\r\n                class_id:data.class_id,\r\n                subjectName:data.subjectName,\r\n                subject_id:data.subject_id,\r\n                paid:data.paid,\r\n                pdfUrl:data.pdfUrl,\r\n                price:parseInt(data.price),\r\n                title:data.title,\r\n                image:data.image,\r\n                type:data.type\r\n                \r\n            })\r\n            toast.success(\"Record added successfully\");\r\n            resetForm();\r\n            setOpenDialog(false);\r\n            setSubmitProgress(false)\r\n        } catch (error) {\r\n            toast.error(\"Something went wrong\"+error)\r\n            setSubmitProgress(false)\r\n        }\r\n    }\r\n    else {\r\n        //update record\r\n        console.log(id);\r\n        try {\r\n            setSubmitProgress(true)\r\n            const docRef=doc(dbFirestore,\"PDF_BOOKS\",id)\r\n            await updateDoc(docRef,{\r\n                modifiedAt:Timestamp.now(),\r\n                className:data.className,\r\n                class_id:data.class_id,\r\n                subjectName:data.subjectName,\r\n                subject_id:data.subject_id,\r\n                paid:data.paid,\r\n                pdfUrl:data.pdfUrl,\r\n                price:parseInt(data.price),\r\n                title:data.title,\r\n                image:data.image,\r\n                type:data.type\r\n            })\r\n            toast.success(\"Record updated successfully\");\r\n            resetForm();\r\n            setOpenDialog(false);\r\n            setSubmitProgress(false)\r\n        } catch (error) {\r\n            toast.error(\"Something went wrong\"+error)\r\n            setSubmitProgress(false)\r\n        }\r\n    }\r\n   }\r\n\r\n   //edit \r\n   const handleEdit=item=>{\r\n    setOpenDialog(true);\r\n    setRecordForEdit(item)\r\n    console.log(item);\r\n   }\r\n   const handleDelete=id=>{\r\n    setEbookId(id)\r\n    setOpenDeleteDialog(true)\r\n}\r\n\r\n//onDelete Video\r\nconst onDelete=async ()=>{\r\n    if(ebookId!=\"\"){\r\n        //delete document\r\n        try {\r\n            const docRef=doc(dbFirestore,\"PDF_BOOKS\",ebookId)\r\n            await deleteDoc(docRef)\r\n            toast.success(\"Record has been deleted\");\r\n            setOpenDeleteDialog(false)\r\n        } catch (error) {\r\n            console.log(error)\r\n            toast.error(\"Error!\")\r\n            setOpenDeleteDialog(false)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n   useEffect(()=>{\r\n    setLoading(true);\r\n\r\n    const cRef=query(collection(dbFirestore,\"PDF_BOOKS\"))\r\n    onSnapshot(cRef,(snapshot)=>{\r\n        setEbookData(snapshot.docs.map(doc=>({\r\n        id:doc.id,\r\n        data:doc.data()\r\n       })));\r\n       setLoading(false);\r\n    });\r\n},[])\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n    <ToastContainer/>\r\n        <PageTitle title=\"Manage Ebooks / Pdfs\"\r\n            button={\r\n                <Button \r\n                    variant='contained'\r\n                    endIcon={<Add/>}\r\n                    onClick={()=>{\r\n                        setRecordForEdit(null)\r\n                        setOpenDialog(true);\r\n                    }}\r\n                    >\r\n                    Add ebook / Pdf\r\n                </Button>\r\n            }/>\r\n\r\n            {/* render ebook Card Item */}\r\n            <Grid container spacing={2}>\r\n                {!loading && ebookData.length>0?\r\n                 <>\r\n                    { ebookData.map((item)=>(\r\n                        <Grid item key={item.id} xs={12} sm={6} md={4} lg={3} xl={3}>\r\n                            \r\n                            <EbookCardItem\r\n                                item={item}\r\n                                handleEdit={handleEdit}\r\n                                handleDelete={handleDelete}\r\n                                />\r\n                        </Grid>\r\n                    ))}\r\n                 </>\r\n                :<Typography variant='h5'>No Content Found.</Typography>}\r\n            </Grid>\r\n\r\n\r\n\r\n            <PopupDialog\r\n                title=\"Add / Update File\"\r\n                openDialog={openDialog}\r\n                setOpenDialog={setOpenDialog}\r\n                maxWidth=\"lg\"\r\n                disableBackdropClick={true}>\r\n                    <AddOrEditEbookForm\r\n                        recordForEdit={recordForEdit}\r\n                        addOrEdit={addOrEdit}\r\n                        submitProgress={submitProgress}\r\n                        />\r\n\r\n                </PopupDialog>\r\n\r\n                <DeleteDialog\r\n                    title=\"Delete\"\r\n                    openDialog={openDeleteDialog}\r\n                    setOpenDialog={setOpenDeleteDialog}\r\n                    onAction={onDelete}/>\r\n                \r\n    </>\r\n  )\r\n}\r\n\r\nexport default ManageEbooks","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\AppSlider\\AppSlider.jsx",["500","501","502"],"import { Delete, Edit } from '@material-ui/icons';\r\nimport { Button, Paper, Table, TableBody, TableCell, TableHead, TableRow, Typography } from '@mui/material';\r\nimport { onValue, ref } from 'firebase/database';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport DeleteDialog from '../../components/Dialogs/DeleteDialog';\r\nimport PopupDialog from '../../components/Dialogs/PopupDialog';\r\nimport PageTitle from '../../components/PageTitle/PageTitle';\r\nimport { dbRealtime } from '../../firebase/FirebaseConfig';\r\nimport { addAppSlider, deleteAppSlider, editAppSlider } from '../../services/Api';\r\nimport SlideAddOrEditForm from './components/SlideAddOrEditForm';\r\n\r\n\r\nfunction AppSlider() {\r\n  \r\n  //data hooks\r\n  const [slideData,setSlideData]=useState([]);\r\n  const [recordForEdit,setRecordForEdit]=useState([]);\r\n  const [sid,setSid]=useState(\"\");\r\n\r\n  //dialog hooks\r\n  const [openDialog,setOpenDialog]=useState(false);\r\n  const [deleteDialog,setDeleteDialog]=useState(false);\r\n\r\n  //loading hook\r\n  const [loading,setLoading]=useState(false);\r\n  const [progress,setProgress]=useState(false);\r\n\r\n  const addOrEdit=(id,data,resetForm)=>{\r\n    if(id===undefined || id===null){\r\n      console.log(id)\r\n      setProgress(true);\r\n      //add\r\n      addAppSlider(data).then(()=>{\r\n        toast.success(\"Data added successfully\")\r\n        setProgress(false)\r\n        setOpenDialog(false)\r\n        resetForm();\r\n\r\n      }).catch((error)=>{\r\n        toast.error(\"Error! \"+error);\r\n        setProgress(false)\r\n      })\r\n    }else {\r\n      //update\r\n      editAppSlider(id,data).then(()=>{\r\n        toast.success(\"Data edit successfully\")\r\n        setProgress(false)\r\n        setOpenDialog(false)\r\n        resetForm();\r\n      }).catch((error)=>{\r\n        toast.error(\"Error! \"+error);\r\n        setProgress(false)\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleDelete=id=>{\r\n    setSid(id);\r\n    setDeleteDialog(true)\r\n  }\r\n\r\n  const actionDelete=()=>{\r\n    if(sid!=\"\"){\r\n      deleteAppSlider(sid).then(()=>{\r\n        toast.success(\"Deleted\");\r\n        setDeleteDialog(false);\r\n\r\n      }).catch((error)=>{\r\n        toast.error(\"error\"+error)\r\n        setDeleteDialog(false)\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  useEffect(()=>{\r\n\r\n    const docRef=ref(dbRealtime,\"imageSlider\")\r\n         onValue(docRef,(snapshot)=>{\r\n             if(snapshot.exists()){\r\n                 const data=snapshot.val();\r\n                 setSlideData(Object.values(data));\r\n             }else {\r\n              setSlideData([]);\r\n             }\r\n             setLoading(false)\r\n         });\r\n\r\n  },[])\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n    <ToastContainer/>\r\n      <PageTitle title=\"App Slider\"\r\n        button={\r\n          <Button \r\n            variant='contained'\r\n            onClick={()=>{\r\n              setOpenDialog(true)\r\n              setRecordForEdit(null);\r\n            }}\r\n            >\r\n              Add New Slide\r\n            </Button>\r\n        }/>\r\n\r\n        <Paper>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Image</TableCell>\r\n                <TableCell>Action Url</TableCell>              \r\n                <TableCell>Edit</TableCell>              \r\n                <TableCell>Delete</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n               {\r\n                slideData.map((item)=>(\r\n                  <TableRow>\r\n                    <TableCell>\r\n                      <img src={item.image} alt=\"Slide Image\" width=\"360px\" height=\"180px\"/>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant='body1'>{item.click_action}</Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Button \r\n                        variant='outlined' color='success' startIcon={<Edit/>}\r\n                        onClick={()=>{\r\n                          setRecordForEdit(item);\r\n                          setOpenDialog(true);\r\n                        }\r\n                        }\r\n                      >\r\n                        Edit\r\n                      </Button>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Button variant='outlined' color='error' startIcon={<Delete/>}\r\n                        onClick={()=>handleDelete(item.slide_id)}>\r\n                          Delete\r\n                        </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))\r\n               }\r\n            </TableBody>\r\n          </Table>\r\n        </Paper>\r\n\r\n        <PopupDialog\r\n          title=\"Add/Update Slider\"\r\n          openDialog={openDialog}\r\n          setOpenDialog={setOpenDialog}\r\n          maxWidth=\"lg\">\r\n              <SlideAddOrEditForm\r\n                addOrEdit={addOrEdit}\r\n                recordForEdit={recordForEdit}\r\n                progress={progress}/>\r\n\r\n          </PopupDialog>\r\n\r\n          <DeleteDialog\r\n           title=\"Delete\"\r\n           openDialog={deleteDialog}\r\n           setOpenDialog={setDeleteDialog}\r\n           onAction={actionDelete}/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AppSlider","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\users\\Users.jsx",["503","504","505"],"import { collection, onSnapshot, orderBy, query } from 'firebase/firestore';\r\nimport React, { useMemo } from 'react'\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react'\r\nimport { dbFirestore } from '../../firebase/FirebaseConfig';\r\nimport PageTitle from '../../components/PageTitle/PageTitle';\r\nimport { Avatar, Button } from '@mui/material';\r\nimport { CircularProgress } from '@mui/material';\r\nimport MUIDataTable from 'mui-datatables';\r\n\r\n\r\nfunction Users() {\r\n    const [loading, setLoading] = useState(true);\r\n    //data state\r\n    const [users, setUsers] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const qRef = query(collection(dbFirestore, \"USERS_2.0\"), orderBy(\"registeredAt\", \"asc\"))\r\n        const unsubscribe = onSnapshot(qRef, (snapshot) => {\r\n            setUsers(snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                name: doc.data().name,\r\n                phone: doc.data().phone,\r\n                email: doc.data().email,\r\n                // profilePhoto: <Avatar src={doc.data().profilePhoto} />,\r\n                registeredAt: doc.data().registeredAt.toDate().toLocaleDateString(\"en-GB\"),\r\n                lastLoggedIn: timestampToDateAndTime(doc.data().lastLoggedIn)\r\n            })))\r\n            setLoading(false)\r\n        });\r\n        return unsubscribe\r\n    }, [])\r\n\r\n\r\n\r\n    const timestampToDateAndTime = (timestamp) => {\r\n        // Convert to a JavaScript Date object:\r\n        const jsDate = timestamp.toDate();\r\n\r\n        // Format the date and time using the JavaScript Intl API:\r\n        const options = {\r\n            year: '2-digit',\r\n            month: '2-digit',\r\n            day: '2-digit',\r\n            hour: '2-digit',\r\n            minute: '2-digit',\r\n            second: '2-digit',\r\n            hour12: false\r\n        };\r\n        return new Intl.DateTimeFormat('en-In', options).format(jsDate);\r\n        \r\n    }\r\n\r\n\r\n\r\n    const columns = [\r\n        {\r\n          label: \"Name\",\r\n          name: \"name\",\r\n        },\r\n        {\r\n          label: \"Email\",\r\n          name: \"email\",\r\n        },\r\n        {\r\n            name: 'phone', \r\n            label: 'Phone',\r\n        },\r\n        {  \r\n            name: \"registeredAt\",\r\n            label: 'Registered At',\r\n        },\r\n        {\r\n            name: \"lastLoggedIn\",\r\n            label: 'Last LoggedIn',\r\n        },\r\n        {\r\n            name: \"id\",\r\n            label: 'User Id',\r\n\r\n        },\r\n      ];\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n            <PageTitle title=\"Registered Users\" />\r\n\r\n            <div style={{ width: \"100%\", textAlign: \"center\" }}>\r\n                {loading ? <CircularProgress /> : \"\"}\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                columns={columns}\r\n                data={users}/>\r\n\r\n      \r\n\r\n       </>\r\n    )\r\n}\r\n\r\nexport default Users","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\freeVideos\\FreeVideos.jsx",["506","507","508","509"],"import { AddCardOutlined, AddCircleOutline } from '@mui/icons-material'\r\nimport { Button, CircularProgress, Grid, Typography } from '@mui/material'\r\nimport { collection, deleteDoc, doc, onSnapshot, query, setDoc, Timestamp, updateDoc } from 'firebase/firestore'\r\nimport React, { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport PopupDialog from '../../components/Dialogs/PopupDialog'\r\nimport DeleteDialog from '../../components/Dialogs/DeleteDialog'\r\nimport PageTitle from '../../components/PageTitle/PageTitle'\r\nimport { dbFirestore } from '../../firebase/FirebaseConfig'\r\nimport AddOrEditFreeVideoForm from './components/AddOrEditFreeVideoForm'\r\nimport VideoCardItem from './components/VideoCardItem'\r\nimport { async } from '@firebase/util'\r\n\r\nfunction FreeVideos() {\r\n    //dialog hooks\r\n    const [openDialog,setOpenDialog]=useState(false);\r\n    const [openDeleteDialog,setOpenDeleteDialog]=useState(false);\r\n\r\n    //data hooks\r\n    const [recordForEdit,setRecordForEdit]=useState(null);\r\n    const [videosData,setVideosData]=useState([]);\r\n    const [vidId,setVidId]=useState(\"\");\r\n\r\n    //progress hooks\r\n    const [submitProgress,setSubmitProgress]=useState(false)\r\n    const [loading,setLoading]=useState(false);\r\n\r\n\r\n    //methods\r\n    const addOrEdit=async (id,data,resetForm)=>{\r\n        setSubmitProgress(true)\r\n        if(id===undefined || id===\"\" ){\r\n            try {\r\n                const docRef=doc(collection(dbFirestore,\"FREE_VIDEOS\"));\r\n                await setDoc(docRef,{\r\n                    timestamp:Timestamp.now(),\r\n                    video_id:docRef.id,\r\n                    ...data\r\n                });\r\n            //toast \r\n            toast.success(\"Video added successfully.\")\r\n            setOpenDialog(false);\r\n            resetForm();\r\n            setSubmitProgress(false)\r\n            } catch (error) {\r\n                toast.error(\"something went wrong.\")\r\n                console.log(error);\r\n                setSubmitProgress(false)\r\n            }\r\n        }else {\r\n            //update \r\n            const docRef = doc(dbFirestore, \"FREE_VIDEOS\",id);\r\n            try {\r\n                //Update data\r\n             await updateDoc(docRef, {\r\n                ...data\r\n            }) \r\n            \r\n            toast.success(\"Video updated successfully.\")\r\n            setOpenDialog(false);\r\n            resetForm();\r\n            setSubmitProgress(false)\r\n            } catch (error) {\r\n                console.log( error);\r\n                toast.error(\"something went wrong.\")\r\n                setSubmitProgress(false)\r\n            }\r\n        } \r\n    }\r\n\r\n    //handle card button clicks\r\n    const handleEditVideo=item=>{\r\n        setOpenDialog(true);\r\n        setRecordForEdit(item)\r\n    }\r\n    const handleDelete=id=>{\r\n        setVidId(id)\r\n        setOpenDeleteDialog(true)\r\n    }\r\n\r\n\r\n  \r\n\r\n    //onDelete Video\r\n    const onDelete=async ()=>{\r\n        if(vidId!=\"\"){\r\n            //delete document\r\n            try {\r\n                const docRef=doc(dbFirestore,\"FREE_VIDEOS\",vidId)\r\n                await deleteDoc(docRef)\r\n                toast.success(\"Record has been deleted\");\r\n                setOpenDeleteDialog(false)\r\n            } catch (error) {\r\n                console.log(error)\r\n                toast.error(\"Error!\")\r\n                setOpenDeleteDialog(false)\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        setLoading(true);\r\n        const cRef=query(collection(dbFirestore,\"FREE_VIDEOS\"))\r\n        onSnapshot(cRef,(snapshot)=>{\r\n            setVideosData(snapshot.docs.map(doc=>({\r\n            id:doc.id,\r\n            data:doc.data()\r\n           })));\r\n           setLoading(false);\r\n        });\r\n    },[])\r\n\r\n  return (\r\n    <>\r\n    <ToastContainer/>\r\n        <PageTitle title=\"Free Videos\"\r\n            button={\r\n                <Button variant='contained'\r\n                    endIcon={<AddCircleOutline/>}\r\n                    onClick={()=>{\r\n                        setOpenDialog(true)\r\n                        setRecordForEdit(null);\r\n                    }}>\r\n                        Add Video\r\n                    </Button>\r\n            }/>\r\n\r\n            {/* Card Content */}\r\n            {loading && <div style={{display:\"flex\",justifyContent:\"center\"}}><CircularProgress/></div>}\r\n            {\r\n                !loading && videosData.length==0? \r\n                    <Typography variant='h5'>No Videos found</Typography>:\r\n                    <Grid container spacing={2}>\r\n                {\r\n                    videosData.map((item)=>(\r\n                        <Grid item xs={12} sm={6} md={4} lg={3} xl={3} key={item.id}>\r\n                            <VideoCardItem \r\n                                item={item}\r\n                                handleEditVideo={handleEditVideo}\r\n                                handleDelete={handleDelete}\r\n                            />\r\n                        </Grid>\r\n                    ))\r\n                }\r\n            </Grid>\r\n            }\r\n\r\n\r\n            <PopupDialog\r\n                title=\"Add/Update Video\"\r\n                openDialog={openDialog}\r\n                setOpenDialog={setOpenDialog}\r\n                disableBackdropClick={true}\r\n                maxWidth=\"lg\">\r\n                    <AddOrEditFreeVideoForm\r\n                        recordForEdit={recordForEdit}\r\n                        addOrEdit={addOrEdit}\r\n                        submitProgress={submitProgress}/>\r\n                </PopupDialog>\r\n\r\n                <DeleteDialog\r\n                    title=\"Delete\"\r\n                    openDialog={openDeleteDialog}\r\n                    setOpenDialog={setOpenDeleteDialog}\r\n                    onAction={onDelete}/>\r\n                    \r\n         \r\n    </>\r\n  )\r\n}\r\n\r\nexport default FreeVideos","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\firebase\\FirebaseConfig.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\freeVideos\\components\\VideoCardItem.jsx",["510","511"],"import { LinkOffRounded, LinkOutlined } from '@material-ui/icons'\r\nimport { Delete, Edit, MoreVertOutlined, PlayCircle } from '@mui/icons-material'\r\nimport { Avatar, Card, CardContent, CardHeader, CardMedia, Chip, IconButton, ListItemIcon, ListItemText, Menu, MenuItem } from '@mui/material'\r\nimport { red } from '@mui/material/colors'\r\nimport React from 'react'\r\nimport { useState } from 'react'\r\nimport PopupDialog from '../../../components/Dialogs/PopupDialog'\r\nimport studyPlusLogo from \"../../../images/study_plus.png\"\r\nimport { createDynamicLink } from '../../../services/Utils'\r\nimport PlayVideo from './PlayVideo'\r\n\r\nfunction VideoCardItem(props) {\r\n    const {item,handleEditVideo,handleDelete,handlePlay}=props\r\n    const [anchorEl, setAnchorEl]=useState(null);\r\n\r\n    //dialog hooks\r\n    const [vidPlayDialog,setVidPlayDialog]=useState(false);\r\n\r\n    const open = Boolean(anchorEl);\r\n    const handleClick = (event) => {\r\n      setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n      setAnchorEl(null);\r\n    };\r\n\r\n\r\n  return (\r\n    <Card>\r\n        <CardMedia\r\n          sx={{height:140}}\r\n          image={item.data.thumbnail_url}\r\n          title={item.data.title}\r\n         \r\n        />\r\n        <CardHeader\r\n            title={item.data.title}\r\n            subheader={`${item.data.className}, ${item.data.subjectName}`}\r\n            avatar={\r\n                <Avatar sx={{ bgcolor: red[500] }} \r\n                    aria-label=\"recipe\"\r\n                    src={studyPlusLogo}\r\n                    />\r\n                 \r\n            }\r\n            action={\r\n                <IconButton aria-label='action'\r\n                onClick={handleClick}\r\n                >\r\n                    <MoreVertOutlined/>\r\n                </IconButton>\r\n            }\r\n        />\r\n\r\n        {item.data.liveVideo && \r\n        <CardContent>\r\n            <Chip label=\"LIVE\" color='error'/>\r\n        </CardContent>\r\n        }\r\n\r\n          <Menu\r\n              id=\"basic-menu\"\r\n              anchorEl={anchorEl}\r\n              open={open}\r\n              onClose={handleClose}\r\n              disableEnforceFocus\r\n              MenuListProps={{\r\n                  'aria-labelledby': 'basic-button',\r\n              }}\r\n          >\r\n              <MenuItem onClick={()=>createDynamicLink(\r\n                item.id,\r\n                item.data.title,\r\n                `${item.data.title} | ${item.data.className}, ${item.data.subjectName}`,\r\n                item.data.thumbnail_url,\r\n                item.data.liveVideo?\"liveVideo\":\"freeVideo\"\r\n                \r\n              )}>\r\n                  <ListItemIcon>\r\n                      <LinkOutlined />\r\n                  </ListItemIcon>\r\n                  <ListItemText>\r\n                      Copy Link\r\n                  </ListItemText>\r\n              </MenuItem>\r\n\r\n              <MenuItem onClick={()=>setVidPlayDialog(true)}>\r\n                  <ListItemIcon>\r\n                      <PlayCircle />\r\n                  </ListItemIcon>\r\n                  <ListItemText>\r\n                      Play\r\n                  </ListItemText>\r\n              </MenuItem>\r\n              \r\n              <MenuItem onClick={()=>handleEditVideo(item.data)}>\r\n                  <ListItemIcon>\r\n                      <Edit />\r\n                  </ListItemIcon>\r\n                  <ListItemText>\r\n                      Edit\r\n                  </ListItemText>\r\n              </MenuItem>\r\n              <MenuItem onClick={()=>handleDelete(item.id)}>\r\n                  <ListItemIcon>\r\n                      <Delete />\r\n                  </ListItemIcon>\r\n                  <ListItemText>\r\n                      Delete\r\n                  </ListItemText>\r\n              </MenuItem>\r\n\r\n          </Menu>\r\n\r\n    <PopupDialog\r\n        title=\"VideoPlayer\"\r\n        openDialog={vidPlayDialog}\r\n        setOpenDialog={setVidPlayDialog}\r\n        maxWidth=\"lg\">\r\n            <PlayVideo videoUrl={item.data.videoUrl}/>\r\n        </PopupDialog>\r\n\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default VideoCardItem","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\freeVideos\\components\\AddOrEditFreeVideoForm.jsx",["512","513","514","515","516","517","518","519","520"],"import { CircularProgress, Grid, IconButton, InputAdornment, TextField } from '@material-ui/core'\r\nimport { CloudUploadOutlined } from '@material-ui/icons'\r\nimport { Box, Button, FormControl, FormControlLabel, FormHelperText, InputLabel, MenuItem, Select, Switch } from '@mui/material'\r\nimport { Stack } from '@mui/system'\r\nimport { getDownloadURL, ref as storageRef, uploadBytesResumable } from 'firebase/storage'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport LinearProgressWithLabel from '../../../components/ProgressBar/LinearProgressWithLabel'\r\n\r\nimport { AddPhotoAlternate } from '@mui/icons-material'\r\nimport { child, equalTo, get, onValue, orderByChild, query, ref } from 'firebase/database'\r\n\r\nimport { dbRealtime, storage } from '../../../firebase/FirebaseConfig'\r\nimport { Form, useForm } from '../../../components/helper/useForm'\r\nimport Controls from '../../../components/controls/Controls'\r\nimport YouTube from 'react-youtube'\r\nimport guideYtVideoIdImg from \"../../../images/guideYoutubeId.png\"\r\n\r\nconst dummyimage = \"https://dummyimage.com/600x400/a1a1a1/e8e8e8.jpg&text=No+Image\";\r\n\r\n\r\nconst initialValue = {\r\n    class_id: \"\",\r\n    subject_id: \"\",\r\n    title: \"\",\r\n    video_length: 0,\r\n    videoLengthStr: \"\",\r\n    thumbnail_url: dummyimage,\r\n    videoUrl: \"\",\r\n    validVideo: false,\r\n    youtubePlayer: false,\r\n    ytVideoId: \"\"\r\n}\r\n\r\nfunction AddOrEditFreeVideoForm(props) {\r\n    const { recordForEdit, addOrEdit, submitProgress } = props\r\n\r\n    const [progress, setProgress] = useState(false)\r\n    const [progress2, setProgress2] = useState(false)\r\n    const [uploadProgress, setUploadProgress] = useState(0);\r\n \r\n\r\n    //data states\r\n    const [categoryData, setCategoryData] = useState([]);\r\n    const [subjectData, setSubjectData] = useState([]);\r\n\r\n    //states\r\n    const [classState,setClassState]=useState(\"\");\r\n    const [subjectState,setSubjectState]=useState(\r\n            recordForEdit?JSON.stringify({\r\n                id:recordForEdit.subject_id,\r\n                name:recordForEdit.subjectName\r\n            }):\"\"\r\n        )\r\n   \r\n    const [checked,setChecked]=useState(\r\n        recordForEdit?recordForEdit.liveVideo:false\r\n    );\r\n\r\n     const [ytPlayer, setYtPlayer] = useState(false);\r\n\r\n\r\n    const videoRef = useRef(null)\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('title' in fieldValues)\r\n            temp.title = fieldValues.title ? \"\" : \"This field is required.\"\r\n\r\n        if ('subtitle' in fieldValues)\r\n            temp.subtitle = fieldValues.subtitle ? \"\" : \"This field is required.\"\r\n\r\n         if(!ytPlayer){\r\n                if ('videoUrl' in fieldValues)\r\n                temp.videoUrl = fieldValues.videoUrl ? \"\" : \"Please upload a video or paste video url\"\r\n    \r\n                if ('validVideo' in fieldValues)\r\n                temp.validVideo = fieldValues.validVideo ? \"\" : toast.error(\"Please upload a valid video\")\r\n    \r\n            }else {\r\n                if ('ytVideoId' in fieldValues)\r\n                    temp.ytVideoId = fieldValues.ytVideoId ? \"\" : \"Paste Youtube Video Id!\"\r\n    \r\n            }\r\n\r\n        if ('class_id' in fieldValues)\r\n            temp.class_id = fieldValues.class_id ? \"\" : \"This field is required.\"\r\n\r\n        if ('subject_id' in fieldValues)\r\n            temp.subject_id = fieldValues.subject_id ? \"\" : \"This field is required.\"\r\n\r\n\r\n        setErrors({\r\n            ...temp\r\n        })\r\n       \r\n\r\n        if (fieldValues == values)\r\n            return Object.values(temp).every(x => x == \"\")\r\n    }\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm } = useForm(initialValue, true, validate)\r\n\r\n\r\n    const handleImageChooser = (event) => {\r\n        if (event.target.files && event.target.files[0]) {\r\n            let img = event.target.files[0]\r\n            uploadImage(img);\r\n        }\r\n    }\r\n    const handleVideoChooser = (event) => {\r\n        if (event.target.files && event.target.files[0]) {\r\n            const video = event.target.files[0];\r\n            videoRef.current.load();\r\n            uploadVideo(video);\r\n        }\r\n    }\r\n\r\n    const handleVideoMetaData = () => {\r\n\r\n        const video = videoRef.current;\r\n        const formattedDuration = formatDuration(video.duration)\r\n\r\n        setValues({\r\n            ...values,\r\n            videoLengthStr: formattedDuration,\r\n            video_length: Math.floor(video.duration),\r\n            validVideo: true\r\n        });\r\n\r\n\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (validate()) {\r\n            addOrEdit(values.video_id, values, resetForm)\r\n        }\r\n    }\r\n\r\n      const handleSwitch=(event)=>{\r\n        const checked=event.target.checked;\r\n        setChecked(checked)\r\n        setValues({...values,liveVideo:checked})\r\n    \r\n     }\r\n\r\n     const handlePlayerSwitch = (event) => {\r\n        const checked = event.target.checked;\r\n        setYtPlayer(checked)\r\n        setValues({ ...values, youtubePlayer: checked,validVideo:true })\r\n        setErrors({ ...errors })\r\n    }\r\n\r\n\r\n    //upload video\r\n\r\n    const uploadVideo = (file) => {\r\n        if (!file) {\r\n            toast.error(\"Please select a file first\");\r\n            return\r\n        }\r\n        setProgress(true)\r\n        const fileName = `${file.name}_${Date.now()}`;\r\n        const sf = storageRef(storage, `/freeVideos/${fileName}`)\r\n        const uploadTask = uploadBytesResumable(sf, file)\r\n        uploadTask.on(\"state_changed\", (snapshot) => {\r\n            const percent = (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n            setUploadProgress(percent)\r\n\r\n        }, (err) => console.log(err),\r\n            () => {\r\n                //get download url\r\n                setProgress(false)\r\n                getDownloadURL(uploadTask.snapshot.ref).then((url) => {\r\n                    setValues(prev => ({\r\n                        ...prev,\r\n                        videoUrl: url\r\n                    }))\r\n                    //now load video into player\r\n                    videoRef.current?.load();\r\n\r\n                })\r\n\r\n            }\r\n        );\r\n    }\r\n\r\n    //upload Image \r\n    const uploadImage = async (file) => {\r\n        if (!file) {\r\n            toast.error(\"Please select a file first\");\r\n            return\r\n        }\r\n        setProgress2(true)\r\n        const fileName = `${file.name}_${Date.now()}`;\r\n        const sf = storageRef(storage, `/thumbnails/${fileName}`)\r\n        const uploadTask = uploadBytesResumable(sf, file)\r\n        uploadTask.on(\"state_changed\", (snapshot) => {\r\n            const percent = (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n            setUploadProgress(percent)\r\n\r\n        }, (err) => console.log(err),\r\n            () => {\r\n                //get download url\r\n                setProgress2(false)\r\n                getDownloadURL(uploadTask.snapshot.ref).then((url) => {\r\n                    setValues({ ...values, thumbnail_url: url })\r\n                })\r\n            }\r\n        );\r\n    }\r\n\r\n    function formatDuration(duration) {\r\n        const minutes = Math.floor(duration / 60);\r\n        const seconds = Math.floor(duration % 60);\r\n        return `${minutes} min ${seconds} sec`;\r\n    }\r\n\r\n    //handle filter inputs\r\n    const handleClassSelector = (event) => {\r\n        const v = event.target.value;\r\n        if (v != \"\") {\r\n            setClassState(v)\r\n            const jVal=JSON.parse(v);\r\n            const id=jVal.id;\r\n            const title=jVal.title;\r\n            setSubjectData([]);\r\n            getSubjects(id);\r\n            //update value of class_id\r\n            setValues({\r\n                ...values,\r\n                class_id: id,\r\n                className:title\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleSubjectSelector=(event)=>{\r\n        const v = event.target.value;\r\n        if (v != \"\") {\r\n            console.log(v);\r\n            setSubjectState(v)\r\n            const jVal=JSON.parse(v);\r\n            const id=jVal.id;\r\n            const name=jVal.name;\r\n           \r\n            //update value of subject\r\n            setValues({\r\n                ...values,\r\n               subject_id:id,\r\n               subjectName:name\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    //get subjects\r\n    const getSubjects = (id) => {\r\n        const qRef = query(ref(dbRealtime, \"/subjects\"), orderByChild(\"class_id\"), equalTo(id))\r\n        onValue(qRef, (snapshot) => {\r\n            if (snapshot.exists()) {\r\n                const data = snapshot.val();\r\n                setSubjectData(Object.values(data))\r\n                console.log(subjectData);\r\n            } else {\r\n                setSubjectData([]);\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    // useEffect hooks\r\n    useEffect(()=>{\r\n        if(recordForEdit!=null){\r\n            setValues({...recordForEdit})\r\n            //set state\r\n            setClassState(JSON.stringify(\r\n                {\r\n                    id:recordForEdit.class_id,\r\n                    title:recordForEdit.className\r\n                }\r\n            ));\r\n\r\n            setYtPlayer(recordForEdit?.youtubePlayer)\r\n       \r\n        }\r\n    },[recordForEdit])  \r\n\r\n    useEffect(() => {\r\n        const getBoardClass = () => {\r\n            const dbRef = ref(dbRealtime);\r\n            get(child(dbRef, \"/boardClass/\")).then((snapshot) => {\r\n                if (snapshot.exists()) {\r\n                    const data = snapshot.val();\r\n                    setCategoryData(Object.values(data));\r\n                    console.log(data)\r\n                } else {\r\n                    console.log(\"No data found\");\r\n                }\r\n            }).catch((error) => {\r\n                console.log(error);\r\n            })\r\n        }\r\n\r\n        getBoardClass();\r\n       \r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (values.class_id != \"\" && values.class_id != undefined) {\r\n            getSubjects(values.class_id);\r\n        }\r\n    }, [values.class_id])\r\n\r\n\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={12} sm={12} md={8} lg={10}>\r\n                <FormControlLabel\r\n                            value=\"start\"\r\n                            control={\r\n                                <Switch color=\"primary\"\r\n                                    checked={ytPlayer}\r\n                                    onChange={handlePlayerSwitch}\r\n                                />\r\n                            }\r\n                            label={ytPlayer ? \"Youtube Video\" : \"Regular Video\"}\r\n                            labelPlacement=\"start\" />\r\n                    {\r\n                        ytPlayer? \r\n                        <>\r\n\r\n                        \r\n                       \r\n                          <YouTube\r\n                            videoId={values.ytVideoId}\r\n                            id=\"youtube player\"\r\n                            title=\"Youtube Player\"\r\n                            opts={{\r\n                                width:\"590\",\r\n                                height:\"390\",\r\n                                playerVars: {\r\n                                    // https://developers.google.com/youtube/player_parameters\r\n                                    autoplay: 1,\r\n                                  }\r\n                            }}/>\r\n                        </> : <>\r\n                    <video\r\n                        width=\"100%\" height=\"300\" controls\r\n                        onLoadedMetadata={handleVideoMetaData}\r\n                        ref={videoRef}\r\n                        autoPlay >\r\n                        <source src={values.videoUrl} type='video/mp4' />\r\n                        Your browser does not support the video tag.\r\n                    </video>\r\n                    {progress && <LinearProgressWithLabel value={uploadProgress} />}\r\n\r\n                    </> }\r\n\r\n                    </Grid>\r\n                <Grid item xs={12} sm={12} md={4} lg={2}>\r\n                    \r\n                {!ytPlayer && <>\r\n                        { progress ? <CircularProgress /> : <Button\r\n                        fullWidth\r\n                        variant='outlined'\r\n                        color='primary'\r\n                        component=\"label\"\r\n                        endIcon={<CloudUploadOutlined />}>\r\n                        Upload\r\n                        <input hidden\r\n                            accept=\"video/*\"\r\n                            id='inputVideoFile'\r\n                            multiple type=\"file\"\r\n                            onChange={handleVideoChooser} />\r\n\r\n                    </Button>}\r\n\r\n                    </>}\r\n                </Grid>\r\n            </Grid>\r\n            {\r\n                ytPlayer?\r\n                <>\r\n                 <img src={guideYtVideoIdImg} alt=\"Guide\" />\r\n                    {/* for Youtube Player */}\r\n                    <Controls.Input\r\n                    name=\"ytVideoId\"\r\n                    label=\"Youtube Video Id\"\r\n                    value={values.ytVideoId}\r\n                    onChange={handleInputChange}\r\n                    error={errors.ytVideoId}\r\n                    style={{width:\"95%\"}}\r\n                    />\r\n                </> :\r\n                <>\r\n            <Stack direction=\"row\" spacing={2}>\r\n                <Controls.Input\r\n                    name=\"videoUrl\"\r\n                    label=\"Video URL\"\r\n                    value={values.videoUrl}\r\n                    onChange={handleInputChange}\r\n                    error={errors.videoUrl}\r\n                    onBlur={() => {\r\n                        videoRef.current?.load();\r\n                    }}\r\n                    style={{ width: \"70%\" }} />\r\n\r\n                <Controls.Input\r\n                    disabled\r\n                    name=\"videoLengthStr\"\r\n                    label=\"Video Duration\"\r\n                    value={values.videoLengthStr}\r\n                    onChange={handleInputChange}\r\n                    error={errors.videoLengthStr}\r\n                    style={{ width: \"30%\" }} />\r\n\r\n                <Controls.Input\r\n                    hidden\r\n                    disabled\r\n                    name=\"video_length\"\r\n                    label=\"Video Length\"\r\n                    value={values.video_length}\r\n                    onChange={handleInputChange}\r\n                    error={errors.video_length}\r\n                    style={{ width: \"15%\" }} />\r\n            </Stack>\r\n                \r\n                </>\r\n            }\r\n\r\n\r\n\r\n            <Stack direction=\"row\" spacing={3}>\r\n\r\n                <img src={values.thumbnail_url} width={300} height={100} />\r\n\r\n                <FormControl>\r\n                    <TextField\r\n                        style={{ width: \"98%\" }}\r\n                        variant='outlined'\r\n                        label=\"Thumbnail Image URL\"\r\n                        name='image'\r\n                        value={values.thumbnail_url}\r\n                        onChange={handleInputChange}\r\n                        error={errors.image}\r\n                        InputProps={{\r\n                            endAdornment: (\r\n                                <InputAdornment position='end'>\r\n                                    {progress2 ?\r\n                                        <CircularProgress /> :\r\n                                        <IconButton color='primary'\r\n                                            aria-label=\"upload picture\" component=\"label\"\r\n                                        >\r\n                                            <input hidden\r\n                                                accept=\"image/*\"\r\n                                                id='inputThumbnailFile'\r\n                                                multiple type=\"file\"\r\n                                                onChange={handleImageChooser}\r\n                                            />\r\n                                            <AddPhotoAlternate />\r\n                                        </IconButton>\r\n                                        // <Button variant='contained' color='primary' component=\"label\">\r\n                                        //     Upload\r\n                                        // </Button>\r\n                                    }\r\n                                </InputAdornment>\r\n                            )\r\n                        }}\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }} />\r\n\r\n\r\n                </FormControl>\r\n\r\n            </Stack>\r\n\r\n\r\n            <Controls.Input\r\n                name=\"title\"\r\n                label=\"Title\"\r\n                value={values.title}\r\n                onChange={handleInputChange}\r\n                error={errors.title}\r\n                style={{ width: \"98%\" }} />\r\n\r\n\r\n            <Stack direction=\"row\" spacing={2}>\r\n                {/* FILTER INPUTS */}\r\n\r\n                <FormControl fullWidth>\r\n                    <InputLabel id='lbl-select-class'>Select Class</InputLabel>\r\n                    <Select\r\n                        labelId='lbl-select-class'\r\n                        id='select-class'\r\n                        label=\"Select Class\"\r\n                        name='class_id'\r\n                        value={classState|| \"\"}\r\n                        defaultValue={\"\"}\r\n                        error={Boolean(errors.class_id)}\r\n                        InputLabelProps={{\r\n                            shrink: true\r\n                          }}\r\n                        onChange={handleClassSelector}>\r\n                        {\r\n                            categoryData.map((item) => (\r\n                                <MenuItem key={item.id} value={JSON.stringify({\r\n                                        id:item.id,\r\n                                        title:item.title\r\n                                    })}>\r\n                                    {item.title}\r\n                                </MenuItem>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                    {errors.class_id && <FormHelperText>{errors.class_id}</FormHelperText>}\r\n                </FormControl>\r\n                <FormControl fullWidth>\r\n                    <InputLabel id='lbl-select-subject'>Select Subject</InputLabel>\r\n                    <Select\r\n                        labelId='lbl-select-subject'\r\n                        id='select-subject'\r\n                        label=\"Select Subject\"\r\n                        name='subject_id'\r\n                        values={subjectState || \"\"}\r\n                        defaultValue={\"\"}\r\n                        error={Boolean(errors.subject_id)}\r\n                        onChange={handleSubjectSelector}>\r\n                        \r\n                        {\r\n                            subjectData.map((item) => (\r\n                                <MenuItem key={item.subject_id} \r\n                                    value={JSON.stringify({\r\n                                        id:item.subject_id,\r\n                                        name:item.name\r\n                                    })}>\r\n                                    {item.name}\r\n                                </MenuItem>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                    {errors.subject_id && <FormHelperText>{errors.subject_id}</FormHelperText>}\r\n\r\n                </FormControl>\r\n\r\n            </Stack>\r\n                <Box>\r\n               <FormControlLabel \r\n                    \r\n                    control={\r\n                        <Switch color=\"primary\" \r\n                            checked={checked}\r\n                            onChange={handleSwitch}\r\n                             />\r\n                    }\r\n                    label={checked?\"Live\":\"Normal\"}\r\n                    labelPlacement=\"start\"/>\r\n               </Box>\r\n            {\r\n                submitProgress ? <CircularProgress /> :\r\n\r\n                    <Button\r\n                        type='submit'\r\n                        color='primary'\r\n                        variant='contained'\r\n                        sx={{ mt: 2 }}\r\n                    >\r\n                        Submit Data\r\n                    </Button>\r\n            }\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default AddOrEditFreeVideoForm","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\manageEbooks\\components\\EbookCardItem.jsx",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\manageEbooks\\components\\AddOrEditEbookForm.jsx",["521","522","523","524","525","526","527","528","529","530"],"import { ArrowRightAlt, CloudUploadSharp } from '@material-ui/icons';\r\nimport { Button, CircularProgress, FormControl, FormControlLabel, FormGroup, FormHelperText, InputAdornment, MenuItem, Select, Stack, Switch, TextField } from '@mui/material';\r\nimport { getDownloadURL, ref as StorageReference, uploadBytesResumable } from 'firebase/storage';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { dbRealtime, storage } from '../../../firebase/FirebaseConfig';\r\nimport Controls from '../../../components/controls/Controls';\r\nimport { useForm,Form } from '../../../components/helper/useForm';\r\nimport LinearProgressWithLabel from '../../../components/ProgressBar/LinearProgressWithLabel';\r\nimport { Box } from '@mui/system';\r\nimport { child, equalTo, get, onValue, orderByChild, query, ref } from 'firebase/database';\r\nimport { InputLabel } from '@mui/material';\r\n\r\nconst initialValue={\r\n    pdfUrl:\"\",\r\n    title:\"\",\r\n    image:\"\",\r\n    paid:true,\r\n    price:0,\r\n    subject_id:\"\",\r\n    subjectName:\"\",\r\n    class_id:\"\",\r\n    className:\"\",\r\n    type:\"\",\r\n\r\n}\r\n// const regex = new RegExp('(https?://)?([\\\\da-z.-]+)\\\\.([a-z.]{2,6})[/\\\\w .-]*/?.pdf$');\r\n\r\nfunction AddOrEditEbookForm(props) {\r\n    const {recordForEdit,addOrEdit,submitProgress}=props;\r\n\r\n    const[progress,setProgress]=useState();\r\n    const [uploadProgress,setUploadProgress]=useState(0);\r\n\r\n\r\n    //data states\r\n    const [categoryData, setCategoryData] = useState([]);\r\n    const [subjectData, setSubjectData] = useState([]);\r\n\r\n    //state\r\n    const [checked,setChecked]=useState(true)\r\n    const [classState,setClassState]=useState(\"\");\r\n    const [subjectState,setSubjectState]=useState(\r\n            recordForEdit?JSON.stringify({\r\n                id:recordForEdit.subject_id,\r\n                name:recordForEdit.subjectName\r\n            }):\"\"\r\n        )\r\n\r\n   \r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('title' in fieldValues)\r\n            temp.title = fieldValues.title ? \"\" : \"This field is required.\"\r\n\r\n        if ('pdfUrl' in fieldValues)\r\n            temp.pdfUrl = fieldValues.pdfUrl? \"\" : \"Valid pdf file required\"\r\n\r\n        if ('subject_id' in fieldValues)\r\n            temp.subject_id = fieldValues.subject_id? \"\" : \"This field is required.\"\r\n        if ('class_id' in fieldValues)\r\n            temp.class_id = fieldValues.class_id? \"\" : \"This field is required.\"\r\n        if ('image' in fieldValues)\r\n            temp.image = fieldValues.image? \"\" : \"This field is required.\"\r\n       \r\n        if ('type' in fieldValues)\r\n            temp.type = fieldValues.type? \"\" : \"This field is required.\"\r\n        \r\n        if(checked)\r\n            if ('price' in fieldValues)\r\n            temp.price = fieldValues.price>0? \"\" : \"Price should be greater than 0\"\r\n        else temp.price=\"\"\r\n\r\n        setErrors({\r\n            ...temp\r\n        })\r\n\r\n        if (fieldValues == values)\r\n            return Object.values(temp).every(x => x == \"\")\r\n    }\r\n\r\n    const { \r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm } = useForm(initialValue, true, validate)\r\n\r\n\r\n     const handleSubmit=(event)=>{\r\n        event.preventDefault();\r\n        if(validate()){\r\n            addOrEdit(values.id,values,resetForm) \r\n        }\r\n     }\r\n\r\n     const handleSwitch=(event)=>{\r\n        const checked=event.target.checked;\r\n        setChecked(checked)\r\n        setValues({...values,paid:checked,price:0})\r\n        setErrors({...errors,price:0})\r\n     }\r\n\r\n     \r\n\r\n     const handleFileChooser=(event)=>{\r\n        if(event.target.files && event.target.files[0]){\r\n            const pdfFile=event.target.files[0];\r\n\r\n            uploadPDF(pdfFile);\r\n          }\r\n     }\r\n\r\n     const handleImageChooser=(event)=>{\r\n        if(event.target.files && event.target.files[0]){\r\n          let img=event.target.files[0]\r\n          uploadImage(img);\r\n        }\r\n       \r\n      }\r\n  \r\n      const uploadImage=async (file)=>{\r\n        if(!file){\r\n          toast.error(\"Please select a file first\");\r\n          return\r\n          \r\n        }\r\n        setProgress(true)\r\n        const fileName=`${file.name}_${Date.now()}`\r\n        const storageRef=StorageReference(storage,`/coverImages/${fileName}`)\r\n        const uploadTask=uploadBytesResumable(storageRef,file)\r\n        uploadTask.on(\"state_changed\",(snapshot)=>{\r\n          const percent=(snapshot.bytesTransferred/snapshot.totalBytes) * 100\r\n          setUploadProgress(percent)\r\n  \r\n        },(err) => console.log(err),\r\n        ()=> {\r\n          //get download url\r\n          setUploadProgress(0)\r\n          setProgress(false)\r\n          getDownloadURL(uploadTask.snapshot.ref).then((url)=>{\r\n            setValues({...values,image:url})\r\n          })\r\n        }\r\n        );\r\n      }\r\n\r\n     //upload Image \r\n     const uploadPDF=async (file)=>{\r\n        if(!file){\r\n          toast.error(\"Please select a file first\");\r\n          return\r\n        }\r\n        const fileName=`${file.name}-${Date.now()}`;\r\n        console.log(fileName);\r\n        setProgress(true)\r\n        const storageRef=StorageReference(storage,`/pdfFiles/${fileName}`)\r\n        const uploadTask=uploadBytesResumable(storageRef,file)\r\n        uploadTask.on(\"state_changed\",(snapshot)=>{\r\n          const percent=(snapshot.bytesTransferred/snapshot.totalBytes) * 100\r\n          setUploadProgress(percent)\r\n  \r\n        },(err) => console.log(err),\r\n        ()=> {\r\n          //get download url\r\n          setProgress(false)\r\n          getDownloadURL(uploadTask.snapshot.ref).then((url)=>{\r\n            setValues({...values,pdfUrl:url})\r\n          })\r\n        }\r\n        );\r\n      }\r\n\r\n   \r\n        //handle filter inputs\r\n    const handleClassSelector = (event) => {\r\n        const v = event.target.value;\r\n        if (v != \"\") {\r\n            setClassState(v)\r\n            const jVal=JSON.parse(v);\r\n            const id=jVal.id;\r\n            const title=jVal.title;\r\n            setSubjectData([]);\r\n            getSubjects(id);\r\n            //update value of class_id\r\n            setValues({\r\n                ...values,\r\n                class_id: id,\r\n                className:title\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleSubjectSelector=(event)=>{\r\n        const v = event.target.value;\r\n        if (v != \"\") {\r\n            console.log(v);\r\n            setSubjectState(v)\r\n            const jVal=JSON.parse(v);\r\n            const id=jVal.id;\r\n            const name=jVal.name;\r\n           \r\n            //update value of subject\r\n            setValues({\r\n                ...values,\r\n               subject_id:id,\r\n               subjectName:name\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    //get subjects\r\n    const getSubjects = (id) => {\r\n        \r\n        const qRef = query(ref(dbRealtime, \"/subjects\"), orderByChild(\"class_id\"), equalTo(id))\r\n        onValue(qRef, (snapshot) => {\r\n            if (snapshot.exists()) {\r\n                const data = snapshot.val();\r\n                setSubjectData(Object.values(data))\r\n               \r\n            } else {\r\n                setSubjectData([]);\r\n            }\r\n        })\r\n    }\r\n\r\n     useEffect(()=>{\r\n        if(recordForEdit!=null){\r\n            setValues({...recordForEdit});\r\n            //set state\r\n            setClassState(JSON.stringify(\r\n                {\r\n                    id:recordForEdit.class_id,\r\n                    title:recordForEdit.className\r\n                }\r\n            ));\r\n            setChecked(recordForEdit.paid)\r\n        }\r\n     },[recordForEdit]);\r\n\r\n\r\n     useEffect(() => {\r\n        const getBoardClass = () => {\r\n            const dbRef = ref(dbRealtime);\r\n            get(child(dbRef, \"/boardClass/\")).then((snapshot) => {\r\n                if (snapshot.exists()) {\r\n                    const data = snapshot.val();\r\n                    setCategoryData(Object.values(data));\r\n                    console.log(data)\r\n                } else {\r\n                    console.log(\"No data found\");\r\n                }\r\n            }).catch((error) => {\r\n                console.log(error);\r\n            })\r\n        }\r\n\r\n        getBoardClass();\r\n       \r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (values.class_id != \"\" && values.class_id != undefined) {\r\n            getSubjects(values.class_id);\r\n        }\r\n    }, [values.class_id])\r\n\r\n\r\n\r\n  return (\r\n   <Form onSubmit={handleSubmit}>\r\n        {progress && <LinearProgressWithLabel value={uploadProgress}/>}\r\n            {values.pdfUrl? <iframe src={values.pdfUrl} width=\"100%\" height={350}/>:\"\"}\r\n           \r\n                \r\n               <Stack>\r\n                \r\n                {progress? <CircularProgress/> : <Button \r\n                            style={{width:\"98%\"}}      \r\n                            variant='outlined' \r\n                            color='primary' \r\n                            component=\"label\"\r\n                            endIcon={<CloudUploadSharp/>}>\r\n                            Upload PDF File\r\n                            <input hidden\r\n                                accept=\"application/pdf\"\r\n                                id='inputVideoFile'\r\n                                multiple type=\"file\"\r\n                                onChange={handleFileChooser}\r\n                                \r\n                            />\r\n                        </Button> }\r\n               </Stack>\r\n          \r\n        <Controls.Input\r\n            style={{marginTop:\"24px\",width:\"98%\"}}\r\n            name=\"pdfUrl\"\r\n            label=\"Pdf url\"\r\n            value={values.pdfUrl}\r\n            onChange={handleInputChange}\r\n            error={errors.pdfUrl}/>\r\n        <Controls.Input\r\n            style={{width:\"98%\"}}\r\n            name=\"title\"\r\n            label=\"title\"\r\n            value={values.title}\r\n            onChange={handleInputChange}\r\n            error={errors.title}/>\r\n\r\n            \r\n               \r\n\r\n             \r\n                {values.image &&  <img src={values.image} alt=\"cover image\" width=\"200px\" height=\"150px\" />}\r\n             \r\n              <TextField \r\n                fullWidth\r\n                variant='outlined'\r\n                label=\"Cover Image\"\r\n                name='image'\r\n                value={values.image}\r\n                onChange={handleInputChange}\r\n                error={errors.image}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position='end'>\r\n                      {progress ?\r\n                        <CircularProgress /> :\r\n                        <Button variant='contained' color='primary' component=\"label\">\r\n                          Upload\r\n                          <input hidden\r\n                            accept=\"image/*\"\r\n                            id='inputThumbnailFile'\r\n                            multiple type=\"file\"\r\n                            onChange={handleImageChooser}\r\n                          />\r\n                        </Button>\r\n                        \r\n                      }\r\n                    </InputAdornment>\r\n                  )\r\n                }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }} />\r\n\r\n<Stack direction=\"row\" spacing={2}>\r\n                {/* FILTER INPUTS */}\r\n\r\n                <FormControl fullWidth>\r\n                    <InputLabel id='lbl-select-class'>Select Class</InputLabel>\r\n                    <Select\r\n                        labelId='lbl-select-class'\r\n                        id='select-class'\r\n                        label=\"Select Class\"\r\n                        name='class_id'\r\n                        value={classState|| \"\"}\r\n                        defaultValue={\"\"}\r\n                        error={Boolean(errors.class_id)}\r\n                        InputLabelProps={{\r\n                            shrink: true\r\n                          }}\r\n                        onChange={handleClassSelector}>\r\n                        {\r\n                            categoryData.map((item) => (\r\n                                <MenuItem key={item.id} value={JSON.stringify({\r\n                                        id:item.id,\r\n                                        title:item.title\r\n                                    })}>\r\n                                    {item.title}\r\n                                </MenuItem>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                    {errors.class_id && <FormHelperText>{errors.class_id}</FormHelperText>}\r\n                </FormControl>\r\n                <FormControl fullWidth>\r\n                    <InputLabel id='lbl-select-subject'>Select Subject</InputLabel>\r\n                    <Select\r\n                        labelId='lbl-select-subject'\r\n                        id='select-subject'\r\n                        label=\"Select Subject\"\r\n                        name='subject_id'\r\n                        values={subjectState || \"\"}\r\n                        defaultValue={\"\"}\r\n                        error={Boolean(errors.subject_id)}\r\n                        onChange={handleSubjectSelector}>\r\n                        \r\n                        {\r\n                            subjectData.map((item) => (\r\n                                <MenuItem key={item.subject_id} \r\n                                    value={JSON.stringify({\r\n                                        id:item.subject_id,\r\n                                        name:item.name\r\n                                    })}>\r\n                                    {item.name}\r\n                                </MenuItem>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                    {errors.subject_id && <FormHelperText>{errors.subject_id}</FormHelperText>}\r\n\r\n                </FormControl>\r\n            </Stack>\r\n            \r\n            <Box>\r\n               <FormControlLabel \r\n                    value=\"start\"\r\n                    control={\r\n                        <Switch color=\"primary\" \r\n                            checked={checked}\r\n                            onChange={handleSwitch}\r\n                             />\r\n                        }\r\n                    label={checked?\"Paid\":\"Free\"}\r\n                    labelPlacement=\"start\"/>\r\n               </Box>\r\n\r\n\r\n               {\r\n                checked && \r\n                <Controls.Input\r\n                    style={{width:\"98%\"}}\r\n                    name=\"price\"\r\n                    label=\"Price\"\r\n                    type=\"number\"\r\n                    value={values.price}\r\n                    onChange={handleInputChange}\r\n                    error={errors.price}/>\r\n               }\r\n\r\n          <FormControl\r\n              error={Boolean(errors.type)}>\r\n              <Controls.RadioGroup\r\n                  name=\"type\"\r\n                  label=\"Type\"\r\n                  value={values.type}\r\n                  onChange={handleInputChange}\r\n                  items={[\r\n                    {id:\"pdf\",title:\"Pdf\"},\r\n                    {id:\"ebook\",title:\"eBook\"},\r\n                ]}\r\n              />\r\n\r\n              <FormHelperText>{errors.type}</FormHelperText>\r\n\r\n          </FormControl>\r\n         \r\n                \r\n        {submitProgress? <CircularProgress/>:\r\n            <Button sx={{my:2}} type='submit' variant='contained' endIcon={<ArrowRightAlt/>}>\r\n                {recordForEdit?\"Update Record\":\"Add New Record\"}\r\n            </Button>\r\n            }\r\n   </Form>\r\n  )\r\n}\r\n\r\nexport default AddOrEditEbookForm","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\AppSlider\\components\\SlideAddOrEditForm.jsx",["531","532","533","534","535","536","537"],"import { AddPhotoAlternate } from '@material-ui/icons';\r\nimport { BrowseGallery } from '@mui/icons-material';\r\nimport { Button, CircularProgress, FormControl, IconButton, InputAdornment, TextField } from '@mui/material';\r\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage';\r\nimport React, { useState } from 'react'\r\nimport { useEffect } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { Form, useForm } from '../../../components/helper/useForm';\r\nimport { storage } from '../../../firebase/FirebaseConfig';\r\n\r\n\r\n\r\nconst initialValue = {\r\n    image:\"\",\r\n    click_action:\"\",\r\n\r\n}\r\n\r\nfunction SlideAddOrEditForm({addOrEdit,recordForEdit,progress}) {\r\n    //progress hook\r\n    const [uploadProgress,setUploadProgress]=useState(false);\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('image' in fieldValues)\r\n            temp.image = fieldValues.image ? \"\" : \"This field is required.\"\r\n\r\n        if ('click_action' in fieldValues)\r\n            temp.click_action = fieldValues.click_action ? \"\" : \"This field is required.\"\r\n\r\n        setErrors({\r\n            ...temp\r\n        })\r\n\r\n        if (fieldValues == values)\r\n            return Object.values(temp).every(x => x == \"\")\r\n    }\r\n\r\n    const { \r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm } = useForm(initialValue, true, validate)\r\n\r\n\r\n     const handleSubmit=(ev)=>{\r\n        ev.preventDefault();\r\n        if(validate()){\r\n            addOrEdit(values.slide_id,values,resetForm);\r\n        }\r\n     }   \r\n\r\n    const handleImageChooser = (event) => {\r\n        if(event.target.files && event.target.files[0]){\r\n            let img=event.target.files[0]\r\n            uploadImage(img);\r\n          }\r\n    }\r\n\r\n    \r\n    \r\n\r\n\r\n     //upload Image \r\n     const uploadImage=async (file)=>{\r\n        if(!file){\r\n          toast.error(\"Please select a file first\");\r\n          return\r\n        }\r\n        setUploadProgress(true)\r\n        const fileName=`${file.name}_${Date.now()}`;\r\n        \r\n        const storageRef=ref(storage,`/slideImages/${fileName}`)\r\n        const uploadTask=uploadBytesResumable(storageRef,file)\r\n        uploadTask.on(\"state_changed\",(snapshot)=>{\r\n          const percent=(snapshot.bytesTransferred/snapshot.totalBytes) * 100\r\n  \r\n        },(err) => console.log(err),\r\n        ()=> {\r\n          //get download url\r\n          setUploadProgress(false)\r\n          getDownloadURL(uploadTask.snapshot.ref).then((url)=>{\r\n            setValues({...values,image:url})\r\n          })\r\n        }\r\n        );\r\n      }\r\n\r\n      useEffect(()=>{\r\n        if(recordForEdit!=null){\r\n            setValues({...recordForEdit})\r\n        }\r\n      },[recordForEdit])\r\n\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n       {values.image &&  <img src={values.image} width={360} height={180} />}\r\n             \r\n                 <TextField\r\n                    fullWidth\r\n                     variant='outlined'\r\n                     label=\"Image URL\"\r\n                     name='image'\r\n                     value={values.image}\r\n                     onChange={handleInputChange}\r\n                     error={Boolean(errors.image)}\r\n                     InputProps={{\r\n                         endAdornment: (\r\n                        \r\n                             <InputAdornment position='end'>\r\n                                 {uploadProgress ?\r\n                                     <CircularProgress /> :\r\n                                     <IconButton color='primary'\r\n                                     aria-label=\"upload picture\" component=\"label\"\r\n                                     >\r\n                                         <input hidden\r\n                                             accept=\"image/*\"\r\n                                             id='sliderImage'\r\n                                             multiple type=\"file\"\r\n                                             onChange={handleImageChooser}\r\n                                             />\r\n                                             <AddPhotoAlternate/>\r\n                                     </IconButton>\r\n\r\n                                 }\r\n                             </InputAdornment>\r\n                         )\r\n                     }}\r\n                     InputLabelProps={{\r\n                         shrink: true,\r\n                     }} />\r\n        \r\n             \r\n             <TextField \r\n                fullWidth\r\n                variant='outlined'\r\n                label=\"Click Action URL\"\r\n                name=\"click_action\"\r\n                value={values.click_action}\r\n                onChange={handleInputChange}\r\n                error={Boolean(errors.click_action)}/>\r\n\r\n        {progress?<CircularProgress/>:\r\n                <Button \r\n                    variant='contained'\r\n                    type=\"submit\">\r\n                        Submit\r\n                    </Button>}\r\n\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default SlideAddOrEditForm","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseCategory\\components\\CategoryForm.jsx",["538","539","540","541"],"import { Button, TextField, Typography } from '@material-ui/core'\r\nimport { CircularProgress, Stack } from '@mui/material'\r\nimport React from 'react'\r\nimport { useState } from 'react'\r\n\r\nfunction CategoryForm(props) {\r\n    const {recordForEdit,addOrEdit,progress,setProgress} = props\r\n    const [title,setTitle]= useState(recordForEdit?recordForEdit.title:\"\");\r\n    const [id,setId]=useState(recordForEdit?recordForEdit.id:\"\")\r\n\r\n    const [inputError,setInputError]=useState(false)\r\n\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        if(title==\"\"){\r\n            setInputError(true)\r\n            return\r\n        }\r\n        addOrEdit(id,title);\r\n    }\r\n\r\n   \r\n\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n        <Stack spacing={2}>\r\n            <TextField variant='outlined' name='title' color='primary' \r\n                error={inputError}\r\n            label=\"Category Name\" value={title} onChange={(e)=>setTitle(e.target.value)}/>\r\n            {progress? <CircularProgress/>\r\n             :<Button variant='contained' color='primary' type='submit'>Submit</Button>\r\n            }\r\n        </Stack>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default CategoryForm","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\SectionItem.jsx",["542","543","544","545","546","547"],"import { Add, Delete, Edit, ExpandMore } from '@material-ui/icons'\r\nimport { Accordion, AccordionDetails, AccordionSummary, Button, IconButton, Stack, Tooltip, Typography } from '@mui/material'\r\nimport { deleteDoc, doc } from 'firebase/firestore'\r\nimport React from 'react'\r\nimport { useState } from 'react'\r\nimport { toast } from 'react-toastify'\r\nimport { dbFirestore } from '../../../firebase/FirebaseConfig';\r\nimport DeleteDialog from \"../../../components/Dialogs/DeleteDialog\";\r\nimport PopupDialog from '../../../components/Dialogs/PopupDialog'\r\nimport AddOrEditVideoForm from './sectionForms/AddOrEditVideoForm'\r\nimport { addPdfInSection, insertQuizInSection, insertVideoInSection, updateItemInSection, updateVideoInSection } from '../../../services/CourseService'\r\nimport { Box } from '@material-ui/core'\r\nimport VideosList from './innerItems/VideosList'\r\nimport AddOrEditPDFsForm from './sectionForms/AddOrEditPDFsForm'\r\nimport PDFList from './innerItems/PDFList'\r\nimport AddOrEditQuizForm from './sectionForms/AddOrEditQuizForm'\r\nimport QuizList from './innerItems/QuizList'\r\n\r\n\r\nfunction SectionItem(props) {\r\n    const {sectionData,courseId,setRecordForEdit,setOpenSectionDialog}=props\r\n    const [openDeleteDialog,setOpenDeleteDialog]=useState(false);\r\n    const [videoDialog,setVideoDialog]=useState(false);\r\n    const [videoRecordForEdit,setVideoRecordForEdit]=useState(null);\r\n    const [pdfRecordForEdit,setPdfRecordForEdit]=useState(null);\r\n    const [pdfDialog,setPdfDialog]=useState(false);\r\n\r\n    const [quizDialog,setQuizDialog]=useState(false);\r\n    const [quizRecordForEdit,setQuizRecordForEdit]=useState(null);\r\n\r\n    const handleSectionEdit=(item)=>{\r\n        setOpenSectionDialog(true);\r\n        setRecordForEdit(item);\r\n    }\r\n\r\n    const DeleteSectionButton=()=>(\r\n        <Tooltip title='Delete Section'>\r\n          <IconButton \r\n            variant=\"contained\"\r\n            onClick={()=>setOpenDeleteDialog(true)}>\r\n            <Delete/>\r\n        </IconButton>\r\n        </Tooltip>\r\n    )\r\n\r\n    const ItemType=()=>{\r\n        if(sectionData.data.type==\"video\"){\r\n            return (\r\n                <>\r\n                <Stack direction=\"row\" spacing={5} sx={{justifyContent:\"space-between\"}}>\r\n                <Button variant='contained'\r\n                    color='secondary'\r\n                    endIcon={<Add />}\r\n                    onClick={()=>{\r\n                        setVideoRecordForEdit(null);\r\n                        setVideoDialog(true)\r\n                    }}>\r\n                    Add Video\r\n                </Button>\r\n                <Typography>{sectionData.data.totalItemCount} Video(s)</Typography>    \r\n                \r\n                </Stack>\r\n\r\n                {<VideosList \r\n                    sectionId={sectionData.id}\r\n                    setRecordForEdit={setVideoRecordForEdit}\r\n                    setVideoDialog={setVideoDialog}\r\n                />}\r\n                </>\r\n            )\r\n        }else if(sectionData.data.type==\"pdf\"){\r\n            return(\r\n                <>\r\n                <Stack direction=\"row\" spacing={5} sx={{justifyContent:\"space-between\"}}>\r\n                    <Button variant='contained'\r\n                color='primary'\r\n                endIcon={<Add/>}\r\n                onClick={()=>{\r\n                    setPdfRecordForEdit(null);\r\n                    setPdfDialog(true)\r\n                }}>\r\n                   Add PDF\r\n                </Button>\r\n                <Typography>{sectionData.data.totalItemCount} PDF(s)</Typography>\r\n                </Stack> \r\n               \r\n                <PDFList\r\n                    sectionId={sectionData.id}\r\n                    setRecordForEdit={setPdfRecordForEdit}\r\n                    setPdfDialog={setPdfDialog}/>\r\n\r\n                    </>\r\n            )\r\n        }else if(sectionData.data.type==\"quiz\"){\r\n            return (\r\n            <>\r\n                <Stack direction=\"row\" spacing={5} sx={{justifyContent:\"space-between\"}}>\r\n                <Button variant='contained'\r\n                    color='primary'\r\n                    endIcon={<Add />}\r\n                    onClick={()=>setQuizDialog(true)}>\r\n                    Add Quiz\r\n                </Button>\r\n                <Typography>{sectionData.data.totalItemCount} Quiz(s)</Typography>\r\n                </Stack>\r\n                \r\n                <QuizList \r\n                    sectionId={sectionData.id}\r\n                    />\r\n            </>\r\n            )\r\n        }\r\n    }\r\n\r\n    const addOrEditVideo=(videoId,data,resetForm)=>{\r\n       if(videoId==null){\r\n           insertVideoInSection(courseId,sectionData.id,data);\r\n           toast.success(\"Video added successfully\");\r\n           resetForm();\r\n           setVideoDialog(false);\r\n       }else {\r\n         //update\r\n         updateVideoInSection(videoId,data,onSuccess,onFailed)\r\n         resetForm();\r\n         setVideoDialog(false);\r\n       }\r\n    }\r\n\r\n    //add Or Edit PDF\r\n    const addOrEditPDFs=(pdfId,data,resetForm)=>{\r\n        if(pdfId==null){\r\n            //add new file\r\n            addPdfInSection(courseId,sectionData.id,data,onSuccess,onFailed)\r\n            resetForm();\r\n            setPdfDialog(false);\r\n        }else {\r\n            //update file\r\n            updateItemInSection(\"COURSE_PDFS\",pdfId,data,onSuccess,onFailed);\r\n            setPdfDialog(false);\r\n            resetForm();\r\n        }\r\n    }\r\n\r\n    const handleAddQuiz=(arr)=>{\r\n        console.log(arr)\r\n        if(arr.length==0 || arr==undefined) {\r\n            toast.error(\"Please select at least 1 item\");\r\n            return\r\n        }\r\n        //save record to server\r\n        insertQuizInSection(courseId,sectionData.id,arr,onSuccess,onFailed)\r\n        setQuizDialog(false);\r\n\r\n       \r\n    }\r\n\r\n\r\n    const onSuccess=(msg)=>{\r\n        toast.success(msg);\r\n    }\r\n    const onFailed=(msg)=>{\r\n        toast.error(msg);\r\n    }\r\n\r\n\r\n      //delete section\r\n    const deleteSection=async ()=>{\r\n      if(sectionData.data.totalItemCount<=0){\r\n        try {     \r\n            await deleteDoc(doc(dbFirestore,\"COURSE_LESSON_SECTIONS\",sectionData.id))\r\n            toast.success(\"Section deleted.\")\r\n          } catch (error) {\r\n           console.log(\"delete\")\r\n           toast.error(\"Something went wrong try again\")\r\n        }\r\n      }else {\r\n        toast.info(\"First delete all item inside this section then try to delete\");\r\n      }\r\n      setOpenDeleteDialog(false)\r\n  }\r\n\r\n    \r\n\r\n  return (\r\n    <>\r\n   \r\n        <Accordion>\r\n            <AccordionSummary\r\n             expandIcon={<ExpandMore/>}\r\n            >\r\n                <Stack spacing={3} sx={{width:\"90%\"}}  direction=\"row\" justifyContent=\"space-between\">\r\n                <Box sx={{display:\"flex\",justifyContent:\"center\",maxWidth:\"100%\"}}>\r\n                <Typography variant='h6'>\r\n                    {sectionData.data.title} \r\n                </Typography>\r\n                <Typography variant='body1'>\r\n                    {sectionData.data.subtitle}\r\n                </Typography>\r\n\r\n                </Box>\r\n                 <Box>\r\n                    <DeleteSectionButton/>\r\n                    <Tooltip title='Edit Section'>\r\n                        <IconButton \r\n                            variant=\"contained\"\r\n                            onClick={()=>handleSectionEdit(sectionData)}>\r\n                            <Edit/>\r\n                        </IconButton>\r\n                        </Tooltip>\r\n                 </Box>\r\n\r\n                </Stack>\r\n\r\n            </AccordionSummary>\r\n                \r\n            <AccordionDetails>\r\n                {ItemType()}\r\n                \r\n            </AccordionDetails>\r\n        </Accordion>\r\n\r\n        <DeleteDialog\r\n            title=\"Delete Section\"\r\n            openDialog={openDeleteDialog}\r\n            setOpenDialog={setOpenDeleteDialog}\r\n            onAction={deleteSection}/>\r\n\r\n        <PopupDialog\r\n         disableBackdropClick={true}\r\n         title=\"Add New Video\"\r\n         openDialog={videoDialog}\r\n         setOpenDialog={setVideoDialog}\r\n         maxWidth=\"xl\"   \r\n        >\r\n          <AddOrEditVideoForm\r\n            addOrEditVideo={addOrEditVideo}\r\n            recordForEdit={videoRecordForEdit}\r\n          />\r\n        </PopupDialog>\r\n        {/* PDF AddOrEditDialog */}\r\n        <PopupDialog\r\n         disableBackdropClick={true}\r\n         title=\"Add/Update PDF\"\r\n         openDialog={pdfDialog}\r\n         setOpenDialog={setPdfDialog}\r\n         maxWidth=\"xl\"   \r\n        >\r\n          <AddOrEditPDFsForm\r\n            addOrEdit={addOrEditPDFs}\r\n            recordForEdit={pdfRecordForEdit}\r\n          />\r\n         \r\n        </PopupDialog>\r\n        {/* PDF AddOrEdit Quiz */}\r\n       \r\n          <AddOrEditQuizForm\r\n            recordForEdit={setQuizRecordForEdit}\r\n            handleAddQuiz={handleAddQuiz}\r\n            openDialog={quizDialog}\r\n            setOpenDialog={setQuizDialog}\r\n          />\r\n\r\n    </>\r\n \r\n  )\r\n}\r\n\r\nexport default SectionItem","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\classAndSubjects\\components\\SubjectForm.jsx",["548","549","550","551","552"],"import { Button, CircularProgress, FormControl, FormHelperText, InputAdornment, InputLabel, MenuItem, Select, Stack, TextField } from '@mui/material'\r\nimport { onValue, ref } from 'firebase/database'\r\nimport React, { useEffect, useState } from 'react'\r\nimport Controls from '../../../components/controls/Controls'\r\nimport { Form, useForm } from '../../../components/helper/useForm'\r\nimport { dbRealtime, storage } from '../../../firebase/FirebaseConfig'\r\nimport { getDownloadURL, ref as StorageRef, uploadBytesResumable } from 'firebase/storage'\r\nimport { toast } from 'react-toastify'\r\n\r\nconst initialValue={\r\n    name:\"\",\r\n    iconUrl:\"\",\r\n    class_id:\"\",\r\n    class_name:\"\"\r\n}\r\nfunction SubjectForm(props) {\r\n    const { recordForEdit, addOrEdit, progress, SetProgress } = props\r\n    const [uploadProgress,setUploadProgress]=useState(false);\r\n\r\n    //category data\r\n    const [categories,setCategories]=useState([]);\r\n\r\n \r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('name' in fieldValues)\r\n            temp.name = fieldValues.name ? \"\" : \"This field is required.\"\r\n\r\n        if ('iconUrl' in fieldValues)\r\n            temp.iconUrl = fieldValues.iconUrl ? \"\" : \"This field is required.\"\r\n\r\n        if ('class_id' in fieldValues)\r\n            temp.class_id = fieldValues.class_id ? \"\" : \"This field is required.\"\r\n\r\n        setErrors({\r\n            ...temp\r\n        })\r\n\r\n        if (fieldValues == values)\r\n            return Object.values(temp).every(x => x == \"\")\r\n    }\r\n\r\n    const { values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm } = useForm(initialValue, true, validate)\r\n\r\n\r\n        const handleImageChooser=(event)=>{\r\n            if(event.target.files && event.target.files[0]){\r\n              let img=event.target.files[0]\r\n              uploadImage(img);\r\n            }\r\n           \r\n          }\r\n      \r\n          const uploadImage=async (file)=>{\r\n            if(!file){\r\n              toast.error(\"Please select a file first\");\r\n              return\r\n            }\r\n            setUploadProgress(true)\r\n            const fileName=`${file.name}_${Date.now()}`;\r\n            const storageRef=StorageRef(storage,`/iconUrl/${fileName}`)\r\n            const uploadTask=uploadBytesResumable(storageRef,file)\r\n            uploadTask.on(\"state_changed\",(snapshot)=>{\r\n              const percent=(snapshot.bytesTransferred/snapshot.totalBytes) * 100\r\n              console.log(percent)\r\n      \r\n            },(err) => console.log(err),\r\n            ()=> {\r\n              //get download url\r\n              setUploadProgress(false)\r\n              getDownloadURL(uploadTask.snapshot.ref).then((url)=>{\r\n                setValues({...values,iconUrl:url})\r\n              })\r\n            }\r\n            );\r\n          }   \r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(validate()){\r\n            addOrEdit(values.subject_id,values,resetForm)\r\n        }\r\n    }\r\n\r\n    const getCategories=()=>{\r\n        //realtime update\r\n        const docRef=ref(dbRealtime,\"boardClass\")\r\n        onValue(docRef,(snapshot)=>{\r\n            if(snapshot.exists()){\r\n                const data=snapshot.val();\r\n                setCategories(Object.values(data))\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n  useEffect(()=>{\r\n    if(recordForEdit!=null){\r\n        setValues({...recordForEdit});\r\n    }\r\n\r\n    getCategories();\r\n  },[]);  \r\n\r\n  useEffect(()=>{\r\n    console.log(categories)\r\n  },[categories])\r\n\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n        <Controls.Input\r\n          name=\"name\"\r\n          label=\"Subject Name\"\r\n          value={values.name}\r\n          onChange={handleInputChange}\r\n          error={errors.name}\r\n          />\r\n\r\n          <Stack direction=\"column\">\r\n            {\r\n                values.iconUrl && <>\r\n                    <img src={values.iconUrl} alt=\"\" width=\"200px\" height=\"200px\" />\r\n                </>\r\n            }\r\n            <TextField\r\n                  variant='outlined'\r\n                  label=\"Icon Image\"\r\n                  name='iconUrl'\r\n                  value={values.iconUrl}\r\n                  onChange={handleInputChange}\r\n                  error={errors.iconUrl}\r\n                  InputProps={{\r\n                      endAdornment: (\r\n                          <InputAdornment position='end'>\r\n                              {uploadProgress ?\r\n                                  <CircularProgress /> :\r\n                                \r\n                                  <Button variant='outlined' color='primary' component=\"label\">\r\n                                      Upload\r\n                                      <input hidden\r\n                                          accept=\"image/*\"\r\n                                          id='iconImage'\r\n                                          multiple type=\"file\"\r\n                                          onChange={handleImageChooser}\r\n                                      />\r\n                                  </Button>\r\n                              }\r\n                          </InputAdornment>\r\n                      )\r\n                  }}\r\n                  InputLabelProps={{\r\n                      shrink: true,\r\n                  }} />\r\n          </Stack>\r\n\r\n              \r\n               <FormControl fullWidth>\r\n                    <InputLabel id=\"select-class-category\">Select Class Name</InputLabel>\r\n                    <Select\r\n                        labelId=\"select-class-category\"\r\n                        id=\"simple-select\"\r\n                        name=\"class_id\"\r\n                        label=\"Select Class Name\"\r\n                        value={values.class_id}\r\n                        error={errors.class_id}\r\n                        onChange={handleInputChange}\r\n                        \r\n                        >\r\n                             <MenuItem value=\"\"><em>none</em></MenuItem>\r\n                           {\r\n                            categories.map((item)=>(\r\n                                <MenuItem \r\n                                  value={item.id}\r\n                                  >\r\n                                    {item.title}\r\n                                </MenuItem>\r\n                            ))\r\n                           }\r\n                            \r\n                        </Select>\r\n                        {errors.class_id && <FormHelperText>{errors.class_id}</FormHelperText>}\r\n                </FormControl>\r\n               \r\n        \r\n\r\n          <Button \r\n            sx={{mt:2}}\r\n            type=\"submit\"\r\n            variant='contained'>\r\n                Submit\r\n            </Button>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default SubjectForm","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\SectionForm.jsx",["553","554","555","556","557"],"import { FormControl, FormHelperText } from '@material-ui/core'\r\nimport { Button } from '@mui/material'\r\nimport React, { useEffect } from 'react'\r\nimport Controls from '../../../components/controls/Controls'\r\nimport { Form, useForm } from '../../../components/helper/useForm'\r\n\r\n\r\nconst initialValue={\r\n    title:\"\",\r\n    subtitle:\"\",\r\n    type:\"\",\r\n    totalItemCount:0\r\n}\r\n\r\nconst sectionItem=[\r\n    {id:\"video\",title:\"Video\"},\r\n    {id:\"pdf\",title:\"PDFs\"},\r\n    {id:\"quiz\",title:\"Quiz\"}\r\n]\r\n\r\n\r\nfunction SectionForm(props) {\r\n    const {recordForEdit,addOrEditSection,progress,SetProgress}=props\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('title' in fieldValues)\r\n            temp.title = fieldValues.title ? \"\" : \"This field is required.\"\r\n\r\n        if ('subtitle' in fieldValues)\r\n            temp.subtitle = fieldValues.subtitle ? \"\" : \"This field is required.\"\r\n        \r\n        if ('type' in fieldValues)\r\n            temp.type = fieldValues.type ? \"\" : \"This field is required.\"\r\n\r\n        setErrors({\r\n            ...temp\r\n        })\r\n\r\n        if (fieldValues == values)\r\n            return Object.values(temp).every(x => x == \"\")\r\n    }\r\n\r\n const {values,\r\n    setValues,\r\n    errors,\r\n    setErrors,\r\n    handleInputChange,\r\n    resetForm} = useForm(initialValue,true,validate)\r\n \r\n const handleSubmit=(e)=>{\r\n    e.preventDefault();\r\n    if(validate()){\r\n        addOrEditSection(values.section_id,values,resetForm)\r\n        console.log(values);\r\n    }\r\n }\r\n\r\n\r\n\r\n\r\n useEffect(()=>{\r\n    if(recordForEdit!=null){\r\n        setValues({...recordForEdit.data})\r\n    }\r\n },[recordForEdit])\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Controls.Input\r\n            name=\"title\"\r\n            label=\"Title\"\r\n            value={values.title}\r\n            onChange={handleInputChange}\r\n            error={errors.title}/>\r\n\r\n        <Controls.Input\r\n            name=\"subtitle\"\r\n            label=\"Subtitle\"\r\n            value={values.subtitle}\r\n            onChange={handleInputChange}\r\n            error={errors.subtitle}/>\r\n\r\n        <FormControl \r\n            error={Boolean(errors.type)}>\r\n            <Controls.RadioGroup\r\n                name=\"type\"\r\n                label=\"Section Type\"\r\n                value={values.type}\r\n                onChange={handleInputChange}\r\n                items={sectionItem}\r\n                />\r\n\r\n            <FormHelperText>{errors.type}</FormHelperText>\r\n\r\n        </FormControl>\r\n\r\n\r\n         <Button type='submit' sx={{marginTop:2,marginBottom:2}} variant='contained'>\r\n            {recordForEdit?\"Update\":\"Add Section\"}\r\n         </Button>\r\n            \r\n      </Form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SectionForm","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Dialogs\\PopupDialog.jsx",["558"],"import { Dialog, DialogContent, DialogTitle, IconButton } from '@material-ui/core'\r\nimport { Close } from '@material-ui/icons'\r\n\r\n\r\nfunction PopupDialog(props) {\r\n    const {title,children,openDialog,setOpenDialog,maxWidth,disableBackdropClick} = props\r\n    \r\n  return (\r\n    <Dialog\r\n      disableEnforceFocus \r\n      disableBackdropClick={true}\r\n      maxWidth={maxWidth}\r\n      open={openDialog}\r\n      onClose={()=>setOpenDialog(false)}>\r\n        <div style={{display:\"flex\"}}>\r\n            <DialogTitle  style={{flexGrow:\"1\"}}> {title} </DialogTitle>\r\n            <IconButton onClick={()=>setOpenDialog(false)}>\r\n                    <Close/>\r\n                </IconButton>\r\n            \r\n        </div>\r\n        <DialogContent dividers>{children}</DialogContent>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default PopupDialog","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\Dialogs\\DeleteDialog.jsx",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\AddCourse\\components\\InputCourseForm.jsx",["559","560","561","562","563","564"],"import { Button, CircularProgress, Grid, InputAdornment } from '@material-ui/core'\r\nimport { ArrowRight, CheckSharp, Delete } from '@material-ui/icons'\r\nimport { Autocomplete, Chip, FormControl, FormHelperText, IconButton, Stack, TextField } from '@mui/material'\r\n\r\nimport { collection, onSnapshot, orderBy, query } from 'firebase/firestore'\r\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\n\r\nimport { toast } from 'react-toastify'\r\nimport Controls from '../../../components/controls/Controls'\r\nimport TinyMceEditor from '../../../components/helper/TinyMceEditor'\r\nimport { Form, useForm } from \"../../../components/helper/useForm\"\r\nimport { dbFirestore, storage } from '../../../firebase/FirebaseConfig'\r\n\r\n\r\nconst dummyimage=\"https://dummyimage.com/600x400/a1a1a1/e8e8e8.jpg&text=No+Image\";\r\n\r\nconst initValue={\r\n  title:\"\",\r\n  image:dummyimage,\r\n  original_price:\"\",\r\n  discount:0,\r\n  finalPrice:0,\r\n  validity:0,\r\n  category_id:\"\",\r\n  tags:[],\r\n  shortHighlights:[],\r\n  status:\"draft\",\r\n  course_description:\"<p>Course Description</p>\"\r\n}\r\n\r\nconst statusValue=[\r\n  {\r\n    id:\"draft\",\r\n    title:\"Draft\"\r\n  },\r\n  {\r\n    id:\"public\",\r\n    title:\"Public\"\r\n\r\n  }\r\n]\r\n\r\n\r\nfunction InputCourseForm(props) {\r\n  const {recordForEdit,addOrEdit,progress,setProgress} = props\r\n\r\n  const [selectedImage,setSelectedImage] = useState(dummyimage)\r\n  const [categories,setCategories]=useState([])\r\n  const [shortHighlights,setShortHighlights]= useState([])\r\n  const [tags,setTags] = useState([])\r\n  const [uploadProgress,setUploadProgress] = useState(false)\r\n\r\n  const [docId,setDocId]=useState(null);\r\n  const editorRef= useRef(null)\r\n \r\n \r\n  const validate=(fieldValues = values) => {\r\n\r\n    let temp = { ...errors }\r\n        if ('title' in fieldValues)\r\n            temp.title = fieldValues.title ? \"\" : \"This field is required.\"\r\n        if ('original_price' in fieldValues)\r\n            temp.original_price = fieldValues.original_price>0 ? \"\" : \"This field is required.\"\r\n         \r\n        if ('finalPrice' in fieldValues)\r\n            temp.original_price = fieldValues.finalPrice>0 ? \"\" : \"This field is required.\"\r\n         \r\n        if ('category_id' in fieldValues)\r\n            temp.category_id = fieldValues.category_id ? \"\" : \"This field is required.\"\r\n         \r\n        setErrors({\r\n            ...temp\r\n        })\r\n\r\n        if (fieldValues == values)\r\n            return Object.values(temp).every(x => x == \"\")\r\n  }\r\n  const {\r\n    values,\r\n    setValues,\r\n    errors,\r\n    setErrors,\r\n    handleInputChange,\r\n    resetForm\r\n} = useForm(initValue, true, validate);\r\n\r\n\r\n\r\n   //toast \r\n   const errorToast=(msg)=>{\r\n    toast.error(msg,{\r\n        theme:\"colored\"\r\n    });\r\n}\r\n    const handleImageChooser=(event)=>{\r\n      if(event.target.files && event.target.files[0]){\r\n        let img=event.target.files[0]\r\n        setSelectedImage(URL.createObjectURL(img));\r\n        uploadImage(img);\r\n      }\r\n     \r\n    }\r\n\r\n    const uploadImage=async (file)=>{\r\n      if(!file){\r\n        errorToast(\"Please select a file first\");\r\n        return\r\n      }\r\n      setUploadProgress(true)\r\n      const fileName=`${file.name}_${Date.now()}`\r\n      const storageRef=ref(storage,`/thumbnails/${fileName}`)\r\n      const uploadTask=uploadBytesResumable(storageRef,file)\r\n      uploadTask.on(\"state_changed\",(snapshot)=>{\r\n        const percent=(snapshot.bytesTransferred/snapshot.totalBytes) * 100\r\n        console.log(percent)\r\n\r\n      },(err) => console.log(err),\r\n      ()=> {\r\n        //get download url\r\n        setUploadProgress(false)\r\n        getDownloadURL(uploadTask.snapshot.ref).then((url)=>{\r\n          setValues({...values,image:url})\r\n        })\r\n      }\r\n      );\r\n    }\r\n\r\n    const calculateDiscount=()=>{\r\n      let discountedPrice=(values.original_price*values.discount)/100\r\n      let finalPrice=Math.ceil(values.original_price-discountedPrice);\r\n      setValues({...values,finalPrice:finalPrice})\r\n    }\r\n\r\n\r\n    const handleSubmit=(e)=>{\r\n      e.preventDefault();\r\n      const cDescription=editorRef.current.getContent();\r\n      \r\n\r\n      if(validate()){\r\n        addOrEdit(docId,values,cDescription,resetForm)     \r\n      }\r\n      \r\n    }\r\n\r\n\r\n\r\n    useEffect(()=>{ \r\n      const qRef=query(collection(dbFirestore,\"COURSE_CATEGORIES\"),orderBy(\"timestamp\",\"asc\"))\r\n      onSnapshot(qRef,(snapshot)=>{\r\n         setCategories(snapshot.docs.map(doc=>({\r\n          id:doc.id,\r\n          data:doc.data()\r\n         })))\r\n      })\r\n     \r\n    },[])\r\n\r\n    useEffect(()=>{\r\n      if(recordForEdit!=null){\r\n        setValues({...recordForEdit});\r\n        setTags(recordForEdit.tags);\r\n        setShortHighlights(recordForEdit.shortHighlights);\r\n        setDocId(recordForEdit.course_id);\r\n      }\r\n    },[recordForEdit])\r\n    \r\n  return (\r\n    <>\r\n    <Form onSubmit={handleSubmit}>\r\n     <Grid container spacing={2}>\r\n          <Grid item xs={12} sm={12} md={6} lg={6} xl={6}>\r\n            <Stack direction=\"column\">\r\n              <Controls.Input\r\n                fullWidth\r\n                name=\"title\"\r\n                label=\"Course Title\"\r\n                value={values.title}\r\n                onChange={handleInputChange}\r\n                error={errors.title}\r\n              />\r\n              \r\n              <Grid container>\r\n                <Grid item xs={6} sm={6} md={3} lg={3}>\r\n                  <Controls.Input\r\n                    type='number'\r\n                    label=\"Original Price\"\r\n                    name='original_price'\r\n                    value={values.original_price}\r\n                    onChange={handleInputChange}\r\n                    error={errors.original_price}\r\n\r\n                    InputProps={{\r\n                      startAdornment: <InputAdornment position='start'>₹</InputAdornment>\r\n                    }}\r\n                    onBlur={calculateDiscount}\r\n\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={6} sm={6} md={3} lg={3}>\r\n                  <Controls.Input\r\n                    label=\"Discount\"\r\n                    type='number'\r\n                    name='discount'\r\n                    value={values.discount}\r\n                    onChange={handleInputChange}\r\n                    error={errors.discount}\r\n                    InputProps={{\r\n                      startAdornment: <InputAdornment position='start'>%</InputAdornment>\r\n                    }}\r\n                    onBlur={calculateDiscount}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={6} sm={6} md={3} lg={3}>\r\n                  <Controls.Input\r\n                    type='number'\r\n                    variant='outlined'\r\n                    label=\"Final Price After Discount\"\r\n                    disabled\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                      startAdornment: <InputAdornment position='start'>S.P</InputAdornment>\r\n                    }}\r\n\r\n                    name=\"finalPrice\"\r\n                    value={values.finalPrice}\r\n                    onChange={handleInputChange}\r\n                    error={errors.finalPrice}\r\n\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={6} sm={6} md={3} lg={3}>\r\n                  <Controls.Input\r\n                    type='number'\r\n                    name='validity'\r\n                    value={values.validity}\r\n                    onChange={handleInputChange}\r\n                    error={errors.validity}\r\n                    variant='outlined' label=\"Validity\"\r\n                    InputProps={{\r\n                      endAdornment: <InputAdornment position='end'>Month(s)</InputAdornment>\r\n                    }}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Controls.Select\r\n                label=\"Category\"\r\n                name=\"category_id\"\r\n                value={values.category_id}\r\n                onChange={handleInputChange}\r\n                options={categories}\r\n                error={errors.category_id}/>\r\n\r\n              <Autocomplete\r\n                multiple\r\n                freeSolo\r\n                name=\"shortHighlights\"\r\n                options={shortHighlights}\r\n                onChange={\r\n                  (e, newVal, reason) => {\r\n                    setValues({ ...values, shortHighlights: newVal })\r\n                  }\r\n                }\r\n                renderTags={(value, getTagProps) =>\r\n                  value.map((option, index) => (\r\n                    <Chip\r\n                      variant=\"outlined\"\r\n                      label={option} {...getTagProps({ index })}\r\n                      icon={<CheckSharp />}\r\n                    />\r\n                  ))\r\n                }\r\n                renderInput={(params) => (\r\n                  <TextField {...params}  label=\"Short highlights\" placeholder=\"type and enter\" />\r\n                )}\r\n              />\r\n\r\n\r\n              <Autocomplete \r\n                multiple\r\n                freeSolo\r\n                options={tags}\r\n                defaultValue={tags}\r\n                onChange={\r\n                  (e, newVal, reason) => {\r\n                    setValues({ ...values, tags: newVal })\r\n                  }\r\n                }\r\n                renderTags={(value, getTagProps) =>\r\n                  value.map((option, index) => (\r\n                    <Chip variant=\"outlined\" label={option} {...getTagProps({ index })} />\r\n                  ))\r\n                }\r\n                renderInput={(params) => (\r\n                  <TextField {...params} label=\"Tags\" placeholder=\"type and enter\" />\r\n                )}\r\n              />\r\n\r\n            </Stack>\r\n          </Grid>\r\n      <Grid item xs={12} sm={12} md={6} lg={6} xl={6}>\r\n          \r\n              <div style={{ position: \"relative\" }}>\r\n                <img src={values.image} alt=\"image\" style={{width:\"90%\",height:\"250px\"}} />\r\n                 {values.image && \r\n                 <IconButton\r\n                  onClick={() => {\r\n                    setValues({...values,image:dummyimage})\r\n                  }}\r\n                  sx={{ color: \"red\", position: \"absolute\", bottom: \"10px\", right: \"10px\" }}>\r\n                  <Delete />\r\n                </IconButton>}\r\n              </div>\r\n            \r\n\r\n            <FormControl fullWidth>\r\n              <TextField \r\n                fullWidth\r\n                variant='outlined'\r\n                label=\"Thumbnail Image URL\"\r\n                name='image'\r\n                value={values.image}\r\n                onChange={handleInputChange}\r\n                error={errors.image}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position='end'>\r\n                      {uploadProgress ?\r\n                        <CircularProgress /> :\r\n                        <Button variant='contained' color='primary' component=\"label\">\r\n                          Upload\r\n                          <input hidden\r\n                            accept=\"image/*\"\r\n                            id='inputThumbnailFile'\r\n                            multiple type=\"file\"\r\n                            onChange={handleImageChooser}\r\n                          />\r\n                        </Button>\r\n                      }\r\n                    </InputAdornment>\r\n                  )\r\n                }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }} />\r\n            </FormControl>\r\n      </Grid>\r\n     </Grid>\r\n\r\n      \r\n         <TinyMceEditor\r\n           name=\"course_description\"\r\n           editorRef={editorRef}\r\n           initValue={values.course_description}/>\r\n\r\n        <FormControl>\r\n          <Controls.RadioGroup\r\n            name=\"status\"\r\n            label=\"Status\"\r\n            value={values.status}\r\n            onChange={handleInputChange}\r\n            items={statusValue}/>\r\n\r\n            <FormHelperText>{errors.status}</FormHelperText>\r\n\r\n        </FormControl>\r\n\r\n         {progress? <CircularProgress/> : \r\n           <Button endIcon={<ArrowRight/>} type='submit' style={{marginTop:\"25px\"}} variant='contained' color='primary'>Submit Data</Button>\r\n        }\r\n        </Form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default InputCourseForm","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courses\\components\\CourseItemCard.jsx",["565","566","567","568","569"],"import { Delete, Edit, LinkOffOutlined, LinkOutlined, ListAltRounded } from '@material-ui/icons';\r\nimport { Button, CardActions, CardHeader, Chip, Divider, IconButton, Stack, Tooltip } from '@mui/material';\r\nimport { Card, CardContent, CardMedia, Typography } from '@mui/material';\r\nimport { deleteDoc, doc } from 'firebase/firestore';\r\nimport React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport DeleteDialog from '../../../components/Dialogs/DeleteDialog';\r\nimport PopupDialog from '../../../components/Dialogs/PopupDialog';\r\nimport { dbFirestore } from '../../../firebase/FirebaseConfig';\r\nimport { updateCourse } from '../../../services/CourseService';\r\nimport InputCourseForm from \"../../AddCourse/components/InputCourseForm\"\r\nimport { getAuth } from 'firebase/auth';\r\n\r\n\r\n\r\nfunction CourseItemCard(props) {\r\n  const { dataItem } = props;\r\n\r\n  const [openDialog, setOpenDialog] = useState(false)\r\n  const [updateDialog, setUpdateDialog] = useState(false);\r\n  const [recordForEdit, setRecordForEdit] = useState(null);\r\n  const [progress,setProgress] = useState(false)\r\n\r\n  const [dynamicLink,setDynamicLink]=useState(\"\");\r\n\r\n  //handle item delete\r\n  const handleDelete = async (item) => {\r\n    console.log(dataItem.id);\r\n    setOpenDialog(false);\r\n\r\n    try {\r\n      await deleteDoc(doc(dbFirestore, \"COURSES\", dataItem.id))\r\n      toast.success(\"Course has been deleted\", {\r\n        theme: \"colored\"\r\n      });\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const addOrEdit = (docId,data,cDescription, resetForm) => {\r\n    if (docId!= null){\r\n      updateCourse(docId,data,cDescription)\r\n      toast.success(\"Data update successfully\");\r\n    }\r\n    setUpdateDialog(false)\r\n    setProgress(false);\r\n  }\r\n\r\n  const openInPopup = (item) => {\r\n    setRecordForEdit(item);\r\n    setUpdateDialog(true)\r\n  }\r\n\r\n  const createLink=()=>{\r\n    createDynamicLink();\r\n  }\r\n  \r\n\r\n  const createDynamicLink = async () => {\r\n    // Get an access token for Firebase API authentication\r\n    \r\n    // Define the request payload\r\n    const payload = {\r\n      dynamicLinkInfo: {\r\n        domainUriPrefix: \"https://studyplus12.page.link\",\r\n        link: `https://starcentre.in/courses?id=${dataItem.id}&type=course`,\r\n        androidInfo: {\r\n          androidPackageName: \"com.studygrown.studyplus\"\r\n        },\r\n        socialMetaTagInfo: {\r\n          socialTitle: dataItem.title,\r\n          socialDescription:`${dataItem.data.discount}% off for ${dataItem.data.title}`,\r\n          socialImageLink: dataItem.data.image\r\n      }\r\n      },\r\n      suffix: {\r\n        option: \"SHORT\"\r\n      }\r\n    };\r\n    \r\n    // Send a POST request to the Firebase API endpoint to create a Dynamic Link\r\n    const response = await fetch(\"https://firebasedynamiclinks.googleapis.com/v1/shortLinks?key=AIzaSyBYfAssJvj4uBIAuFZRg89rlYmKpcxyPkA\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Authorization\": \"bearer AIzaSyBYfAssJvj4uBIAuFZRg89rlYmKpcxyPkA\",\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(payload)\r\n    });\r\n    \r\n    // Parse the response JSON and extract the short Dynamic Link\r\n    const json = await response.json();\r\n    const shortLink = json.shortLink;\r\n    \r\n  \r\n    //copy to clipboard\r\n    try {\r\n      await navigator.clipboard.writeText(shortLink);\r\n      toast.success(\"Link copied to clipboard -\"+shortLink);\r\n    } catch (error) {\r\n      toast.error(\"something went wrong\");\r\n    }\r\n  }\r\n  \r\n\r\n\r\n  return (\r\n    <Card>\r\n     \r\n      <CardMedia\r\n        sx={{ height: 200 }}\r\n        image={dataItem.data.image}\r\n        title={dataItem.data.title}\r\n      />\r\n      <CardContent>\r\n        <Typography variant='h5' component=\"div\">{dataItem.data.title}</Typography>\r\n        \r\n        <Stack direction=\"row\"  spacing={1} sx={{marginTop:4}}>\r\n          <Typography variant='subtitle2' component=\"p\">\r\n            <strong>₹{dataItem.data.finalPrice} </strong>\r\n          </Typography>\r\n         \r\n          <Typography variant='subtitle2' sx={{color:\"#9e9e9e\",textDecoration:\"line-through\"}} >\r\n            <strong>₹{dataItem.data.original_price} </strong>\r\n          </Typography>\r\n\r\n          <Chip size='small' label={`${dataItem.data.discount}% Off`} color=\"success\"></Chip>\r\n\r\n        </Stack>\r\n\r\n\r\n      </CardContent>\r\n      <Divider />\r\n      <CardActions sx={{ justifyContent: \"space-between\" }}>\r\n        <Link to={{\r\n          pathname:\"/app/courseContent\",\r\n          state:{\r\n            courseId:dataItem.id,\r\n            title:dataItem.data.title\r\n          }\r\n          }} style={{textDecoration:\"none\"}}>\r\n          <Button\r\n            variant='contained'\r\n            color='primary'\r\n            startIcon={<ListAltRounded />}>Content</Button>\r\n        </Link>\r\n\r\n        <Stack direction=\"row\">\r\n          <Tooltip title=\"Edit\">\r\n            <IconButton\r\n              style={{ color: \"green\", marginRight: \"10px\" }}\r\n              onClick={() => openInPopup(dataItem.data)}>\r\n              <Edit />\r\n            </IconButton>\r\n          </Tooltip>\r\n\r\n          <Tooltip title=\"Delete\">\r\n            <IconButton\r\n              onClick={() => setOpenDialog(true)}\r\n              style={{ color: \"red\" }}>\r\n              <Delete />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <Tooltip title=\"Copy Link\">\r\n            <IconButton\r\n              onClick={() => createLink()}\r\n              style={{ color: \"blue\" }}>\r\n              <LinkOutlined />\r\n            </IconButton>\r\n\r\n          </Tooltip>\r\n\r\n        </Stack>\r\n      </CardActions>\r\n\r\n      <DeleteDialog\r\n        openDialog={openDialog}\r\n        setOpenDialog={setOpenDialog}\r\n        onAction={handleDelete}\r\n        title=\"Delete\" />\r\n\r\n      <PopupDialog\r\n        title=\"Update Course Details\"\r\n        openDialog={updateDialog}\r\n        setOpenDialog={setUpdateDialog}\r\n        maxWidth=\"lg\">\r\n        <InputCourseForm\r\n         recordForEdit={recordForEdit}\r\n         addOrEdit={addOrEdit}\r\n         progress={progress}\r\n         setProgress={setProgress}\r\n        />\r\n      </PopupDialog>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CourseItemCard","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\quizzes\\components\\QuizCardItem.jsx",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\quizzes\\components\\AddOrEditQuizForm.jsx",["570","571","572","573","574","575","576"],"import { Autocomplete, Box, Button, CircularProgress, FormControl, FormHelperText, Grid, InputLabel, MenuItem, Select, TextField } from '@mui/material'\r\nimport { child, equalTo, get, onValue, orderByChild, query, ref } from 'firebase/database'\r\nimport React from 'react'\r\nimport { useRef } from 'react'\r\nimport { useState } from 'react'\r\nimport { useEffect } from 'react'\r\nimport TinyMceEditor from '../../../components/helper/TinyMceEditor'\r\nimport {useForm} from \"../../../components/helper/useForm\"\r\nimport { dbRealtime } from '../../../firebase/FirebaseConfig'\r\n\r\n\r\n\r\nconst initialValue={\r\n    title:\"\",\r\n    questions:\"\",\r\n    max_marks:\"\",\r\n    duration:\"\",\r\n    subject_id:\"\",\r\n    class_id:\"\",\r\n    instructions:\"<p>Write quiz instructions here..</p>\"\r\n\r\n}\r\n\r\nfunction AddOrEditQuizForm(props) {\r\n\r\n    const {recordForEdit,addOrEdit,loading}=props\r\n\r\n    //data states\r\n    const [categoryData,setCategoryData]=useState([\"Test1\",\"test2\"]);\r\n    const [subjectData,setSubjectData]=useState([]);\r\n   \r\n\r\n    \r\n \r\n\r\n    //ref Hooks\r\n    const editorRef=useRef(null);\r\n\r\n\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('title' in fieldValues)\r\n            temp.title = fieldValues.title ? \"\" : \"This field is required.\"\r\n\r\n        if ('questions' in fieldValues)\r\n            temp.questions = fieldValues.questions ? \"\" : \"This field is required.\"\r\n        \r\n        if ('duration' in fieldValues)\r\n            temp.duration = fieldValues.duration ? \"\" : \"This field is required.\"\r\n\r\n        if ('max_marks' in fieldValues)\r\n            temp.max_marks = fieldValues.max_marks ? \"\" : \"This field is required.\"\r\n        \r\n        if ('class_id' in fieldValues)\r\n            temp.class_id = fieldValues.class_id ? \"\" : \"This field is required.\"\r\n        \r\n        if ('subject_id' in fieldValues)\r\n            temp.subject_id = fieldValues.subject_id ? \"\" : \"This field is required.\"\r\n        \r\n        \r\n        setErrors({\r\n            ...temp\r\n        })\r\n\r\n        if (fieldValues == values)\r\n            return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    \r\n\r\n const {values,\r\n    setValues,\r\n    errors,\r\n    setErrors,\r\n    handleInputChange,\r\n    resetForm} = useForm(initialValue,true,validate)\r\n \r\n const handleSubmit=(e)=>{\r\n    e.preventDefault();\r\n    \r\n    if(validate()){\r\n       const quizInstruction=editorRef.current.getContent();\r\n       addOrEdit(values.quiz_id,values,quizInstruction, resetForm)\r\n    }\r\n }\r\n\r\n //handle board class autocomplete filed\r\n const handleClassSelector=(event)=>{\r\n    const value=event.target.value;\r\n    if(value!=null){\r\n        setSubjectData([]);\r\n        getSubjects(value);\r\n\r\n        //update value of class_id\r\n        setValues({\r\n            ...values,\r\n            class_id:value\r\n        })\r\n        \r\n    }\r\n }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//get board Class\r\n const getBoardClass=()=>{\r\n    const dbRef=ref(dbRealtime);\r\n    get(child(dbRef,\"/boardClass/\")).then((snapshot)=>{\r\n      if(snapshot.exists()){\r\n        const data=snapshot.val();\r\n        setCategoryData(Object.values(data));\r\n        console.log(data)\r\n      }else {\r\n        console.log(\"No data found\");\r\n      }\r\n    }).catch((error)=>{\r\n        console.log(error);\r\n    })\r\n  }\r\n\r\n  //get subjects\r\n  const getSubjects=(id)=>{\r\n    const qRef=query(ref(dbRealtime,\"/subjects\"),orderByChild(\"class_id\"),equalTo(id))\r\n    onValue(qRef,(snapshot)=>{\r\n      if(snapshot.exists()){\r\n        const data=snapshot.val();\r\n        setSubjectData(Object.values(data))\r\n        console.log(subjectData);\r\n      }else {\r\n        setSubjectData([]);\r\n      }\r\n    })\r\n  }\r\n\r\n useEffect(()=>{\r\n    if(recordForEdit!=null){\r\n        setValues({...recordForEdit})\r\n    }\r\n\r\n    getBoardClass();\r\n\r\n },[recordForEdit])\r\n\r\n useEffect(()=>{\r\n    if(values.class_id!=\"\" && values.class_id!=undefined){\r\n        getSubjects(values.class_id);\r\n        console.log(values.class_id);\r\n    }\r\n },[values.class_id])\r\n\r\n\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n        <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={12} md={6} lg={6} xl={6}>\r\n                <TextField\r\n                    fullWidth\r\n                    variant='outlined'\r\n                    label=\"Quiz Name\"\r\n                    type='text'\r\n                    name='title'\r\n                    value={values.title}\r\n                    error={errors.title}\r\n                    onChange={handleInputChange}/>\r\n\r\n            </Grid>\r\n            <Grid item xs={4} sm={4} md={2} lg={2} xl={2}>\r\n                    <TextField\r\n                        variant='outlined'\r\n                        label=\"Time (in Minutes)\"\r\n                        type='number'\r\n                        name='duration'\r\n                        value={values.duration}\r\n                        error={errors.duration}\r\n                        onChange={handleInputChange}/>\r\n            </Grid>\r\n            <Grid item xs={4} sm={4} md={2} lg={2} xl={2}>\r\n                     <TextField\r\n                        variant='outlined'\r\n                        label=\"Total Qn.\"\r\n                        type='number'\r\n                        name='questions'\r\n                        value={values.questions}\r\n                        error={errors.questions}\r\n                        onChange={handleInputChange}/>\r\n            </Grid>\r\n            <Grid item xs={4} sm={4} md={2} lg={2} xl={2}>\r\n                 <TextField\r\n                        variant='outlined'\r\n                        label=\"Max Marks\"\r\n                        type='number'\r\n                        name='max_marks'\r\n                        value={values.max_marks}\r\n                        error={errors.max_marks}\r\n                        onChange={handleInputChange}/>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid container spacing={2} sx={{mt:1}}>\r\n            <Grid item xs={12} sm={12} md={6} lg={6} xl={6}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel id='lbl-select-class'>Select Class</InputLabel>\r\n                    <Select\r\n                        labelId='lbl-select-class'\r\n                        id='select-class'\r\n                        label=\"Select Class\"\r\n                        name='class_id'\r\n                        error={errors.class_id}\r\n                        value={values.class_id}\r\n                        onChange={handleClassSelector}>\r\n                            {\r\n                                categoryData.map((item)=>(\r\n                                    <MenuItem value={item.id}>{item.title}</MenuItem>\r\n                                ))\r\n                            }\r\n                        </Select>\r\n                        {errors.class_id &&  <FormHelperText>{errors.class_id}</FormHelperText>}\r\n                </FormControl>\r\n                {/* <Autocomplete\r\n                    freeSolo\r\n                    id='selectClass'\r\n                    options={categoryData}\r\n                    getOptionLabel={(option)=>option.title ||\"\"}\r\n                    onChange={handleClassSelector}\r\n                    \r\n                    renderInput={\r\n                        (params)=>(\r\n                            <TextField \r\n                                {...params} \r\n                                label=\"Select Class\"\r\n                                error={errors.subject_id}\r\n                                helperText={errors.subject_id}/>\r\n                        )\r\n                    }/> */}\r\n                   \r\n            </Grid>\r\n            <Grid item xs={12} sm={12} md={6} lg={6} xl={6}>\r\n            <FormControl fullWidth>\r\n                    <InputLabel id='lbl-select-subject'>Select Class</InputLabel>\r\n                    <Select\r\n                        labelId='lbl-select-subject'\r\n                        id='select-subject'\r\n                        label=\"Select Subject\"\r\n                        name='subject_id'\r\n                        error={errors.subject_id}\r\n                        value={values.subject_id}\r\n                        onChange={handleInputChange}>\r\n                            {\r\n                                subjectData.map((item)=>(\r\n                                    <MenuItem  value={item.subject_id}>{item.name}</MenuItem>\r\n                                ))\r\n                            }\r\n                        </Select>\r\n                       {errors.subject_id &&  <FormHelperText>{errors.subject_id}</FormHelperText>}\r\n                </FormControl>\r\n                {/* <Autocomplete\r\n                    id='selectSubject'\r\n                    options={subjectData}\r\n                    getOptionLabel={(option)=>option.name ||\"\"}\r\n                    onChange={handleSubjectSelector}\r\n                    loading={loading}\r\n                    open={openSubField}\r\n                    onOpen={handleOpenSubField}\r\n                    onClose={()=>setOpenSubField(false)}\r\n                    renderInput={\r\n                        (params)=>(\r\n                            <TextField \r\n                                {...params} \r\n                                label=\"Select Subject\"\r\n                                InputProps={{\r\n                                    ...params.InputProps,\r\n                                    endAdornment:(\r\n                                        <>\r\n                                            {loading?<CircularProgress color=\"inherit\" size={20}/>:null}\r\n                                            {params.InputProps.endAdornment}\r\n                                        </>\r\n                                    )\r\n                                }}\r\n                                />\r\n                        )\r\n                    }\r\n                    \r\n                    /> */}\r\n                   \r\n            </Grid>\r\n        </Grid>\r\n\r\n        <Box sx={{mt:1}}>\r\n            <TinyMceEditor\r\n                name=\"Quiz Instructions\"\r\n                editorRef={editorRef}\r\n                initValue={values.instructions}\r\n                />\r\n        </Box>\r\n\r\n          {loading ? <CircularProgress /> :\r\n              <Button\r\n                  type='submit'\r\n                  variant='contained'\r\n                  sx={{ mt: 2 }}\r\n              >\r\n                  Submit\r\n              </Button>\r\n          }\r\n\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default AddOrEditQuizForm","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\quizQuestions\\components\\AddOrEditQuestionForm.jsx",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\quizQuestions\\components\\QuestionCardItem.jsx",["577","578","579","580","581","582","583"],"import { Check, CheckCircle } from '@material-ui/icons';\r\nimport { Button, CardActions, Stack } from '@mui/material';\r\nimport { Avatar, Card, CardContent, CardHeader, Typography } from '@mui/material';\r\nimport { blue, red } from '@mui/material/colors';\r\nimport React from 'react'\r\n\r\nfunction QuestionCardItem(props) {\r\n    const {item,index,handleEdit,handleDelete}=props;\r\n\r\n    const correctOption=item.correctOption;\r\n    const active={\r\n        color:\"green\",\r\n        fontWeight:\"700\"\r\n    }\r\n\r\n  return (\r\n    <Card>\r\n      \r\n        <CardContent>\r\n         <Typography variant='h6'>Q{index+1}. {item.question}</Typography>\r\n              <ol type='A' style={{ padding: \"none\",fontSize:\"16px\" }}>\r\n                  {\r\n                    \r\n                      item.options.map((item,index) => (\r\n                          <li style= {correctOption==index?active:null}>\r\n                            {item} \r\n                            {correctOption==index?\r\n                                <CheckCircle/>:\"\"}\r\n                          </li>\r\n                      ))\r\n                  }\r\n              </ol>\r\n\r\n              {item.explain?\r\n                  <Stack direction=\"column\">\r\n                      <Typography variant='subtitle2'>Explanation:</Typography>\r\n                      <Typography variant='subtitle1'>\r\n                          {item.explain}\r\n                      </Typography>\r\n                  </Stack> :\"\"\r\n                }\r\n             \r\n        </CardContent>\r\n        <CardActions>\r\n            <Button \r\n                variant='outlined' \r\n                color='success'\r\n                onClick={()=>handleEdit(item)}>\r\n                Edit\r\n            </Button>\r\n            <Button \r\n                variant='outlined' \r\n                color='error'\r\n                onClick={()=>handleDelete(item.question_id)}>\r\n                Delete\r\n            </Button>\r\n        </CardActions>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default QuestionCardItem","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\helper\\useForm.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\controls\\Controls.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\freeVideos\\components\\PlayVideo.jsx",["584"],"import React from 'react'\r\nimport { useEffect } from 'react';\r\nimport { useRef } from 'react'\r\n\r\nfunction PlayVideo({videoUrl}) {\r\n    const videoRef=useRef();\r\n\r\n    useEffect(()=>{\r\n        console.log(videoUrl)\r\n        videoRef.current?.load();\r\n    },[]);\r\n\r\n  return (\r\n      <div>\r\n          <video\r\n              width=\"100%\" height=\"300\" controls\r\n            //   onLoadedMetadata={handleVideoMetaData}\r\n              ref={videoRef}\r\n              autoPlay >\r\n              <source src={videoUrl} type='video/mp4' />\r\n              Your browser does not support the video tag.\r\n          </video>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default PlayVideo","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\innerItems\\VideosList.jsx",["585"],"import { Box } from '@material-ui/core';\r\nimport { collection, onSnapshot, orderBy, query, where } from 'firebase/firestore'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { dbFirestore } from '../../../../firebase/FirebaseConfig';\r\nimport VideoListItem from './VideoListItem';\r\n\r\nfunction VideosList(props) {\r\n    const {sectionId,setRecordForEdit,setVideoDialog}=props\r\n    const [videosData,setVideosData]=useState([]);\r\n\r\n    const getVideos=(sid)=>{\r\n      console.log(sid);\r\n      const qRef=query(collection(dbFirestore,\"COURSE_VIDEOS\"),where(\"section_id\",\"==\",sid),orderBy(\"timestamp\",\"asc\"))\r\n          onSnapshot(qRef,(snapshot)=>{\r\n            setVideosData(snapshot.docs.map(doc=>({\r\n              id:doc.id,\r\n              data:doc.data()\r\n             })))\r\n\r\n             console.log(videosData);\r\n          });\r\n    }\r\n\r\n  useEffect(()=>{\r\n    getVideos(sectionId);\r\n  },[])\r\n    \r\n  return (\r\n    \r\n    <Box style={{marginTop:\"30px\"}}>\r\n      {videosData.map((item)=>(\r\n        <VideoListItem \r\n          key={item.key} \r\n          data={item.data}\r\n          setRecordForEdit={setRecordForEdit}\r\n          setVideoDialog={setVideoDialog}/>\r\n      ))}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default VideosList","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\innerItems\\QuizList.jsx",["586","587"],"import { Box } from '@material-ui/core';\r\nimport { collection, onSnapshot, orderBy, query, where } from 'firebase/firestore'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { dbFirestore } from '../../../../firebase/FirebaseConfig';\r\nimport QuizListItem from './QuizListItem';\r\n\r\nfunction QuizList(props) {\r\n    const {sectionId}=props\r\n    const [quizData,setQuizData]=useState([]);\r\n\r\n    const getQuizzes=(sid)=>{\r\n      console.log(sid);\r\n      const qRef=query(collection(dbFirestore,\"COURSE_QUIZZES\"),where(\"section_id\",\"==\",sid))\r\n          onSnapshot(qRef,(snapshot)=>{\r\n            setQuizData(snapshot.docs.map(doc=>({\r\n              id:doc.id,\r\n              data:doc.data()\r\n             })))\r\n\r\n             console.log(quizData);\r\n          });\r\n    }\r\n\r\n  useEffect(()=>{\r\n    getQuizzes(sectionId);\r\n  },[])\r\n    \r\n  return (\r\n    \r\n    <Box style={{marginTop:\"30px\"}}>\r\n      {quizData.map((item)=>(\r\n        <QuizListItem \r\n          key={item.key} \r\n          data={item.data}\r\n          />\r\n      ))}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default QuizList","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\innerItems\\PDFList.jsx",["588"],"import { Box } from '@mui/material';\r\nimport { collection, onSnapshot, orderBy, query, where } from 'firebase/firestore';\r\nimport React from 'react'\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { dbFirestore } from '../../../../firebase/FirebaseConfig';\r\nimport PDFListItem from './PDFListItem';\r\n\r\nfunction PDFList(props) {\r\n    const {sectionId,setRecordForEdit,setPdfDialog}=props\r\n    const [pdfData,setPdfData]=useState([]);\r\n    \r\n\r\n    const getPDFs=(sid)=>{\r\n\r\n      const qRef=query(collection(dbFirestore,\"COURSE_PDFS\"),where(\"section_id\",\"==\",sid),orderBy(\"timestamp\",\"asc\"))\r\n          onSnapshot(qRef,(snapshot)=>{\r\n            setPdfData(snapshot.docs.map(doc=>({\r\n              id:doc.id,\r\n              data:doc.data()\r\n             })))\r\n\r\n             console.log(pdfData);\r\n          });\r\n    }\r\n\r\n    \r\n\r\n  useEffect(()=>{\r\n    getPDFs(sectionId);\r\n  },[])\r\n  return (\r\n    \r\n    <Box style={{marginTop:\"30px\"}}>\r\n      {pdfData.map((item)=>(\r\n        <PDFListItem \r\n          key={item.key} \r\n          data={item.data}\r\n          setRecordForEdit={setRecordForEdit}\r\n          setPdfDialog={setPdfDialog}/>\r\n      ))}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default PDFList","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\sectionForms\\AddOrEditVideoForm.jsx",["589","590","591","592","593","594","595","596","597"],"import { CircularProgress, FormControl, Grid, IconButton, InputAdornment, TextField } from '@material-ui/core'\r\nimport { CameraAlt, CloudUploadOutlined } from '@material-ui/icons'\r\nimport { Button, FormControlLabel, Switch } from '@mui/material'\r\nimport { Stack } from '@mui/system'\r\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { toast } from 'react-toastify'\r\nimport YouTube from 'react-youtube'\r\nimport Controls from '../../../../components/controls/Controls'\r\nimport { Form, useForm } from '../../../../components/helper/useForm'\r\nimport LinearProgressWithLabel from '../../../../components/ProgressBar/LinearProgressWithLabel'\r\nimport { storage } from '../../../../firebase/FirebaseConfig'\r\nimport guideYtVideoIdImg from \"../../../../images/guideYoutubeId.png\"\r\n\r\nconst dummyimage = \"https://dummyimage.com/600x400/a1a1a1/e8e8e8.jpg&text=No+Image\";\r\n\r\nconst initialValue = {\r\n    title: \"\",\r\n    video_length: 0,\r\n    videoLengthStr: \"\",\r\n    thumbnail_url: dummyimage,\r\n    videoUrl: \"\",\r\n    validVideo: false,\r\n    youtubePlayer: false,\r\n    ytVideoId: \"\",\r\n}\r\n\r\nfunction AddOrEditVideoForm(props) {\r\n    const { recordForEdit, addOrEditVideo } = props\r\n\r\n    const [progress, setProgress] = useState(false)\r\n    const [progress2, setProgress2] = useState(false)\r\n    const [uploadProgress, setUploadProgress] = useState(0);\r\n    const [selectedVideo, setSelectedVideo] = useState(null);\r\n    const [selectedImage, setSelectedImage] = useState(\"\");\r\n    const [videoLoadSuccess, setVideoLoadSuccess] = useState(false);\r\n\r\n    const videoRef = useRef(null)\r\n\r\n    //states\r\n    const [ytPlayer, setYtPlayer] = useState(false);\r\n\r\n\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('title' in fieldValues)\r\n            temp.title = fieldValues.title ? \"\" : \"This field is required.\"\r\n\r\n        if ('subtitle' in fieldValues)\r\n            temp.subtitle = fieldValues.subtitle ? \"\" : \"This field is required.\"\r\n\r\n        if(!ytPlayer){\r\n            if ('videoUrl' in fieldValues)\r\n            temp.videoUrl = fieldValues.videoUrl ? \"\" : \"Please upload a video or paste video url\"\r\n\r\n            if ('validVideo' in fieldValues)\r\n            temp.validVideo = fieldValues.validVideo ? \"\" : toast.error(\"Please upload a valid video\")\r\n\r\n        }else {\r\n            if ('ytVideoId' in fieldValues)\r\n                temp.ytVideoId = fieldValues.ytVideoId ? \"\" : \"Paste Youtube Video Id!\"\r\n\r\n        }\r\n\r\n        setErrors({\r\n            ...temp\r\n        })\r\n\r\n        if (fieldValues == values)\r\n            return Object.values(temp).every(x => x == \"\")\r\n    }\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm } = useForm(initialValue, true, validate)\r\n\r\n    const handleImageChooser = (event) => {\r\n        if (event.target.files && event.target.files[0]) {\r\n            let img = event.target.files[0]\r\n            setSelectedImage(URL.createObjectURL(img));\r\n            uploadImage(img);\r\n        }\r\n    }\r\n    const handleVideoChooser = (event) => {\r\n        if (event.target.files && event.target.files[0]) {\r\n            const video = event.target.files[0];\r\n            const objectURL = URL.createObjectURL(video);\r\n            setSelectedVideo(objectURL);\r\n            videoRef.current.load();\r\n            uploadVideo(video);\r\n        }\r\n    }\r\n\r\n    const handleVideoMetaData = () => {\r\n        const video = videoRef.current;\r\n        const formattedDuration = formatDuration(video.duration)\r\n\r\n        setValues({\r\n            ...values,\r\n            videoLengthStr: formattedDuration,\r\n            video_length: Math.floor(video.duration),\r\n            validVideo: true\r\n        });\r\n\r\n\r\n    }\r\n\r\n    const handleSwitch = (event) => {\r\n        const checked = event.target.checked;\r\n        setYtPlayer(checked)\r\n        setValues({ ...values, youtubePlayer: checked })\r\n        setErrors({ ...errors })\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (validate()) {\r\n            addOrEditVideo(values.video_id, values, resetForm)\r\n        }\r\n    }\r\n\r\n    //upload video\r\n\r\n    const uploadVideo = (file) => {\r\n        if (!file) {\r\n            toast.error(\"Please select a file first\");\r\n            return\r\n        }\r\n        setProgress(true)\r\n        const fileName = `${file.name}_${Date.now()}`;\r\n        const storageRef = ref(storage, `/videos/${file.name}`)\r\n        const uploadTask = uploadBytesResumable(storageRef, file)\r\n        uploadTask.on(\"state_changed\", (snapshot) => {\r\n            const percent = (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n            setUploadProgress(percent)\r\n\r\n        }, (err) => console.log(err),\r\n            () => {\r\n                //get download url\r\n                setProgress(false)\r\n                getDownloadURL(uploadTask.snapshot.ref).then((url) => {\r\n                    setValues(prev => ({\r\n                        ...prev,\r\n                        videoUrl: url\r\n                    }))\r\n                    //now load video into player\r\n                    videoRef.current?.load();\r\n\r\n                })\r\n\r\n            }\r\n        );\r\n    }\r\n\r\n    //upload Image \r\n    const uploadImage = async (file) => {\r\n        if (!file) {\r\n            toast.error(\"Please select a file first\");\r\n            return\r\n        }\r\n        setProgress2(true)\r\n        const fileName = `${file.name}_${Date.now()}`;\r\n        const storageRef = ref(storage, `/thumbnails/${fileName}`)\r\n        const uploadTask = uploadBytesResumable(storageRef, file)\r\n        uploadTask.on(\"state_changed\", (snapshot) => {\r\n            const percent = (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n            setUploadProgress(percent)\r\n\r\n        }, (err) => console.log(err),\r\n            () => {\r\n                //get download url\r\n                setProgress2(false)\r\n                getDownloadURL(uploadTask.snapshot.ref).then((url) => {\r\n                    setValues({ ...values, thumbnail_url: url })\r\n                })\r\n            }\r\n        );\r\n    }\r\n\r\n    function formatDuration(duration) {\r\n        const minutes = Math.floor(duration / 60);\r\n        const seconds = Math.floor(duration % 60);\r\n        return `${minutes} min ${seconds} sec`;\r\n    }\r\n\r\n    //useEffect hooks\r\n    useEffect(() => {\r\n        if (recordForEdit != null) {\r\n            setValues({ ...recordForEdit })\r\n            setYtPlayer(recordForEdit?.youtubePlayer)\r\n            \r\n        }\r\n    }, [recordForEdit])\r\n\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Grid container spacing={1}>       \r\n                <Grid item xs={12} sm={12} md={8} lg={10}>\r\n                <FormControlLabel\r\n                            value=\"start\"\r\n                            control={\r\n                                <Switch color=\"primary\"\r\n                                    checked={ytPlayer}\r\n                                    onChange={handleSwitch}\r\n                                />\r\n                            }\r\n                            label={ytPlayer ? \"Youtube Video\" : \"Regular Video\"}\r\n                            labelPlacement=\"start\" />\r\n                    {\r\n                        ytPlayer? \r\n                        <>\r\n                       \r\n                          <YouTube\r\n                            videoId={values.ytVideoId}\r\n                            id=\"youtube player\"\r\n                            title=\"Youtube Player\"\r\n                            opts={{\r\n                                width:\"590\",\r\n                                height:\"390\",\r\n                                playerVars: {\r\n                                    // https://developers.google.com/youtube/player_parameters\r\n                                    autoplay: 1,\r\n                                  }\r\n                            }}/>\r\n                        </> \r\n                        : \r\n                        <>\r\n                            <video\r\n                                width=\"100%\" height=\"300\" controls\r\n                                onLoadedMetadata={handleVideoMetaData}\r\n                                ref={videoRef}\r\n                                autoPlay >\r\n                                <source src={values.videoUrl} type='video/mp4' />\r\n                                Your browser does not support the video tag.\r\n                            </video>\r\n                            {progress && <LinearProgressWithLabel value={uploadProgress} />}\r\n                        </>\r\n                    }\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={4} lg={2}>\r\n\r\n                    \r\n\r\n                    {!ytPlayer && <>\r\n                        { progress ? <CircularProgress /> : <Button\r\n                        fullWidth\r\n                        variant='outlined'\r\n                        color='primary'\r\n                        component=\"label\"\r\n                        endIcon={<CloudUploadOutlined />}>\r\n                        Upload\r\n                        <input hidden\r\n                            accept=\"video/*\"\r\n                            id='inputVideoFile'\r\n                            multiple type=\"file\"\r\n                            onChange={handleVideoChooser} />\r\n\r\n                    </Button>}\r\n\r\n                    </>}\r\n\r\n                </Grid>\r\n            </Grid>\r\n            \r\n            {\r\n                ytPlayer?\r\n                <>\r\n                 <img src={guideYtVideoIdImg} alt=\"Guide\" />\r\n                    {/* for Youtube Player */}\r\n                    <Controls.Input\r\n                    name=\"ytVideoId\"\r\n                    label=\"Youtube Video Id\"\r\n                    value={values.ytVideoId}\r\n                    onChange={handleInputChange}\r\n                    error={errors.ytVideoId}\r\n                    style={{width:\"95%\"}}\r\n                    />\r\n                </> :\r\n                <>\r\n            <Stack direction=\"row\" spacing={2}>\r\n                <Controls.Input\r\n                    name=\"videoUrl\"\r\n                    label=\"Video URL\"\r\n                    value={values.videoUrl}\r\n                    onChange={handleInputChange}\r\n                    error={errors.videoUrl}\r\n                    onBlur={() => {\r\n                        videoRef.current?.load();\r\n                    }}\r\n                    style={{ width: \"70%\" }} />\r\n\r\n                <Controls.Input\r\n                    disabled\r\n                    name=\"videoLengthStr\"\r\n                    label=\"Video Duration\"\r\n                    value={values.videoLengthStr}\r\n                    onChange={handleInputChange}\r\n                    error={errors.videoLengthStr}\r\n                    style={{ width: \"30%\" }} />\r\n\r\n                <Controls.Input\r\n                    hidden\r\n                    disabled\r\n                    name=\"video_length\"\r\n                    label=\"Video Length\"\r\n                    value={values.video_length}\r\n                    onChange={handleInputChange}\r\n                    error={errors.video_length}\r\n                    style={{ width: \"15%\" }} />\r\n            </Stack>\r\n                \r\n                </>\r\n            }\r\n\r\n\r\n\r\n\r\n            <Stack direction=\"row\" spacing={3}>\r\n\r\n                <img src={values.thumbnail_url} width={300} height={100} />\r\n\r\n                <FormControl>\r\n                    <TextField\r\n                        style={{ width: \"98%\" }}\r\n                        variant='outlined'\r\n                        label=\"Thumbnail Image URL\"\r\n                        name='image'\r\n                        value={values.thumbnail_url}\r\n                        onChange={handleInputChange}\r\n                        error={errors.image}\r\n                        InputProps={{\r\n                            endAdornment: (\r\n                                <InputAdornment position='end'>\r\n                                    {progress2 ?\r\n                                        <CircularProgress /> :\r\n                                        <IconButton color='primary'\r\n                                            aria-label=\"upload picture\" component=\"label\"\r\n                                        >\r\n                                            <input hidden\r\n                                                accept=\"image/*\"\r\n                                                id='inputThumbnailFile'\r\n                                                multiple type=\"file\"\r\n                                                onChange={handleImageChooser}\r\n                                            />\r\n                                            <CameraAlt />\r\n                                        </IconButton>\r\n                                        // <Button variant='contained' color='primary' component=\"label\">\r\n                                        //     Upload\r\n                                        // </Button>\r\n                                    }\r\n                                </InputAdornment>\r\n                            )\r\n                        }}\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }} />\r\n\r\n\r\n                </FormControl>\r\n\r\n            </Stack>\r\n\r\n            <Controls.Input\r\n                name=\"title\"\r\n                label=\"Title\"\r\n                value={values.title}\r\n                onChange={handleInputChange}\r\n                error={errors.title}\r\n                style={{ width: \"98%\" }} />\r\n\r\n            <Button\r\n                type='submit'\r\n                color='primary'\r\n                variant='contained'\r\n                sx={{ mt: 2 }}\r\n            >\r\n                Submit Data\r\n            </Button>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default AddOrEditVideoForm","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\sectionForms\\AddOrEditQuizForm.jsx",["598","599"],"import { Button, CircularProgress, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, Grid, InputLabel, MenuItem, Select, Stack } from '@mui/material';\r\nimport { child, equalTo, get, onValue, orderByChild, query, ref } from 'firebase/database';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { dbRealtime } from '../../../../firebase/FirebaseConfig';\r\nimport QuizSelectItems from '../innerItems/QuizSelectItems';\r\n\r\nfunction AddOrEditQuizForm(props) {\r\n  \r\n    const {handleAddQuiz,openDialog,setOpenDialog}=props\r\n    const [quizzesData,setQuizzesData]=useState({});\r\n    const [selectedQuizRecord,setSelectedQuizRecord]=useState([]);\r\n    const [loading,setLoading]=useState(false);\r\n\r\n    const [boardClassData,setBoardClassData]=useState({\r\n      id:\"\",\r\n      title:\"\"\r\n    });\r\n    const [subjectData,setSubjectData]=useState({\r\n      id:\"\"\r\n    });\r\n\r\n\r\n  \r\n    const handleSubmit=()=>{\r\n      handleAddQuiz(selectedQuizRecord)\r\n    }\r\n  \r\n    const handleClose=()=>{\r\n      setOpenDialog(false);\r\n  \r\n    }\r\n\r\n    const handleClassFilterChange=(event)=>{\r\n      const value=event.target.value;\r\n      if(value!=\"\"){\r\n        getSubjects(event.target.value);\r\n      }\r\n    }\r\n    const handleSubjectFilterChange=(event)=>{\r\n      const sValue=event.target.value;\r\n      if(sValue!=\"\")\r\n        getFilteredQuizzes(sValue);\r\n    }\r\n    \r\n  const getQuizzes=()=>{\r\n    setLoading(true);\r\n    const dbRef=ref(dbRealtime);\r\n    get(child(dbRef,\"/quizzes/\")).then((snapshot)=>{\r\n      if(snapshot.exists()){\r\n        const data=snapshot.val();\r\n        setQuizzesData(data);\r\n\r\n      }else {\r\n        console.log(\"No data found\");\r\n      }\r\n      setLoading(false);\r\n    }).catch((error)=>{\r\n        console.log(error);\r\n        setLoading(false)\r\n    })\r\n  \r\n  }  \r\n\r\n  const getFilteredQuizzes=(subjectId)=>{\r\n    setLoading(true);\r\n   const qRef=query(ref(dbRealtime,\"/quizzes\"),orderByChild(\"subject_id\"),equalTo(subjectId))\r\n    onValue(qRef,(snapshot)=>{\r\n        setQuizzesData(snapshot.val());\r\n        setLoading(false);\r\n    })\r\n  }\r\n  \r\n  const getBoardClass=()=>{\r\n    const dbRef=ref(dbRealtime);\r\n    get(child(dbRef,\"/boardClass/\")).then((snapshot)=>{\r\n      if(snapshot.exists()){\r\n        const data=snapshot.val();\r\n        setBoardClassData(data);\r\n      }else {\r\n        console.log(\"No data found\");\r\n      }\r\n    }).catch((error)=>{\r\n        console.log(error);\r\n    })\r\n  }\r\n\r\n  //get subjects\r\n  const getSubjects=(id)=>{\r\n    const dbRef=ref(dbRealtime);\r\n    get(child(dbRef,`/${id}/`)).then((snapshot)=>{\r\n      if(snapshot.exists()){\r\n        const data=snapshot.val();\r\n        setSubjectData(data);\r\n  \r\n      }else {\r\n        console.log(\"No data found\");\r\n      }\r\n    }).catch((error)=>{\r\n        console.log(error);\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    getQuizzes();\r\n    getBoardClass();\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    if(!openDialog){\r\n      setSelectedQuizRecord([]);\r\n    }\r\n  },[openDialog])\r\n\r\n\r\n  return (\r\n    <Dialog\r\n      open={openDialog}\r\n      onClose={handleClose}\r\n      disableBackdropClick={true}\r\n    >\r\n      <DialogTitle>Add Quiz</DialogTitle>\r\n      <DialogContentText sx={{px:2,py:1}}>\r\n        {/* FILTER */}\r\n        <Stack direction=\"row\">\r\n        <FormControl fullWidth size='small'>\r\n          <InputLabel id=\"filterByClass\">Filter By Class</InputLabel>\r\n          <Select \r\n           labelId='filterByClass'\r\n           id='filterClass'\r\n           label=\"Filter by Class\"\r\n           onChange={handleClassFilterChange}>\r\n            <MenuItem \r\n             value=\"\"\r\n             selected>\r\n              <em>None</em>\r\n            </MenuItem>\r\n            {\r\n              Object.values(boardClassData).map((item)=>(\r\n                <MenuItem key={item.id} value={item.id}>{item.title}</MenuItem>\r\n              ))\r\n            }\r\n           </Select>\r\n        </FormControl>\r\n        <FormControl fullWidth  size='small'>\r\n          <InputLabel id=\"filterBySubject\">Select Subject</InputLabel>\r\n          <Select\r\n          \r\n           labelId='filterBySubject'\r\n           id='filterSubject'\r\n           label=\"Select Subject\"\r\n           onChange={handleSubjectFilterChange}>\r\n            <MenuItem value=\"\">\r\n              <em>None</em>\r\n            </MenuItem>\r\n            {\r\n              Object.values(subjectData).map((item)=>(\r\n                <MenuItem key={item.subject_id} value={item.subject_id}>{item.name}</MenuItem>\r\n              ))\r\n            }\r\n           </Select>\r\n        </FormControl>\r\n        </Stack>\r\n      </DialogContentText>\r\n      <DialogContent>\r\n        \r\n        {\r\n          loading?<CircularProgress/>:\r\n          <Grid container>\r\n          {Object.values(quizzesData).map((value, index) => (\r\n            <Grid item xs={12} md={6} lg={6} spacing={2}>\r\n              <QuizSelectItems\r\n              key={value.quiz_id}\r\n              item={value}\r\n              setSelectedQuizRecord={setSelectedQuizRecord}\r\n              selectedQuizRecord={selectedQuizRecord}\r\n              />\r\n            </Grid>\r\n            ))}     \r\n        </Grid>\r\n        }\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button  onClick={handleClose}>Cancel</Button>\r\n        <Button  onClick={handleSubmit}>Save Record</Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default AddOrEditQuizForm","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\sectionForms\\AddOrEditPDFsForm.jsx",["600","601","602","603"],"import { ArrowRightAlt, CloudUploadSharp } from '@material-ui/icons';\r\nimport { Button, CircularProgress, Stack } from '@mui/material';\r\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport Controls from '../../../../components/controls/Controls';\r\nimport { Form, useForm } from '../../../../components/helper/useForm';\r\nimport LinearProgressWithLabel from '../../../../components/ProgressBar/LinearProgressWithLabel';\r\nimport { storage } from '../../../../firebase/FirebaseConfig';\r\n\r\n\r\nconst initialValue={\r\n    pdfUrl:\"\",\r\n    title:\"\"\r\n}\r\n// const regex = new RegExp('(https?://)?([\\\\da-z.-]+)\\\\.([a-z.]{2,6})[/\\\\w .-]*/?.pdf$');\r\n\r\nfunction AddOrEditPDFsForm(props) {\r\n    const {recordForEdit,addOrEdit}=props;\r\n\r\n    const[progress,setProgress]=useState();\r\n    const [uploadProgress,setUploadProgress]=useState(0);\r\n\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('title' in fieldValues)\r\n            temp.title = fieldValues.title ? \"\" : \"This field is required.\"\r\n\r\n        if ('pdfUrl' in fieldValues)\r\n            temp.pdfUrl = fieldValues.pdfUrl? \"\" : \"Valid pdf file required\"\r\n        \r\n\r\n        setErrors({\r\n            ...temp\r\n        })\r\n\r\n        if (fieldValues == values)\r\n            return Object.values(temp).every(x => x == \"\")\r\n    }\r\n\r\n    const { \r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm } = useForm(initialValue, true, validate)\r\n\r\n\r\n     const handleSubmit=(event)=>{\r\n        event.preventDefault();\r\n        if(validate()){\r\n            addOrEdit(values.pdf_id,values,resetForm) \r\n        }\r\n     }\r\n\r\n     const handleFileChooser=(event)=>{\r\n        if(event.target.files && event.target.files[0]){\r\n            const pdfFile=event.target.files[0];\r\n\r\n            uploadPDF(pdfFile);\r\n          }\r\n     }\r\n\r\n     //upload Image \r\n     const uploadPDF=async (file)=>{\r\n        if(!file){\r\n          toast.error(\"Please select a file first\");\r\n          return\r\n        }\r\n        const fileName=`${file.name}-${Date.now()}`;\r\n        console.log(fileName);\r\n        setProgress(true)\r\n        const storageRef=ref(storage,`/pdfFiles/${fileName}`)\r\n        const uploadTask=uploadBytesResumable(storageRef,file)\r\n        uploadTask.on(\"state_changed\",(snapshot)=>{\r\n          const percent=(snapshot.bytesTransferred/snapshot.totalBytes) * 100\r\n          setUploadProgress(percent)\r\n  \r\n        },(err) => console.log(err),\r\n        ()=> {\r\n          //get download url\r\n          setProgress(false)\r\n          getDownloadURL(uploadTask.snapshot.ref).then((url)=>{\r\n            setValues({...values,pdfUrl:url})\r\n          })\r\n        }\r\n        );\r\n      }\r\n\r\n     useEffect(()=>{\r\n        if(recordForEdit!=null){\r\n            setValues({...recordForEdit});\r\n        }\r\n     },[recordForEdit]);\r\n\r\n  return (\r\n   <Form onSubmit={handleSubmit}>\r\n        {progress && <LinearProgressWithLabel value={uploadProgress}/>}\r\n            {values.pdfUrl? <iframe src={values.pdfUrl} width=\"100%\" height={350}/>:\"\"}\r\n           \r\n                \r\n               <Stack>\r\n                {progress? <CircularProgress/> : <Button \r\n                            style={{width:\"98%\"}}      \r\n                            variant='outlined' \r\n                            color='primary' \r\n                            component=\"label\"\r\n                            endIcon={<CloudUploadSharp/>}>\r\n                            Upload PDF File\r\n                            <input hidden\r\n                                accept=\"application/pdf\"\r\n                                id='inputVideoFile'\r\n                                multiple type=\"file\"\r\n                                onChange={handleFileChooser}\r\n                                \r\n                            />\r\n                        </Button> }\r\n               </Stack>\r\n          \r\n        <Controls.Input\r\n            style={{marginTop:\"24px\",width:\"98%\"}}\r\n            name=\"pdfUrl\"\r\n            label=\"Pdf url\"\r\n            value={values.pdfUrl}\r\n            onChange={handleInputChange}\r\n            error={errors.pdfUrl}/>\r\n        <Controls.Input\r\n            style={{width:\"98%\"}}\r\n            name=\"title\"\r\n            label=\"title\"\r\n            value={values.title}\r\n            onChange={handleInputChange}\r\n            error={errors.title}/>\r\n\r\n            <Button sx={{my:2}} type='submit' variant='contained' endIcon={<ArrowRightAlt/>}>\r\n                {recordForEdit?\"Update Record\":\"Add New Record\"}\r\n            </Button>\r\n   </Form>\r\n  )\r\n}\r\n\r\nexport default AddOrEditPDFsForm","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\ProgressBar\\LinearProgressWithLabel.jsx",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\helper\\TinyMceEditor.jsx",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\controls\\Button.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\controls\\ActionButton.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\controls\\Checkbox.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\controls\\DatePicker.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\controls\\Select.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\controls\\Input.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\components\\controls\\RadioGroup.js",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\innerItems\\QuizSelectItems.jsx",["604"],"import { CardContent } from '@material-ui/core';\r\nimport { Card, Checkbox, Stack, Typography } from '@mui/material'\r\nimport React from 'react'\r\n\r\nfunction QuizSelectItems(props) {\r\n    const {item,selectedQuizRecord, setSelectedQuizRecord}=props;\r\n\r\n    const handleCheckbox=(event)=>{\r\n        if(event.target.checked){\r\n            //add selected record\r\n            setSelectedQuizRecord(\r\n                [...selectedQuizRecord,\r\n                    {\r\n                        title: item.title,\r\n                        quiz_id: item.quiz_id,\r\n                        instructions: item.instructions,\r\n                        duration: item.duration,\r\n                        questions: item.questions,\r\n                        max_marks: item.max_marks\r\n                    }\r\n                ]     \r\n            )\r\n          }else {\r\n            //remove selected record\r\n            selectedQuizRecord.map((item)=>{\r\n                setSelectedQuizRecord(\r\n                    selectedQuizRecord.filter(a =>\r\n                        a.quiz_id !== item.quiz_id\r\n                        )\r\n                    )   \r\n            })\r\n\r\n        }\r\n    }\r\n        \r\n  return (\r\n    \r\n     <Card sx={{margin:\"8px\"}}>\r\n        <CardContent>\r\n            <Stack direction=\"column\" spacing={2}>\r\n                <Stack direction=\"row\" justifyContent=\"space-between\">\r\n                    <Typography variant='h6'>{item.title}</Typography>\r\n                    <Checkbox\r\n                        name={item.quiz_id}\r\n                        value={item.quiz_id}\r\n                        onChange={handleCheckbox}\r\n                        \r\n                    />\r\n                </Stack>\r\n                <Stack direction=\"row\" justifyContent=\"space-between\" spacing={5}>\r\n                    <Typography variant='subtitle'>\r\n                        {item.questions} Questions | \r\n                        {item.duration} Mins | \r\n                        {item.max_marks} Mark \r\n                    \r\n                    </Typography>\r\n                    \r\n                    <Typography variant='subtitle'>{item.category}</Typography>\r\n                    \r\n                </Stack>\r\n            </Stack>\r\n        </CardContent>\r\n     </Card>\r\n   \r\n  )\r\n}\r\n\r\nexport default QuizSelectItems",["605","606"],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\innerItems\\PDFListItem.jsx",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\innerItems\\QuizListItem.jsx",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\pages\\courseContent\\components\\innerItems\\VideoListItem.jsx",[],"D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\services\\Api.js",["607","608"],"import { push, ref, set, update } from \"firebase/database\";\r\nimport { Timestamp } from \"firebase/firestore\";\r\nimport { dbRealtime } from \"../firebase/FirebaseConfig\";\r\n//insert class \r\nexport const insertBoardClass=(title,onSuccess,onFailed)=>{   \r\n    try {\r\n        const dbRef = ref(dbRealtime, \"boardClass/\");\r\n        const itemRef = push(dbRef);\r\n        set(itemRef, {\r\n            title: title,\r\n            id: itemRef.key\r\n        })\r\n        onSuccess(\"Insert successfully\");\r\n\r\n    } catch (error) {\r\n        onFailed(\"Something went wrong\");\r\n        console.log(error);\r\n    }\r\n  \r\n}\r\n\r\nexport const editBoardClass=(id,title,onSuccess,onFailed)=>{\r\n    try {\r\n        const dbRef = ref(dbRealtime, \"boardClass/\"+id);\r\n        // const itemRef = push(dbRef);\r\n        update(dbRef, {\r\n            title: title,\r\n        })\r\n        onSuccess(\"Update successfully\");\r\n\r\n    } catch (error) {\r\n        onFailed(\"Something went wrong\");\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const deleteItem=(id,onSuccess,onFailed)=>{\r\n    \r\n        const dbRef = ref(dbRealtime, \"boardClass/\"+id);\r\n        set(dbRef, null).then(()=>{\r\n            onSuccess(\"Delete successfully\");\r\n        }).catch((error)=>{\r\n            onFailed(\"Something went wrong\");\r\n            console.log(error);\r\n\r\n        }) \r\n}\r\n\r\nexport const insertSubject=(data,onSuccess,onFailed)=>{   \r\n    try {\r\n        const docRef = ref(dbRealtime, \"/subjects/\");\r\n        const reference = push(docRef);\r\n        set(reference, {\r\n            subject_id: reference.key,\r\n            ...data\r\n        })\r\n        onSuccess(\"Insert successfully\");\r\n        console.log(reference.key);\r\n\r\n    } catch (error) {\r\n        onFailed(\"Something went wrong\");\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const editSubject=(id,data,onSuccess,onFailed)=>{\r\n        const dbRef = ref(dbRealtime, \"subjects/\"+id);\r\n        update(dbRef, {\r\n            ...data\r\n        }).then(()=>{\r\n            onSuccess(\"Update successfully\");\r\n        }).catch((error)=>{\r\n            onFailed(\"Something went wrong\");\r\n            console.log(error);\r\n        })\r\n}\r\n\r\nexport const deleteSubject=(id,onSuccess,onFailed)=>{\r\n    if(id!=\"\"){\r\n        const dbRef = ref(dbRealtime, \"subjects/\" + id);\r\n        set(dbRef, null).then(() => {\r\n            onSuccess(\"Delete successfully\");\r\n        }).catch((error) => {\r\n            onFailed(\"Something went wrong\");\r\n            console.log(error);\r\n        }) \r\n    }\r\n}\r\n\r\n\r\n//const addOrUpdate Quiz \r\nexport const insertQuiz=(data,quizInstruction)=>{\r\n    const dbRef = ref(dbRealtime, \"quizzes/\");\r\n        const itemRef = push(dbRef);\r\n        return set(itemRef, {\r\n            timestamp: Date.now(),\r\n            quiz_id: itemRef.key,\r\n            duration:parseInt(data.duration),\r\n            max_marks:parseInt(data.max_marks),\r\n            questions:parseInt(data.questions),\r\n            title:data.title,\r\n            instructions:quizInstruction,\r\n            subject_id:data.subject_id,\r\n            class_id:data.class_id\r\n        })\r\n}\r\n\r\n\r\nexport const editQuiz=(id,data,quizInstruction)=>{\r\n    const dbRef = ref(dbRealtime, \"quizzes/\"+id);\r\n    return update(dbRef, {\r\n        modifiedAt: Date.now(),\r\n        duration:parseInt(data.duration),\r\n        max_marks:parseInt(data.max_marks),\r\n        questions:parseInt(data.questions),\r\n        title:data.title,\r\n        instructions:quizInstruction,\r\n        subject_id:data.subject_id,\r\n        class_id:data.class_id\r\n    })\r\n}\r\n\r\nexport const deleteQuiz=id=>{\r\n    const dbRef = ref(dbRealtime, \"quizzes/\" + id);\r\n    return set(dbRef, null)\r\n}\r\n\r\n\r\n//add question\r\nexport const addQuestion=(quiz_id,data)=>{\r\n    const dbRef = ref(dbRealtime, \"questions/\");\r\n        const itemRef = push(dbRef);\r\n        return set(itemRef, {\r\n            timestamp: Date.now(),\r\n            quiz_id: quiz_id,\r\n            question_id:itemRef.key,\r\n            ...data\r\n        })\r\n}\r\n//update question\r\nexport const updateQuestion=(qnId,data)=>{\r\n    const dbRef = ref(dbRealtime, \"questions/\"+qnId);\r\n    return update(dbRef, {\r\n        modifiedAt: Date.now(),\r\n        ...data\r\n    })\r\n}\r\n\r\nexport const deleteQuestion=qnId=>{\r\n    const dbRef = ref(dbRealtime, \"questions/\" + qnId);\r\n    return set(dbRef, null)\r\n}\r\n\r\n//app slider\r\nexport const addAppSlider=(data)=>{\r\n    const dbRef = ref(dbRealtime, \"imageSlider/\");\r\n    const itemRef = push(dbRef);\r\n    return set(itemRef, {\r\n        timestamp: Date.now(),\r\n        slide_id:itemRef.key,\r\n        ...data\r\n    })\r\n}\r\n\r\nexport const editAppSlider=(slide_id,data)=>{\r\n    const dbRef = ref(dbRealtime, \"imageSlider/\"+slide_id);\r\n    return update(dbRef, {\r\n        modifiedAt: Date.now(),\r\n        ...data\r\n    })\r\n}\r\n\r\nexport const deleteAppSlider=id=>{\r\n      const dbRef = ref(dbRealtime, \"imageSlider/\" + id);\r\n        return set(dbRef, null)\r\n    \r\n}\r\n","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\services\\CourseService.js",["609","610"],"import { collection, deleteDoc, doc, runTransaction, setDoc, Timestamp, updateDoc, writeBatch } from \"firebase/firestore\"\r\nimport { dbFirestore } from \"../firebase/FirebaseConfig\"\r\n\r\nexport const insertCourse=async(data,cDescription)=>{\r\n    const docRef = doc(collection(dbFirestore, \"COURSES\"))\r\n    //store data\r\n    await setDoc(docRef, {\r\n        course_id: docRef.id,\r\n        title: data.title,\r\n        image: data.image,\r\n        original_price: parseInt(data.original_price),\r\n        discount: parseInt(data.discount),\r\n        finalPrice: parseInt(data.finalPrice),\r\n        validity: parseInt(data.validity),\r\n        category_id: data.category_id,\r\n        tags: data.tags,\r\n        status:data.status,\r\n        shortHighlights: data.shortHighlights,\r\n        course_description: cDescription,\r\n    })\r\n}\r\n\r\n\r\nexport const updateCourse=async(docId,data,cDescription)=>{\r\n    const ref=doc(dbFirestore,\"COURSES\",docId);\r\n   try {\r\n    await updateDoc(ref,{\r\n        title: data.title,\r\n        image: data.image,\r\n        original_price: parseInt(data.original_price),\r\n        discount: parseInt(data.discount),\r\n        finalPrice: parseInt(data.finalPrice),\r\n        validity: parseInt(data.validity),\r\n        category_id: data.category_id,\r\n        tags: data.tags,\r\n        status:data.status,\r\n        shortHighlights: data.shortHighlights,\r\n        course_description: cDescription\r\n    })\r\n   } catch (error) {\r\n    console.log(error)\r\n   }\r\n}\r\n\r\nexport const insertSection=async(data,cid)=>{\r\n    const docRef = doc(collection(dbFirestore, \"COURSE_LESSON_SECTIONS\"))\r\n    //store data\r\n    await setDoc(docRef, {\r\n        timestamp:Timestamp.now(),\r\n        course_id:cid,\r\n        section_id:docRef.id,\r\n        ...data\r\n    })\r\n}\r\n\r\nexport const updateSection=async(sid,data,onSuccess,onFailed)=>{\r\n    try {\r\n        const docRef = doc(dbFirestore, \"COURSE_LESSON_SECTIONS\",sid)\r\n        await updateDoc(docRef,{\r\n            modifiedAt:Timestamp.now(),\r\n            ...data\r\n        });\r\n        onSuccess(\"Record has been update\");\r\n    } catch (error) {\r\n        onFailed(error);\r\n    }\r\n}\r\n\r\n\r\nexport const insertVideoInSection=async (courseId,sectionId,data)=>{\r\n    const docRef = doc(collection(dbFirestore, \"COURSE_VIDEOS\"))\r\n    try {\r\n        //store data\r\n     await setDoc(docRef, {\r\n        timestamp:Timestamp.now(),\r\n        course_id:courseId,\r\n        section_id:sectionId,\r\n        video_id:docRef.id,\r\n        ...data\r\n    }) \r\n    //increase child count\r\n    const ref=doc(dbFirestore,\"COURSE_LESSON_SECTIONS\",sectionId)\r\n    increaseChildCount(ref,1);\r\n\r\n\r\n\r\n    } catch (error) {\r\n        console.log(\"insertVideoInSection Error\"+ error);\r\n    }\r\n}\r\n\r\nexport const updateVideoInSection=async (video_id,data,onSuccess,onFailed)=>{\r\n    const docRef = doc(dbFirestore, \"COURSE_VIDEOS\",video_id);\r\n    try {\r\n        //Update data\r\n     await updateDoc(docRef, {\r\n        ...data\r\n    }) \r\n    onSuccess(\"Record has been update\")\r\n   \r\n\r\n    } catch (error) {\r\n        console.log( error);\r\n        onFailed(\"Something went wrong\");\r\n    }\r\n}\r\n//delete videos in Section\r\n// export const deleteVideoInSection=async (video_id,onSuccess,onFailed)=>{\r\n//     const docRef=doc(dbFirestore,\"COURSE_VIDEOS\",video_id)\r\n// }\r\n\r\nexport const deleteDocument=async(docPath,docId,onSuccess,onFailed)=>{\r\n    try {\r\n        const docRef=doc(dbFirestore,docPath,docId);\r\n        await deleteDoc(docRef);\r\n        onSuccess(\"Record has been deleted\");\r\n\r\n    } catch (error) {\r\n        onFailed(error)\r\n    }\r\n}\r\n\r\n\r\n\r\nconst increaseChildCount=async(docRef,increment)=>{\r\n    try {\r\n        await runTransaction(dbFirestore,async(transaction)=>{\r\n            const document= await transaction.get(docRef);\r\n            if(!document.exists()){\r\n                throw \"document not exists\";\r\n            }\r\n            //update counter\r\n            const newCount=document.data().totalItemCount+increment;\r\n            transaction.update(docRef,{totalItemCount:newCount})\r\n        });\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\nexport const decreaseChildCount=async(docPath,docId)=>{\r\n    try {\r\n        const docRef=doc(dbFirestore,docPath,docId);\r\n\r\n        await runTransaction(dbFirestore,async(transaction)=>{\r\n            const document= await transaction.get(docRef);\r\n            if(!document.exists()){\r\n                throw \"document not exists\";\r\n            }\r\n            //update counter\r\n            if(document.data().totalItemCount>0){\r\n                const newCount=document.data().totalItemCount-1;\r\n                 transaction.update(docRef,{totalItemCount:newCount})\r\n            }\r\n        });\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\n//add pdf into section \r\nexport const addPdfInSection=async(courseId,sectionId,data,onSuccess,onFailed)=>{\r\n    const docRef = doc(collection(dbFirestore, \"COURSE_PDFS\"))\r\n    try {\r\n        //store data\r\n     await setDoc(docRef, {\r\n        timestamp:Timestamp.now(),\r\n        course_id:courseId,\r\n        section_id:sectionId,\r\n        pdf_id:docRef.id,\r\n        ...data\r\n    }) \r\n    //increase child count\r\n    const ref=doc(dbFirestore,\"COURSE_LESSON_SECTIONS\",sectionId)\r\n    increaseChildCount(ref,1);\r\n    onSuccess(\"Record Added Successfully\");\r\n\r\n    } catch (error) {\r\n        console.log(\"insertVideoInSection Error\"+ error);\r\n        onFailed(error);\r\n    }\r\n}\r\n\r\n//update PDF\r\nexport const updateItemInSection=async (docPath,docId,data,onSuccess,onFailed)=>{\r\n    const docRef = doc(dbFirestore, docPath,docId);\r\n    try {\r\n        //Update data\r\n     await updateDoc(docRef, {\r\n        ...data\r\n    }) \r\n    onSuccess(\"Record has been update\")\r\n   \r\n    } catch (error) {\r\n        console.log( error);\r\n        onFailed(\"Something went wrong\");\r\n    }\r\n}\r\n\r\n\r\n//insert quiz in section\r\nexport const insertQuizInSection=async (courseId,sectionId,dataArr,onSuccess,onFailed)=>{\r\n   try {\r\n    const batch=writeBatch(dbFirestore);\r\n    let docNum=0;\r\n    dataArr.forEach((element) => {\r\n        const docRef=doc(collection(dbFirestore, \"COURSE_QUIZZES\"))\r\n        batch.set(docRef,{\r\n            timestamp:Timestamp.now(),\r\n            course_id:courseId,\r\n            section_id:sectionId,\r\n            doc_id:docRef.id,\r\n            ...element\r\n        })\r\n        docNum++;\r\n   });\r\n\r\n   batch.commit();\r\n   onSuccess(\"Success\");\r\n   const ref=doc(dbFirestore,\"COURSE_LESSON_SECTIONS\",sectionId)\r\n   increaseChildCount(ref,docNum);\r\n\r\n\r\n   } catch (error) {\r\n     console.log(error)\r\n     onFailed(\"Something went wrong\");\r\n   }\r\n}","D:\\Client Projects\\Admin Dashboard\\adminApp\\src\\services\\Utils.js",[],{"ruleId":"611","replacedBy":"612"},{"ruleId":"613","replacedBy":"614"},{"ruleId":"615","severity":1,"message":"616","line":3,"column":61,"nodeType":"617","messageId":"618","endLine":3,"endColumn":75},{"ruleId":"615","severity":1,"message":"619","line":3,"column":91,"nodeType":"617","messageId":"618","endLine":3,"endColumn":105},{"ruleId":"615","severity":1,"message":"620","line":3,"column":122,"nodeType":"617","messageId":"618","endLine":3,"endColumn":129},{"ruleId":"615","severity":1,"message":"621","line":3,"column":190,"nodeType":"617","messageId":"618","endLine":3,"endColumn":201},{"ruleId":"615","severity":1,"message":"622","line":3,"column":203,"nodeType":"617","messageId":"618","endLine":3,"endColumn":222},{"ruleId":"615","severity":1,"message":"623","line":3,"column":224,"nodeType":"617","messageId":"618","endLine":3,"endColumn":237},{"ruleId":"615","severity":1,"message":"624","line":3,"column":260,"nodeType":"617","messageId":"618","endLine":3,"endColumn":277},{"ruleId":"615","severity":1,"message":"625","line":3,"column":320,"nodeType":"617","messageId":"618","endLine":3,"endColumn":331},{"ruleId":"615","severity":1,"message":"626","line":3,"column":341,"nodeType":"617","messageId":"618","endLine":3,"endColumn":353},{"ruleId":"615","severity":1,"message":"627","line":15,"column":8,"nodeType":"617","messageId":"618","endLine":15,"endColumn":11},{"ruleId":"615","severity":1,"message":"628","line":10,"column":3,"nodeType":"617","messageId":"618","endLine":10,"endColumn":7},{"ruleId":"615","severity":1,"message":"629","line":27,"column":29,"nodeType":"617","messageId":"618","endLine":27,"endColumn":35},{"ruleId":"615","severity":1,"message":"630","line":39,"column":8,"nodeType":"617","messageId":"618","endLine":39,"endColumn":17},{"ruleId":"631","severity":1,"message":"632","line":40,"column":10,"nodeType":"633","messageId":"634","endLine":40,"endColumn":12},{"ruleId":"631","severity":1,"message":"632","line":40,"column":20,"nodeType":"633","messageId":"634","endLine":40,"endColumn":22},{"ruleId":"631","severity":1,"message":"635","line":86,"column":11,"nodeType":"633","messageId":"634","endLine":86,"endColumn":13},{"ruleId":"631","severity":1,"message":"635","line":101,"column":9,"nodeType":"633","messageId":"634","endLine":101,"endColumn":11},{"ruleId":"631","severity":1,"message":"635","line":110,"column":13,"nodeType":"633","messageId":"634","endLine":110,"endColumn":15},{"ruleId":"631","severity":1,"message":"632","line":43,"column":19,"nodeType":"633","messageId":"634","endLine":43,"endColumn":21},{"ruleId":"615","severity":1,"message":"636","line":2,"column":10,"nodeType":"617","messageId":"618","endLine":2,"endColumn":15},{"ruleId":"631","severity":1,"message":"632","line":38,"column":10,"nodeType":"633","messageId":"634","endLine":38,"endColumn":12},{"ruleId":"631","severity":1,"message":"632","line":38,"column":27,"nodeType":"633","messageId":"634","endLine":38,"endColumn":29},{"ruleId":"631","severity":1,"message":"635","line":74,"column":36,"nodeType":"633","messageId":"634","endLine":74,"endColumn":38},{"ruleId":"631","severity":1,"message":"635","line":106,"column":11,"nodeType":"633","messageId":"634","endLine":106,"endColumn":13},{"ruleId":"631","severity":1,"message":"635","line":106,"column":29,"nodeType":"633","messageId":"634","endLine":106,"endColumn":31},{"ruleId":"637","severity":1,"message":"638","line":110,"column":3,"nodeType":"639","endLine":110,"endColumn":5,"suggestions":"640"},{"ruleId":"631","severity":1,"message":"632","line":129,"column":40,"nodeType":"633","messageId":"634","endLine":129,"endColumn":42},{"ruleId":"615","severity":1,"message":"641","line":15,"column":9,"nodeType":"617","messageId":"618","endLine":15,"endColumn":12},{"ruleId":"615","severity":1,"message":"642","line":8,"column":10,"nodeType":"617","messageId":"618","endLine":8,"endColumn":17},{"ruleId":"637","severity":1,"message":"643","line":35,"column":17,"nodeType":"617","endLine":35,"endColumn":24},{"ruleId":"615","severity":1,"message":"644","line":1,"column":10,"nodeType":"617","messageId":"618","endLine":1,"endColumn":15},{"ruleId":"631","severity":1,"message":"632","line":42,"column":26,"nodeType":"633","messageId":"634","endLine":42,"endColumn":28},{"ruleId":"615","severity":1,"message":"645","line":19,"column":21,"nodeType":"617","messageId":"618","endLine":19,"endColumn":32},{"ruleId":"631","severity":1,"message":"632","line":54,"column":18,"nodeType":"633","messageId":"634","endLine":54,"endColumn":20},{"ruleId":"637","severity":1,"message":"646","line":65,"column":7,"nodeType":"639","endLine":65,"endColumn":9,"suggestions":"647"},{"ruleId":"631","severity":1,"message":"632","line":35,"column":14,"nodeType":"633","messageId":"634","endLine":35,"endColumn":16},{"ruleId":"631","severity":1,"message":"632","line":49,"column":14,"nodeType":"633","messageId":"634","endLine":49,"endColumn":16},{"ruleId":"631","severity":1,"message":"632","line":49,"column":24,"nodeType":"633","messageId":"634","endLine":49,"endColumn":26},{"ruleId":"631","severity":1,"message":"635","line":65,"column":17,"nodeType":"633","messageId":"634","endLine":65,"endColumn":19},{"ruleId":"631","severity":1,"message":"635","line":71,"column":17,"nodeType":"633","messageId":"634","endLine":71,"endColumn":19},{"ruleId":"615","severity":1,"message":"648","line":78,"column":11,"nodeType":"617","messageId":"618","endLine":78,"endColumn":23},{"ruleId":"631","severity":1,"message":"632","line":309,"column":60,"nodeType":"633","messageId":"634","endLine":309,"endColumn":62},{"ruleId":"631","severity":1,"message":"632","line":33,"column":10,"nodeType":"633","messageId":"634","endLine":33,"endColumn":12},{"ruleId":"631","severity":1,"message":"632","line":33,"column":27,"nodeType":"633","messageId":"634","endLine":33,"endColumn":29},{"ruleId":"631","severity":1,"message":"635","line":105,"column":15,"nodeType":"633","messageId":"634","endLine":105,"endColumn":17},{"ruleId":"615","severity":1,"message":"642","line":26,"column":10,"nodeType":"617","messageId":"618","endLine":26,"endColumn":17},{"ruleId":"631","severity":1,"message":"635","line":64,"column":11,"nodeType":"633","messageId":"634","endLine":64,"endColumn":13},{"ruleId":"649","severity":1,"message":"650","line":125,"column":23,"nodeType":"651","endLine":125,"endColumn":93},{"ruleId":"615","severity":1,"message":"652","line":2,"column":17,"nodeType":"617","messageId":"618","endLine":2,"endColumn":24},{"ruleId":"615","severity":1,"message":"653","line":7,"column":10,"nodeType":"617","messageId":"618","endLine":7,"endColumn":16},{"ruleId":"615","severity":1,"message":"629","line":7,"column":18,"nodeType":"617","messageId":"618","endLine":7,"endColumn":24},{"ruleId":"615","severity":1,"message":"654","line":1,"column":10,"nodeType":"617","messageId":"618","endLine":1,"endColumn":25},{"ruleId":"615","severity":1,"message":"644","line":13,"column":10,"nodeType":"617","messageId":"618","endLine":13,"endColumn":15},{"ruleId":"631","severity":1,"message":"635","line":87,"column":17,"nodeType":"633","messageId":"634","endLine":87,"endColumn":19},{"ruleId":"631","severity":1,"message":"632","line":134,"column":46,"nodeType":"633","messageId":"634","endLine":134,"endColumn":48},{"ruleId":"615","severity":1,"message":"655","line":1,"column":10,"nodeType":"617","messageId":"618","endLine":1,"endColumn":24},{"ruleId":"615","severity":1,"message":"656","line":13,"column":46,"nodeType":"617","messageId":"618","endLine":13,"endColumn":56},{"ruleId":"631","severity":1,"message":"632","line":99,"column":25,"nodeType":"633","messageId":"634","endLine":99,"endColumn":27},{"ruleId":"631","severity":1,"message":"632","line":100,"column":53,"nodeType":"633","messageId":"634","endLine":100,"endColumn":55},{"ruleId":"631","severity":1,"message":"635","line":230,"column":15,"nodeType":"633","messageId":"634","endLine":230,"endColumn":17},{"ruleId":"631","severity":1,"message":"635","line":248,"column":15,"nodeType":"633","messageId":"634","endLine":248,"endColumn":17},{"ruleId":"637","severity":1,"message":"657","line":297,"column":7,"nodeType":"639","endLine":297,"endColumn":22,"suggestions":"658"},{"ruleId":"631","severity":1,"message":"635","line":320,"column":29,"nodeType":"633","messageId":"634","endLine":320,"endColumn":31},{"ruleId":"631","severity":1,"message":"635","line":320,"column":54,"nodeType":"633","messageId":"634","endLine":320,"endColumn":56},{"ruleId":"637","severity":1,"message":"659","line":323,"column":8,"nodeType":"639","endLine":323,"endColumn":25,"suggestions":"660"},{"ruleId":"661","severity":1,"message":"662","line":448,"column":17,"nodeType":"651","endLine":448,"endColumn":76},{"ruleId":"615","severity":1,"message":"663","line":2,"column":67,"nodeType":"617","messageId":"618","endLine":2,"endColumn":76},{"ruleId":"631","severity":1,"message":"632","line":79,"column":25,"nodeType":"633","messageId":"634","endLine":79,"endColumn":27},{"ruleId":"631","severity":1,"message":"632","line":80,"column":53,"nodeType":"633","messageId":"634","endLine":80,"endColumn":55},{"ruleId":"631","severity":1,"message":"635","line":180,"column":15,"nodeType":"633","messageId":"634","endLine":180,"endColumn":17},{"ruleId":"631","severity":1,"message":"635","line":198,"column":15,"nodeType":"633","messageId":"634","endLine":198,"endColumn":17},{"ruleId":"637","severity":1,"message":"657","line":242,"column":8,"nodeType":"639","endLine":242,"endColumn":23,"suggestions":"664"},{"ruleId":"631","severity":1,"message":"635","line":266,"column":29,"nodeType":"633","messageId":"634","endLine":266,"endColumn":31},{"ruleId":"631","severity":1,"message":"635","line":266,"column":54,"nodeType":"633","messageId":"634","endLine":266,"endColumn":56},{"ruleId":"665","severity":1,"message":"666","line":276,"column":29,"nodeType":"651","endLine":276,"endColumn":84},{"ruleId":"649","severity":1,"message":"650","line":317,"column":35,"nodeType":"651","endLine":317,"endColumn":108},{"ruleId":"615","severity":1,"message":"667","line":2,"column":10,"nodeType":"617","messageId":"618","endLine":2,"endColumn":23},{"ruleId":"615","severity":1,"message":"668","line":3,"column":36,"nodeType":"617","messageId":"618","endLine":3,"endColumn":47},{"ruleId":"631","severity":1,"message":"632","line":35,"column":25,"nodeType":"633","messageId":"634","endLine":35,"endColumn":27},{"ruleId":"631","severity":1,"message":"632","line":36,"column":53,"nodeType":"633","messageId":"634","endLine":36,"endColumn":55},{"ruleId":"615","severity":1,"message":"669","line":78,"column":17,"nodeType":"617","messageId":"618","endLine":78,"endColumn":24},{"ruleId":"637","severity":1,"message":"657","line":95,"column":9,"nodeType":"639","endLine":95,"endColumn":24,"suggestions":"670"},{"ruleId":"661","severity":1,"message":"662","line":100,"column":26,"nodeType":"651","endLine":100,"endColumn":77},{"ruleId":"615","severity":1,"message":"671","line":1,"column":29,"nodeType":"617","messageId":"618","endLine":1,"endColumn":39},{"ruleId":"615","severity":1,"message":"672","line":7,"column":45,"nodeType":"617","messageId":"618","endLine":7,"endColumn":56},{"ruleId":"615","severity":1,"message":"673","line":9,"column":15,"nodeType":"617","messageId":"618","endLine":9,"endColumn":20},{"ruleId":"631","severity":1,"message":"632","line":15,"column":17,"nodeType":"633","messageId":"634","endLine":15,"endColumn":19},{"ruleId":"615","severity":1,"message":"674","line":29,"column":12,"nodeType":"617","messageId":"618","endLine":29,"endColumn":29},{"ruleId":"631","severity":1,"message":"632","line":47,"column":33,"nodeType":"633","messageId":"634","endLine":47,"endColumn":35},{"ruleId":"631","severity":1,"message":"632","line":71,"column":39,"nodeType":"633","messageId":"634","endLine":71,"endColumn":41},{"ruleId":"631","severity":1,"message":"632","line":94,"column":39,"nodeType":"633","messageId":"634","endLine":94,"endColumn":41},{"ruleId":"631","severity":1,"message":"632","line":146,"column":22,"nodeType":"633","messageId":"634","endLine":146,"endColumn":24},{"ruleId":"631","severity":1,"message":"632","line":146,"column":32,"nodeType":"633","messageId":"634","endLine":146,"endColumn":34},{"ruleId":"615","severity":1,"message":"675","line":17,"column":39,"nodeType":"617","messageId":"618","endLine":17,"endColumn":47},{"ruleId":"615","severity":1,"message":"676","line":17,"column":49,"nodeType":"617","messageId":"618","endLine":17,"endColumn":60},{"ruleId":"631","severity":1,"message":"632","line":40,"column":25,"nodeType":"633","messageId":"634","endLine":40,"endColumn":27},{"ruleId":"631","severity":1,"message":"632","line":41,"column":53,"nodeType":"633","messageId":"634","endLine":41,"endColumn":55},{"ruleId":"637","severity":1,"message":"677","line":109,"column":5,"nodeType":"639","endLine":109,"endColumn":7,"suggestions":"678"},{"ruleId":"615","severity":1,"message":"675","line":23,"column":43,"nodeType":"617","messageId":"618","endLine":23,"endColumn":51},{"ruleId":"615","severity":1,"message":"676","line":23,"column":52,"nodeType":"617","messageId":"618","endLine":23,"endColumn":63},{"ruleId":"631","severity":1,"message":"632","line":40,"column":25,"nodeType":"633","messageId":"634","endLine":40,"endColumn":27},{"ruleId":"631","severity":1,"message":"632","line":41,"column":53,"nodeType":"633","messageId":"634","endLine":41,"endColumn":55},{"ruleId":"637","severity":1,"message":"657","line":66,"column":4,"nodeType":"639","endLine":66,"endColumn":19,"suggestions":"679"},{"ruleId":"615","severity":1,"message":"680","line":6,"column":61,"nodeType":"617","messageId":"618","endLine":6,"endColumn":81},{"ruleId":"615","severity":1,"message":"672","line":46,"column":43,"nodeType":"617","messageId":"618","endLine":46,"endColumn":54},{"ruleId":"615","severity":1,"message":"681","line":48,"column":10,"nodeType":"617","messageId":"618","endLine":48,"endColumn":23},{"ruleId":"631","severity":1,"message":"632","line":76,"column":25,"nodeType":"633","messageId":"634","endLine":76,"endColumn":27},{"ruleId":"631","severity":1,"message":"632","line":77,"column":53,"nodeType":"633","messageId":"634","endLine":77,"endColumn":55},{"ruleId":"637","severity":1,"message":"657","line":167,"column":7,"nodeType":"639","endLine":167,"endColumn":22,"suggestions":"682"},{"ruleId":"649","severity":1,"message":"650","line":306,"column":17,"nodeType":"651","endLine":306,"endColumn":92},{"ruleId":"615","severity":1,"message":"683","line":1,"column":24,"nodeType":"617","messageId":"618","endLine":1,"endColumn":39},{"ruleId":"615","severity":1,"message":"684","line":2,"column":31,"nodeType":"617","messageId":"618","endLine":2,"endColumn":41},{"ruleId":"615","severity":1,"message":"685","line":13,"column":10,"nodeType":"617","messageId":"618","endLine":13,"endColumn":17},{"ruleId":"615","severity":1,"message":"686","line":25,"column":10,"nodeType":"617","messageId":"618","endLine":25,"endColumn":21},{"ruleId":"615","severity":1,"message":"687","line":25,"column":22,"nodeType":"617","messageId":"618","endLine":25,"endColumn":36},{"ruleId":"615","severity":1,"message":"688","line":1,"column":10,"nodeType":"617","messageId":"618","endLine":1,"endColumn":22},{"ruleId":"631","severity":1,"message":"632","line":66,"column":25,"nodeType":"633","messageId":"634","endLine":66,"endColumn":27},{"ruleId":"631","severity":1,"message":"632","line":67,"column":53,"nodeType":"633","messageId":"634","endLine":67,"endColumn":55},{"ruleId":"637","severity":1,"message":"657","line":147,"column":4,"nodeType":"639","endLine":147,"endColumn":19,"suggestions":"689"},{"ruleId":"631","severity":1,"message":"635","line":150,"column":23,"nodeType":"633","messageId":"634","endLine":150,"endColumn":25},{"ruleId":"631","severity":1,"message":"635","line":150,"column":46,"nodeType":"633","messageId":"634","endLine":150,"endColumn":48},{"ruleId":"637","severity":1,"message":"659","line":154,"column":4,"nodeType":"639","endLine":154,"endColumn":21,"suggestions":"690"},{"ruleId":"615","severity":1,"message":"691","line":1,"column":10,"nodeType":"617","messageId":"618","endLine":1,"endColumn":15},{"ruleId":"615","severity":1,"message":"653","line":3,"column":10,"nodeType":"617","messageId":"618","endLine":3,"endColumn":16},{"ruleId":"615","severity":1,"message":"684","line":3,"column":37,"nodeType":"617","messageId":"618","endLine":3,"endColumn":47},{"ruleId":"615","severity":1,"message":"692","line":4,"column":10,"nodeType":"617","messageId":"618","endLine":4,"endColumn":14},{"ruleId":"615","severity":1,"message":"693","line":4,"column":16,"nodeType":"617","messageId":"618","endLine":4,"endColumn":19},{"ruleId":"631","severity":1,"message":"632","line":25,"column":52,"nodeType":"633","messageId":"634","endLine":25,"endColumn":54},{"ruleId":"631","severity":1,"message":"632","line":27,"column":43,"nodeType":"633","messageId":"634","endLine":27,"endColumn":45},{"ruleId":"637","severity":1,"message":"694","line":11,"column":7,"nodeType":"639","endLine":11,"endColumn":9,"suggestions":"695"},{"ruleId":"637","severity":1,"message":"696","line":26,"column":5,"nodeType":"639","endLine":26,"endColumn":7,"suggestions":"697"},{"ruleId":"615","severity":1,"message":"698","line":2,"column":34,"nodeType":"617","messageId":"618","endLine":2,"endColumn":41},{"ruleId":"637","severity":1,"message":"699","line":26,"column":5,"nodeType":"639","endLine":26,"endColumn":7,"suggestions":"700"},{"ruleId":"637","severity":1,"message":"701","line":31,"column":5,"nodeType":"639","endLine":31,"endColumn":7,"suggestions":"702"},{"ruleId":"615","severity":1,"message":"703","line":34,"column":12,"nodeType":"617","messageId":"618","endLine":34,"endColumn":25},{"ruleId":"615","severity":1,"message":"681","line":35,"column":12,"nodeType":"617","messageId":"618","endLine":35,"endColumn":25},{"ruleId":"615","severity":1,"message":"704","line":36,"column":12,"nodeType":"617","messageId":"618","endLine":36,"endColumn":28},{"ruleId":"615","severity":1,"message":"705","line":36,"column":30,"nodeType":"617","messageId":"618","endLine":36,"endColumn":49},{"ruleId":"631","severity":1,"message":"632","line":70,"column":25,"nodeType":"633","messageId":"634","endLine":70,"endColumn":27},{"ruleId":"631","severity":1,"message":"632","line":71,"column":53,"nodeType":"633","messageId":"634","endLine":71,"endColumn":55},{"ruleId":"615","severity":1,"message":"706","line":135,"column":15,"nodeType":"617","messageId":"618","endLine":135,"endColumn":23},{"ruleId":"637","severity":1,"message":"657","line":198,"column":8,"nodeType":"639","endLine":198,"endColumn":23,"suggestions":"707"},{"ruleId":"661","severity":1,"message":"662","line":326,"column":17,"nodeType":"651","endLine":326,"endColumn":76},{"ruleId":"631","severity":1,"message":"635","line":35,"column":15,"nodeType":"633","messageId":"634","endLine":35,"endColumn":17},{"ruleId":"631","severity":1,"message":"635","line":41,"column":16,"nodeType":"633","messageId":"634","endLine":41,"endColumn":18},{"ruleId":"631","severity":1,"message":"632","line":38,"column":25,"nodeType":"633","messageId":"634","endLine":38,"endColumn":27},{"ruleId":"631","severity":1,"message":"632","line":39,"column":53,"nodeType":"633","messageId":"634","endLine":39,"endColumn":55},{"ruleId":"637","severity":1,"message":"657","line":96,"column":8,"nodeType":"639","endLine":96,"endColumn":23,"suggestions":"708"},{"ruleId":"665","severity":1,"message":"666","line":101,"column":29,"nodeType":"651","endLine":101,"endColumn":84},{"ruleId":"709","severity":1,"message":"710","line":25,"column":42,"nodeType":"711","messageId":"712","endLine":25,"endColumn":44},{"ruleId":"611","replacedBy":"713"},{"ruleId":"613","replacedBy":"714"},{"ruleId":"615","severity":1,"message":"715","line":2,"column":10,"nodeType":"617","messageId":"618","endLine":2,"endColumn":19},{"ruleId":"631","severity":1,"message":"635","line":79,"column":10,"nodeType":"633","messageId":"634","endLine":79,"endColumn":12},{"ruleId":"716","severity":1,"message":"717","line":130,"column":17,"nodeType":"718","messageId":"719","endLine":130,"endColumn":45},{"ruleId":"716","severity":1,"message":"717","line":148,"column":17,"nodeType":"718","messageId":"719","endLine":148,"endColumn":45},"no-native-reassign",["720"],"no-negated-in-lhs",["721"],"no-unused-vars","'UIElementsIcon' is defined but never used.","Identifier","unusedVar","'TypographyIcon' is defined but never used.","'FAQIcon' is defined but never used.","'LibraryIcon' is defined but never used.","'LibraryBooksTwoTone' is defined but never used.","'Notifications' is defined but never used.","'NotificationsIcon' is defined but never used.","'SupportIcon' is defined but never used.","'VerifiedUser' is defined but never used.","'Dot' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'classname' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'child' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getQuestions' and 'qid'. Either include them or remove the dependency array.","ArrayExpression",["722"],"'ref' is assigned a value but never used.","'loading' is assigned a value but never used.","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'async' is defined but never used.","'setCourseId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'courseId'. Either include it or remove the dependency array.",["723"],"'handleDelete' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'useMemo' is defined but never used.","'Avatar' is defined but never used.","'AddCardOutlined' is defined but never used.","'LinkOffRounded' is defined but never used.","'handlePlay' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setValues'. Either include it or remove the dependency array.",["724"],"React Hook useEffect has a missing dependency: 'getSubjects'. Either include it or remove the dependency array.",["725"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'FormGroup' is defined but never used.",["726"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'BrowseGallery' is defined but never used.","'FormControl' is defined but never used.","'percent' is assigned a value but never used.",["727"],"'Typography' is defined but never used.","'setProgress' is assigned a value but never used.","'setId' is assigned a value but never used.","'quizRecordForEdit' is assigned a value but never used.","'progress' is assigned a value but never used.","'SetProgress' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'recordForEdit' and 'setValues'. Either include them or remove the dependency array.",["728"],["729"],"'disableBackdropClick' is assigned a value but never used.","'selectedImage' is assigned a value but never used.",["730"],"'LinkOffOutlined' is defined but never used.","'CardHeader' is defined but never used.","'getAuth' is defined but never used.","'dynamicLink' is assigned a value but never used.","'setDynamicLink' is assigned a value but never used.","'Autocomplete' is defined but never used.",["731"],["732"],"'Check' is defined but never used.","'blue' is defined but never used.","'red' is defined but never used.","React Hook useEffect has a missing dependency: 'videoUrl'. Either include it or remove the dependency array.",["733"],"React Hook useEffect has missing dependencies: 'getVideos' and 'sectionId'. Either include them or remove the dependency array.",["734"],"'orderBy' is defined but never used.","React Hook useEffect has missing dependencies: 'getQuizzes' and 'sectionId'. Either include them or remove the dependency array.",["735"],"React Hook useEffect has missing dependencies: 'getPDFs' and 'sectionId'. Either include them or remove the dependency array.",["736"],"'selectedVideo' is assigned a value but never used.","'videoLoadSuccess' is assigned a value but never used.","'setVideoLoadSuccess' is assigned a value but never used.","'fileName' is assigned a value but never used.",["737"],["738"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["720"],["721"],"'Timestamp' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-global-assign","no-unsafe-negation",{"desc":"739","fix":"740"},{"desc":"741","fix":"742"},{"desc":"743","fix":"744"},{"desc":"745","fix":"746"},{"desc":"743","fix":"747"},{"desc":"743","fix":"748"},{"desc":"743","fix":"749"},{"desc":"743","fix":"750"},{"desc":"743","fix":"751"},{"desc":"743","fix":"752"},{"desc":"745","fix":"753"},{"desc":"754","fix":"755"},{"desc":"756","fix":"757"},{"desc":"758","fix":"759"},{"desc":"760","fix":"761"},{"desc":"743","fix":"762"},{"desc":"743","fix":"763"},"Update the dependencies array to be: [getQuestions, qid]",{"range":"764","text":"765"},"Update the dependencies array to be: [courseId]",{"range":"766","text":"767"},"Update the dependencies array to be: [recordForEdit, setValues]",{"range":"768","text":"769"},"Update the dependencies array to be: [getSubjects, values.class_id]",{"range":"770","text":"771"},{"range":"772","text":"769"},{"range":"773","text":"769"},{"range":"774","text":"769"},{"range":"775","text":"769"},{"range":"776","text":"769"},{"range":"777","text":"769"},{"range":"778","text":"771"},"Update the dependencies array to be: [videoUrl]",{"range":"779","text":"780"},"Update the dependencies array to be: [getVideos, sectionId]",{"range":"781","text":"782"},"Update the dependencies array to be: [getQuizzes, sectionId]",{"range":"783","text":"784"},"Update the dependencies array to be: [getPDFs, sectionId]",{"range":"785","text":"786"},{"range":"787","text":"769"},{"range":"788","text":"769"},[3068,3070],"[getQuestions, qid]",[2257,2259],"[courseId]",[9254,9269],"[recordForEdit, setValues]",[10040,10057],"[getSubjects, values.class_id]",[7594,7609],[2766,2781],[3464,3466],[1639,1654],[4800,4815],[3764,3779],[3950,3967],[256,258],"[videoUrl]",[900,902],"[getVideos, sectionId]",[832,834],"[getQuizzes, sectionId]",[907,909],"[getPDFs, sectionId]",[6632,6647],[2972,2987]]